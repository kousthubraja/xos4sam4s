
PWM_PWM_LED_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c94  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000848  20000000  00402c94  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010c  20000848  004034dc  00010848  2**2
                  ALLOC
  3 .stack        00003004  20000954  004035e8  00010848  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010872  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001de72  00000000  00000000  000108e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000056e9  00000000  00000000  0002e755  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000765c  00000000  00000000  00033e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e18  00000000  00000000  0003b49a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a30  00000000  00000000  0003c2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000121c5  00000000  00000000  0003cce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f3f1  00000000  00000000  0004eea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00050513  00000000  00000000  0005e298  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c0c  00000000  00000000  000ae7ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003958 	.word	0x20003958
  400004:	00400dad 	.word	0x00400dad
  400008:	00400da9 	.word	0x00400da9
  40000c:	00400da9 	.word	0x00400da9
  400010:	00400da9 	.word	0x00400da9
  400014:	00400da9 	.word	0x00400da9
  400018:	00400da9 	.word	0x00400da9
	...
  40002c:	00400da9 	.word	0x00400da9
  400030:	00400da9 	.word	0x00400da9
  400034:	00000000 	.word	0x00000000
  400038:	00400da9 	.word	0x00400da9
  40003c:	00400da9 	.word	0x00400da9
  400040:	00400da9 	.word	0x00400da9
  400044:	00400da9 	.word	0x00400da9
  400048:	00400da9 	.word	0x00400da9
  40004c:	00400da9 	.word	0x00400da9
  400050:	00400da9 	.word	0x00400da9
  400054:	00400da9 	.word	0x00400da9
  400058:	00400da9 	.word	0x00400da9
  40005c:	00400da9 	.word	0x00400da9
  400060:	00400da9 	.word	0x00400da9
  400064:	00400da9 	.word	0x00400da9
  400068:	00000000 	.word	0x00000000
  40006c:	004007f9 	.word	0x004007f9
  400070:	00400815 	.word	0x00400815
  400074:	00400831 	.word	0x00400831
  400078:	00400da9 	.word	0x00400da9
  40007c:	00400da9 	.word	0x00400da9
	...
  400088:	00400da9 	.word	0x00400da9
  40008c:	00400da9 	.word	0x00400da9
  400090:	00400da9 	.word	0x00400da9
  400094:	00400da9 	.word	0x00400da9
  400098:	00400da9 	.word	0x00400da9
  40009c:	00400da9 	.word	0x00400da9
  4000a0:	00400da9 	.word	0x00400da9
  4000a4:	00400da9 	.word	0x00400da9
  4000a8:	00400da9 	.word	0x00400da9
  4000ac:	00400da9 	.word	0x00400da9
  4000b0:	00400da9 	.word	0x00400da9
  4000b4:	00400da9 	.word	0x00400da9
  4000b8:	00400da9 	.word	0x00400da9
  4000bc:	00401395 	.word	0x00401395
  4000c0:	00400da9 	.word	0x00400da9
  4000c4:	00400da9 	.word	0x00400da9
  4000c8:	00400da9 	.word	0x00400da9

004000cc <deregister_tm_clones>:
  4000cc:	b508      	push	{r3, lr}
  4000ce:	4805      	ldr	r0, [pc, #20]	; (4000e4 <deregister_tm_clones+0x18>)
  4000d0:	4b05      	ldr	r3, [pc, #20]	; (4000e8 <deregister_tm_clones+0x1c>)
  4000d2:	1a19      	subs	r1, r3, r0
  4000d4:	2906      	cmp	r1, #6
  4000d6:	d800      	bhi.n	4000da <deregister_tm_clones+0xe>
  4000d8:	bd08      	pop	{r3, pc}
  4000da:	4a04      	ldr	r2, [pc, #16]	; (4000ec <deregister_tm_clones+0x20>)
  4000dc:	2a00      	cmp	r2, #0
  4000de:	d0fb      	beq.n	4000d8 <deregister_tm_clones+0xc>
  4000e0:	4790      	blx	r2
  4000e2:	e7f9      	b.n	4000d8 <deregister_tm_clones+0xc>
  4000e4:	00402c94 	.word	0x00402c94
  4000e8:	00402c97 	.word	0x00402c97
  4000ec:	00000000 	.word	0x00000000

004000f0 <register_tm_clones>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4807      	ldr	r0, [pc, #28]	; (400110 <register_tm_clones+0x20>)
  4000f4:	4b07      	ldr	r3, [pc, #28]	; (400114 <register_tm_clones+0x24>)
  4000f6:	1a19      	subs	r1, r3, r0
  4000f8:	108a      	asrs	r2, r1, #2
  4000fa:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
  4000fe:	1059      	asrs	r1, r3, #1
  400100:	d100      	bne.n	400104 <register_tm_clones+0x14>
  400102:	bd08      	pop	{r3, pc}
  400104:	4a04      	ldr	r2, [pc, #16]	; (400118 <register_tm_clones+0x28>)
  400106:	2a00      	cmp	r2, #0
  400108:	d0fb      	beq.n	400102 <register_tm_clones+0x12>
  40010a:	4790      	blx	r2
  40010c:	e7f9      	b.n	400102 <register_tm_clones+0x12>
  40010e:	bf00      	nop
  400110:	00402c94 	.word	0x00402c94
  400114:	00402c94 	.word	0x00402c94
  400118:	00000000 	.word	0x00000000

0040011c <__do_global_dtors_aux>:
  40011c:	b510      	push	{r4, lr}
  40011e:	4c06      	ldr	r4, [pc, #24]	; (400138 <__do_global_dtors_aux+0x1c>)
  400120:	7823      	ldrb	r3, [r4, #0]
  400122:	b943      	cbnz	r3, 400136 <__do_global_dtors_aux+0x1a>
  400124:	f7ff ffd2 	bl	4000cc <deregister_tm_clones>
  400128:	4804      	ldr	r0, [pc, #16]	; (40013c <__do_global_dtors_aux+0x20>)
  40012a:	b110      	cbz	r0, 400132 <__do_global_dtors_aux+0x16>
  40012c:	4804      	ldr	r0, [pc, #16]	; (400140 <__do_global_dtors_aux+0x24>)
  40012e:	f3af 8000 	nop.w
  400132:	2101      	movs	r1, #1
  400134:	7021      	strb	r1, [r4, #0]
  400136:	bd10      	pop	{r4, pc}
  400138:	20000848 	.word	0x20000848
  40013c:	00000000 	.word	0x00000000
  400140:	00402c94 	.word	0x00402c94

00400144 <frame_dummy>:
  400144:	b508      	push	{r3, lr}
  400146:	4b08      	ldr	r3, [pc, #32]	; (400168 <frame_dummy+0x24>)
  400148:	b11b      	cbz	r3, 400152 <frame_dummy+0xe>
  40014a:	4808      	ldr	r0, [pc, #32]	; (40016c <frame_dummy+0x28>)
  40014c:	4908      	ldr	r1, [pc, #32]	; (400170 <frame_dummy+0x2c>)
  40014e:	f3af 8000 	nop.w
  400152:	4808      	ldr	r0, [pc, #32]	; (400174 <frame_dummy+0x30>)
  400154:	6801      	ldr	r1, [r0, #0]
  400156:	b111      	cbz	r1, 40015e <frame_dummy+0x1a>
  400158:	4a07      	ldr	r2, [pc, #28]	; (400178 <frame_dummy+0x34>)
  40015a:	b102      	cbz	r2, 40015e <frame_dummy+0x1a>
  40015c:	4790      	blx	r2
  40015e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400162:	f7ff bfc5 	b.w	4000f0 <register_tm_clones>
  400166:	bf00      	nop
  400168:	00000000 	.word	0x00000000
  40016c:	00402c94 	.word	0x00402c94
  400170:	2000084c 	.word	0x2000084c
  400174:	00402c94 	.word	0x00402c94
  400178:	00000000 	.word	0x00000000

0040017c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40017c:	b510      	push	{r4, lr}
	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40017e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  400182:	f2c0 7027 	movt	r0, #1831	; 0x727
  400186:	f241 03c9 	movw	r3, #4297	; 0x10c9
  40018a:	f2c0 0340 	movt	r3, #64	; 0x40
  40018e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400190:	f04f 0000 	mov.w	r0, #0
  400194:	f04f 013e 	mov.w	r1, #62	; 0x3e
  400198:	f640 02ed 	movw	r2, #2285	; 0x8ed
  40019c:	f2c0 0240 	movt	r2, #64	; 0x40
  4001a0:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001a2:	f640 145d 	movw	r4, #2397	; 0x95d
  4001a6:	f2c0 0440 	movt	r4, #64	; 0x40
  4001aa:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001ac:	2800      	cmp	r0, #0
  4001ae:	d0fc      	beq.n	4001aa <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001b0:	f640 106d 	movw	r0, #2413	; 0x96d
  4001b4:	f2c0 0040 	movt	r0, #64	; 0x40
  4001b8:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4001be:	f2c4 010e 	movt	r1, #16398	; 0x400e
  4001c2:	f643 7301 	movw	r3, #16129	; 0x3f01
  4001c6:	f2c2 0313 	movt	r3, #8211	; 0x2013
  4001ca:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4001cc:	f640 147d 	movw	r4, #2429	; 0x97d
  4001d0:	f2c0 0440 	movt	r4, #64	; 0x40
  4001d4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d6:	2800      	cmp	r0, #0
  4001d8:	d0fc      	beq.n	4001d4 <sysclk_init+0x58>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001da:	f04f 0010 	mov.w	r0, #16
  4001de:	f640 024d 	movw	r2, #2125	; 0x84d
  4001e2:	f2c0 0240 	movt	r2, #64	; 0x40
  4001e6:	4790      	blx	r2
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e8:	f640 7011 	movw	r0, #3857	; 0xf11
  4001ec:	f2c0 0040 	movt	r0, #64	; 0x40
  4001f0:	4780      	blx	r0
  4001f2:	bd10      	pop	{r4, pc}

004001f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4001f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4001f8:	460c      	mov	r4, r1
  4001fa:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
  4001fc:	bb48      	cbnz	r0, 400252 <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
  4001fe:	2a00      	cmp	r2, #0
  400200:	dd2b      	ble.n	40025a <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
  400202:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400204:	f640 1620 	movw	r6, #2336	; 0x920
  400208:	f2c2 0600 	movt	r6, #8192	; 0x2000
  40020c:	f640 1518 	movw	r5, #2328	; 0x918
  400210:	f2c2 0500 	movt	r5, #8192	; 0x2000
  400214:	ea6f 0901 	mvn.w	r9, r1
  400218:	eb07 0009 	add.w	r0, r7, r9
  40021c:	f000 0901 	and.w	r9, r0, #1
  400220:	6830      	ldr	r0, [r6, #0]
  400222:	682b      	ldr	r3, [r5, #0]
  400224:	4798      	blx	r3
		ptr++;
  400226:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022a:	42bc      	cmp	r4, r7
  40022c:	d119      	bne.n	400262 <_read+0x6e>
  40022e:	e00d      	b.n	40024c <_read+0x58>
		ptr_get(stdio_base, ptr);
  400230:	6830      	ldr	r0, [r6, #0]
  400232:	682b      	ldr	r3, [r5, #0]
  400234:	4621      	mov	r1, r4
  400236:	4798      	blx	r3
		ptr++;
  400238:	f104 0401 	add.w	r4, r4, #1
  40023c:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  40023e:	6830      	ldr	r0, [r6, #0]
  400240:	682a      	ldr	r2, [r5, #0]
  400242:	4790      	blx	r2
		ptr++;
  400244:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400248:	42bc      	cmp	r4, r7
  40024a:	d1f1      	bne.n	400230 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40024c:	4640      	mov	r0, r8
  40024e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400252:	f04f 30ff 	mov.w	r0, #4294967295
  400256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
  40025a:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40025e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400262:	f1b9 0f00 	cmp.w	r9, #0
  400266:	d0e3      	beq.n	400230 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  400268:	6830      	ldr	r0, [r6, #0]
  40026a:	682a      	ldr	r2, [r5, #0]
  40026c:	4621      	mov	r1, r4
  40026e:	4790      	blx	r2
		ptr++;
  400270:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400274:	42bc      	cmp	r4, r7
  400276:	d1db      	bne.n	400230 <_read+0x3c>
  400278:	e7e8      	b.n	40024c <_read+0x58>
  40027a:	bf00      	nop

0040027c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40027c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400280:	460d      	mov	r5, r1
  400282:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400284:	f100 30ff 	add.w	r0, r0, #4294967295
  400288:	2802      	cmp	r0, #2
  40028a:	d824      	bhi.n	4002d6 <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
  40028c:	b332      	cbz	r2, 4002dc <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40028e:	f640 1620 	movw	r6, #2336	; 0x920
  400292:	f2c2 0600 	movt	r6, #8192	; 0x2000
  400296:	f640 171c 	movw	r7, #2332	; 0x91c
  40029a:	f2c2 0700 	movt	r7, #8192	; 0x2000
  40029e:	f04f 0400 	mov.w	r4, #0
  4002a2:	f102 39ff 	add.w	r9, r2, #4294967295
  4002a6:	f009 0901 	and.w	r9, r9, #1
  4002aa:	6830      	ldr	r0, [r6, #0]
  4002ac:	683b      	ldr	r3, [r7, #0]
  4002ae:	5d09      	ldrb	r1, [r1, r4]
  4002b0:	4798      	blx	r3
  4002b2:	42a0      	cmp	r0, r4
  4002b4:	da1a      	bge.n	4002ec <_write+0x70>
  4002b6:	e014      	b.n	4002e2 <_write+0x66>
  4002b8:	6830      	ldr	r0, [r6, #0]
  4002ba:	683b      	ldr	r3, [r7, #0]
  4002bc:	5d29      	ldrb	r1, [r5, r4]
  4002be:	4798      	blx	r3
  4002c0:	2800      	cmp	r0, #0
  4002c2:	db0e      	blt.n	4002e2 <_write+0x66>
			return -1;
		}
		++nChars;
  4002c4:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4002c8:	6830      	ldr	r0, [r6, #0]
  4002ca:	683a      	ldr	r2, [r7, #0]
  4002cc:	5d29      	ldrb	r1, [r5, r4]
  4002ce:	4790      	blx	r2
  4002d0:	2800      	cmp	r0, #0
  4002d2:	da1d      	bge.n	400310 <_write+0x94>
  4002d4:	e005      	b.n	4002e2 <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4002d6:	f04f 34ff 	mov.w	r4, #4294967295
  4002da:	e004      	b.n	4002e6 <_write+0x6a>
	}

	for (; len != 0; --len) {
  4002dc:	f04f 0400 	mov.w	r4, #0
  4002e0:	e001      	b.n	4002e6 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4002e2:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002e6:	4620      	mov	r0, r4
  4002e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
  4002ec:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4002f0:	45a0      	cmp	r8, r4
  4002f2:	d0f8      	beq.n	4002e6 <_write+0x6a>
  4002f4:	f1b9 0f00 	cmp.w	r9, #0
  4002f8:	d0de      	beq.n	4002b8 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4002fa:	6830      	ldr	r0, [r6, #0]
  4002fc:	683a      	ldr	r2, [r7, #0]
  4002fe:	5d29      	ldrb	r1, [r5, r4]
  400300:	4790      	blx	r2
  400302:	2800      	cmp	r0, #0
  400304:	dbed      	blt.n	4002e2 <_write+0x66>
			return -1;
		}
		++nChars;
  400306:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40030a:	45a0      	cmp	r8, r4
  40030c:	d1d4      	bne.n	4002b8 <_write+0x3c>
  40030e:	e7ea      	b.n	4002e6 <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
  400310:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400314:	45a0      	cmp	r8, r4
  400316:	d1cf      	bne.n	4002b8 <_write+0x3c>
  400318:	e7e5      	b.n	4002e6 <_write+0x6a>
  40031a:	bf00      	nop

0040031c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  40031c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40031e:	f241 4350 	movw	r3, #5200	; 0x1450
  400322:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400326:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40032a:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40032c:	f04f 000b 	mov.w	r0, #11
  400330:	f640 148d 	movw	r4, #2445	; 0x98d
  400334:	f2c0 0440 	movt	r4, #64	; 0x40
  400338:	47a0      	blx	r4
  40033a:	f04f 000c 	mov.w	r0, #12
  40033e:	47a0      	blx	r4
  400340:	f04f 000d 	mov.w	r0, #13
  400344:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400346:	f04f 0013 	mov.w	r0, #19
  40034a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40034e:	f240 44e9 	movw	r4, #1257	; 0x4e9
  400352:	f2c0 0440 	movt	r4, #64	; 0x40
  400356:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  400358:	f04f 0014 	mov.w	r0, #20
  40035c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400360:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400362:	f04f 0023 	mov.w	r0, #35	; 0x23
  400366:	f04f 0179 	mov.w	r1, #121	; 0x79
  40036a:	f6c2 0100 	movt	r1, #10240	; 0x2800
  40036e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400370:	f04f 004c 	mov.w	r0, #76	; 0x4c
  400374:	f04f 0159 	mov.w	r1, #89	; 0x59
  400378:	f6c2 0100 	movt	r1, #10240	; 0x2800
  40037c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40037e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  400382:	f2c4 000e 	movt	r0, #16398	; 0x400e
  400386:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  40038a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40038e:	f240 6361 	movw	r3, #1633	; 0x661
  400392:	f2c0 0340 	movt	r3, #64	; 0x40
  400396:	4798      	blx	r3
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
#endif

#ifdef CONF_BOARD_PWM_LED0
	/* Configure PWM LED0 pin */
	gpio_configure_pin(PIN_PWM_LED0_GPIO, PIN_PWM_LED0_FLAGS);
  400398:	f04f 0013 	mov.w	r0, #19
  40039c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4003a0:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_PWM_LED1
	/* Configure PWM LED1 pin */
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
  4003a2:	f04f 0014 	mov.w	r0, #20
  4003a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4003aa:	47a0      	blx	r4
  4003ac:	bd10      	pop	{r4, pc}
  4003ae:	bf00      	nop

004003b0 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4003b0:	b10a      	cbz	r2, 4003b6 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  4003b2:	6641      	str	r1, [r0, #100]	; 0x64
  4003b4:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003b6:	6601      	str	r1, [r0, #96]	; 0x60
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop

004003bc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4003bc:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4003be:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP)
	switch (ul_type) {
  4003c0:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4003c4:	d030      	beq.n	400428 <pio_set_peripheral+0x6c>
  4003c6:	d808      	bhi.n	4003da <pio_set_peripheral+0x1e>
  4003c8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4003cc:	d014      	beq.n	4003f8 <pio_set_peripheral+0x3c>
  4003ce:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4003d2:	d01e      	beq.n	400412 <pio_set_peripheral+0x56>
  4003d4:	2900      	cmp	r1, #0
  4003d6:	d03b      	beq.n	400450 <pio_set_peripheral+0x94>
  4003d8:	e039      	b.n	40044e <pio_set_peripheral+0x92>
  4003da:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4003de:	d037      	beq.n	400450 <pio_set_peripheral+0x94>
  4003e0:	d803      	bhi.n	4003ea <pio_set_peripheral+0x2e>
  4003e2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4003e6:	d132      	bne.n	40044e <pio_set_peripheral+0x92>
  4003e8:	e029      	b.n	40043e <pio_set_peripheral+0x82>
  4003ea:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4003ee:	d02f      	beq.n	400450 <pio_set_peripheral+0x94>
  4003f0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4003f4:	d12b      	bne.n	40044e <pio_set_peripheral+0x92>
  4003f6:	e02b      	b.n	400450 <pio_set_peripheral+0x94>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4003f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4003fa:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4003fc:	ea6f 0302 	mvn.w	r3, r2
  400400:	4021      	ands	r1, r4
  400402:	4019      	ands	r1, r3
  400404:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400406:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400408:	6f44      	ldr	r4, [r0, #116]	; 0x74
  40040a:	4021      	ands	r1, r4
  40040c:	400b      	ands	r3, r1
  40040e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400410:	e01d      	b.n	40044e <pio_set_peripheral+0x92>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400412:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400414:	ea42 0103 	orr.w	r1, r2, r3
  400418:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40041a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40041c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40041e:	400b      	ands	r3, r1
  400420:	ea23 0302 	bic.w	r3, r3, r2
  400424:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400426:	e012      	b.n	40044e <pio_set_peripheral+0x92>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400428:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40042a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40042c:	400b      	ands	r3, r1
  40042e:	ea23 0302 	bic.w	r3, r3, r2
  400432:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400434:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400436:	ea42 0103 	orr.w	r1, r2, r3
  40043a:	6741      	str	r1, [r0, #116]	; 0x74
		break;
  40043c:	e007      	b.n	40044e <pio_set_peripheral+0x92>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40043e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400440:	ea42 0103 	orr.w	r1, r2, r3
  400444:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400446:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400448:	ea42 0103 	orr.w	r1, r2, r3
  40044c:	6741      	str	r1, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40044e:	6042      	str	r2, [r0, #4]
}
  400450:	bc10      	pop	{r4}
  400452:	4770      	bx	lr

00400454 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400454:	6441      	str	r1, [r0, #68]	; 0x44
  400456:	4770      	bx	lr

00400458 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40045a:	4604      	mov	r4, r0
  40045c:	460d      	mov	r5, r1
  40045e:	4616      	mov	r6, r2
  400460:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  400462:	f240 4355 	movw	r3, #1109	; 0x455
  400466:	f2c0 0340 	movt	r3, #64	; 0x40
  40046a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40046c:	4620      	mov	r0, r4
  40046e:	4629      	mov	r1, r5
  400470:	9a06      	ldr	r2, [sp, #24]
  400472:	f240 33b1 	movw	r3, #945	; 0x3b1
  400476:	f2c0 0340 	movt	r3, #64	; 0x40
  40047a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40047c:	b10f      	cbz	r7, 400482 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
  40047e:	6525      	str	r5, [r4, #80]	; 0x50
  400480:	e000      	b.n	400484 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400482:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400484:	b10e      	cbz	r6, 40048a <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
  400486:	6325      	str	r5, [r4, #48]	; 0x30
  400488:	e000      	b.n	40048c <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40048a:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40048c:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  40048e:	6025      	str	r5, [r4, #0]
  400490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400492:	bf00      	nop

00400494 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  400494:	b570      	push	{r4, r5, r6, lr}
  400496:	4604      	mov	r4, r0
  400498:	460d      	mov	r5, r1
  40049a:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  40049c:	f240 4355 	movw	r3, #1109	; 0x455
  4004a0:	f2c0 0340 	movt	r3, #64	; 0x40
  4004a4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4004a6:	4620      	mov	r0, r4
  4004a8:	4629      	mov	r1, r5
  4004aa:	f006 0201 	and.w	r2, r6, #1
  4004ae:	f240 33b1 	movw	r3, #945	; 0x3b1
  4004b2:	f2c0 0340 	movt	r3, #64	; 0x40
  4004b6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4004b8:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
  4004bc:	bf14      	ite	ne
  4004be:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4004c0:	6265      	streq	r5, [r4, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4004c2:	f016 0f02 	tst.w	r6, #2
  4004c6:	d002      	beq.n	4004ce <pio_set_input+0x3a>
		p_pio->PIO_IFSCDR = ul_mask;
  4004c8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  4004cc:	e004      	b.n	4004d8 <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4004ce:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_IFSCER = ul_mask;
  4004d2:	bf18      	it	ne
  4004d4:	f8c4 5084 	strne.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4004d8:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  4004da:	6025      	str	r5, [r4, #0]
  4004dc:	bd70      	pop	{r4, r5, r6, pc}
  4004de:	bf00      	nop

004004e0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004e0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4004e2:	4770      	bx	lr

004004e4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4004e4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4004e6:	4770      	bx	lr

004004e8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4004ea:	b083      	sub	sp, #12
  4004ec:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004ee:	ea4f 1650 	mov.w	r6, r0, lsr #5
  4004f2:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
  4004f6:	f201 7207 	addw	r2, r1, #1799	; 0x707
  4004fa:	ea4f 2642 	mov.w	r6, r2, lsl #9
#endif

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  4004fe:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
  400502:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  400506:	d064      	beq.n	4005d2 <pio_configure_pin+0xea>
  400508:	d80a      	bhi.n	400520 <pio_configure_pin+0x38>
  40050a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  40050e:	d02c      	beq.n	40056a <pio_configure_pin+0x82>
  400510:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  400514:	d043      	beq.n	40059e <pio_configure_pin+0xb6>
  400516:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  40051a:	f040 809d 	bne.w	400658 <pio_configure_pin+0x170>
  40051e:	e00a      	b.n	400536 <pio_configure_pin+0x4e>
  400520:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  400524:	d07e      	beq.n	400624 <pio_configure_pin+0x13c>
  400526:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  40052a:	d07b      	beq.n	400624 <pio_configure_pin+0x13c>
  40052c:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  400530:	f040 8092 	bne.w	400658 <pio_configure_pin+0x170>
  400534:	e067      	b.n	400606 <pio_configure_pin+0x11e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400536:	f000 031f 	and.w	r3, r0, #31
  40053a:	f04f 0401 	mov.w	r4, #1
  40053e:	fa04 f703 	lsl.w	r7, r4, r3
  400542:	4630      	mov	r0, r6
  400544:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400548:	463a      	mov	r2, r7
  40054a:	f240 33bd 	movw	r3, #957	; 0x3bd
  40054e:	f2c0 0340 	movt	r3, #64	; 0x40
  400552:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400554:	4630      	mov	r0, r6
  400556:	4639      	mov	r1, r7
  400558:	ea05 0204 	and.w	r2, r5, r4
  40055c:	f240 33b1 	movw	r3, #945	; 0x3b1
  400560:	f2c0 0340 	movt	r3, #64	; 0x40
  400564:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400566:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  400568:	e078      	b.n	40065c <pio_configure_pin+0x174>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40056a:	f000 071f 	and.w	r7, r0, #31
  40056e:	f04f 0401 	mov.w	r4, #1
  400572:	fa04 f707 	lsl.w	r7, r4, r7
  400576:	4630      	mov	r0, r6
  400578:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40057c:	463a      	mov	r2, r7
  40057e:	f240 33bd 	movw	r3, #957	; 0x3bd
  400582:	f2c0 0340 	movt	r3, #64	; 0x40
  400586:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  400588:	4630      	mov	r0, r6
  40058a:	4639      	mov	r1, r7
  40058c:	ea05 0204 	and.w	r2, r5, r4
  400590:	f240 33b1 	movw	r3, #945	; 0x3b1
  400594:	f2c0 0340 	movt	r3, #64	; 0x40
  400598:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  40059a:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  40059c:	e05e      	b.n	40065c <pio_configure_pin+0x174>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40059e:	f000 001f 	and.w	r0, r0, #31
  4005a2:	f04f 0401 	mov.w	r4, #1
  4005a6:	fa04 f700 	lsl.w	r7, r4, r0
  4005aa:	4630      	mov	r0, r6
  4005ac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005b0:	463a      	mov	r2, r7
  4005b2:	f240 33bd 	movw	r3, #957	; 0x3bd
  4005b6:	f2c0 0340 	movt	r3, #64	; 0x40
  4005ba:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4005bc:	4630      	mov	r0, r6
  4005be:	4639      	mov	r1, r7
  4005c0:	ea05 0204 	and.w	r2, r5, r4
  4005c4:	f240 33b1 	movw	r3, #945	; 0x3b1
  4005c8:	f2c0 0340 	movt	r3, #64	; 0x40
  4005cc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005ce:	4620      	mov	r0, r4
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  4005d0:	e044      	b.n	40065c <pio_configure_pin+0x174>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4005d2:	f000 021f 	and.w	r2, r0, #31
  4005d6:	f04f 0401 	mov.w	r4, #1
  4005da:	fa04 f702 	lsl.w	r7, r4, r2
  4005de:	4630      	mov	r0, r6
  4005e0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005e4:	463a      	mov	r2, r7
  4005e6:	f240 33bd 	movw	r3, #957	; 0x3bd
  4005ea:	f2c0 0340 	movt	r3, #64	; 0x40
  4005ee:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4005f0:	4630      	mov	r0, r6
  4005f2:	4639      	mov	r1, r7
  4005f4:	ea05 0204 	and.w	r2, r5, r4
  4005f8:	f240 33b1 	movw	r3, #945	; 0x3b1
  4005fc:	f2c0 0340 	movt	r3, #64	; 0x40
  400600:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400602:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  400604:	e02a      	b.n	40065c <pio_configure_pin+0x174>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400606:	f000 011f 	and.w	r1, r0, #31
  40060a:	f04f 0401 	mov.w	r4, #1
  40060e:	4630      	mov	r0, r6
  400610:	fa04 f101 	lsl.w	r1, r4, r1
  400614:	462a      	mov	r2, r5
  400616:	f240 4395 	movw	r3, #1173	; 0x495
  40061a:	f2c0 0340 	movt	r3, #64	; 0x40
  40061e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400620:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400622:	e01b      	b.n	40065c <pio_configure_pin+0x174>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400624:	f000 031f 	and.w	r3, r0, #31
  400628:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40062c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400630:	ea05 0004 	and.w	r0, r5, r4
  400634:	9000      	str	r0, [sp, #0]
  400636:	4630      	mov	r0, r6
  400638:	fa04 f103 	lsl.w	r1, r4, r3
  40063c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400640:	bf14      	ite	ne
  400642:	2200      	movne	r2, #0
  400644:	2201      	moveq	r2, #1
  400646:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40064a:	f240 4559 	movw	r5, #1113	; 0x459
  40064e:	f2c0 0540 	movt	r5, #64	; 0x40
  400652:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  400654:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400656:	e001      	b.n	40065c <pio_configure_pin+0x174>

	default:
		return 0;
  400658:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
  40065c:	b003      	add	sp, #12
  40065e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00400660 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400660:	b5f0      	push	{r4, r5, r6, r7, lr}
  400662:	b083      	sub	sp, #12
  400664:	4607      	mov	r7, r0
  400666:	460e      	mov	r6, r1
  400668:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40066a:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  40066e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  400672:	d050      	beq.n	400716 <pio_configure_pin_group+0xb6>
  400674:	d809      	bhi.n	40068a <pio_configure_pin_group+0x2a>
  400676:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  40067a:	d024      	beq.n	4006c6 <pio_configure_pin_group+0x66>
  40067c:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  400680:	d035      	beq.n	4006ee <pio_configure_pin_group+0x8e>
  400682:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  400686:	d178      	bne.n	40077a <pio_configure_pin_group+0x11a>
  400688:	e009      	b.n	40069e <pio_configure_pin_group+0x3e>
  40068a:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  40068e:	d05e      	beq.n	40074e <pio_configure_pin_group+0xee>
  400690:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  400694:	d05b      	beq.n	40074e <pio_configure_pin_group+0xee>
  400696:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  40069a:	d16e      	bne.n	40077a <pio_configure_pin_group+0x11a>
  40069c:	e04f      	b.n	40073e <pio_configure_pin_group+0xde>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40069e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4006a2:	4632      	mov	r2, r6
  4006a4:	f240 33bd 	movw	r3, #957	; 0x3bd
  4006a8:	f2c0 0340 	movt	r3, #64	; 0x40
  4006ac:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4006ae:	4638      	mov	r0, r7
  4006b0:	4631      	mov	r1, r6
  4006b2:	f005 0201 	and.w	r2, r5, #1
  4006b6:	f240 33b1 	movw	r3, #945	; 0x3b1
  4006ba:	f2c0 0340 	movt	r3, #64	; 0x40
  4006be:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4006c0:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
  4006c4:	e05b      	b.n	40077e <pio_configure_pin_group+0x11e>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4006c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4006ca:	4632      	mov	r2, r6
  4006cc:	f240 33bd 	movw	r3, #957	; 0x3bd
  4006d0:	f2c0 0340 	movt	r3, #64	; 0x40
  4006d4:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4006d6:	4638      	mov	r0, r7
  4006d8:	4631      	mov	r1, r6
  4006da:	f005 0201 	and.w	r2, r5, #1
  4006de:	f240 33b1 	movw	r3, #945	; 0x3b1
  4006e2:	f2c0 0340 	movt	r3, #64	; 0x40
  4006e6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4006e8:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
  4006ec:	e047      	b.n	40077e <pio_configure_pin_group+0x11e>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4006ee:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4006f2:	4632      	mov	r2, r6
  4006f4:	f240 33bd 	movw	r3, #957	; 0x3bd
  4006f8:	f2c0 0340 	movt	r3, #64	; 0x40
  4006fc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  4006fe:	4638      	mov	r0, r7
  400700:	4631      	mov	r1, r6
  400702:	f005 0201 	and.w	r2, r5, #1
  400706:	f240 33b1 	movw	r3, #945	; 0x3b1
  40070a:	f2c0 0340 	movt	r3, #64	; 0x40
  40070e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400710:	f04f 0001 	mov.w	r0, #1
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
  400714:	e033      	b.n	40077e <pio_configure_pin_group+0x11e>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400716:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40071a:	4632      	mov	r2, r6
  40071c:	f240 33bd 	movw	r3, #957	; 0x3bd
  400720:	f2c0 0340 	movt	r3, #64	; 0x40
  400724:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  400726:	4638      	mov	r0, r7
  400728:	4631      	mov	r1, r6
  40072a:	f005 0201 	and.w	r2, r5, #1
  40072e:	f240 33b1 	movw	r3, #945	; 0x3b1
  400732:	f2c0 0340 	movt	r3, #64	; 0x40
  400736:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400738:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
  40073c:	e01f      	b.n	40077e <pio_configure_pin_group+0x11e>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  40073e:	f240 4395 	movw	r3, #1173	; 0x495
  400742:	f2c0 0340 	movt	r3, #64	; 0x40
  400746:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400748:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  40074c:	e017      	b.n	40077e <pio_configure_pin_group+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40074e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400752:	f005 0001 	and.w	r0, r5, #1
  400756:	9000      	str	r0, [sp, #0]
  400758:	4638      	mov	r0, r7
  40075a:	4631      	mov	r1, r6
  40075c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400760:	bf14      	ite	ne
  400762:	2200      	movne	r2, #0
  400764:	2201      	moveq	r2, #1
  400766:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40076a:	f240 4459 	movw	r4, #1113	; 0x459
  40076e:	f2c0 0440 	movt	r4, #64	; 0x40
  400772:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400774:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400778:	e001      	b.n	40077e <pio_configure_pin_group+0x11e>

	default:
		return 0;
  40077a:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
  40077e:	b003      	add	sp, #12
  400780:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400782:	bf00      	nop

00400784 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400788:	4680      	mov	r8, r0
  40078a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40078c:	f240 43e1 	movw	r3, #1249	; 0x4e1
  400790:	f2c0 0340 	movt	r3, #64	; 0x40
  400794:	4798      	blx	r3
  400796:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400798:	4640      	mov	r0, r8
  40079a:	f240 41e5 	movw	r1, #1253	; 0x4e5
  40079e:	f2c0 0140 	movt	r1, #64	; 0x40
  4007a2:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
  4007a4:	4005      	ands	r5, r0
  4007a6:	d014      	beq.n	4007d2 <pio_handler_process+0x4e>
  4007a8:	4c12      	ldr	r4, [pc, #72]	; (4007f4 <pio_handler_process+0x70>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
  4007aa:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4007ac:	f854 0c0c 	ldr.w	r0, [r4, #-12]
  4007b0:	42b0      	cmp	r0, r6
  4007b2:	d10a      	bne.n	4007ca <pio_handler_process+0x46>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4007b4:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4007b8:	4229      	tst	r1, r5
  4007ba:	d006      	beq.n	4007ca <pio_handler_process+0x46>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007bc:	6822      	ldr	r2, [r4, #0]
  4007be:	4630      	mov	r0, r6
  4007c0:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4007c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4007c6:	ea25 0503 	bic.w	r5, r5, r3
  4007ca:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4007ce:	2d00      	cmp	r5, #0
  4007d0:	d1eb      	bne.n	4007aa <pio_handler_process+0x26>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4007d2:	f640 1124 	movw	r1, #2340	; 0x924
  4007d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4007da:	6808      	ldr	r0, [r1, #0]
  4007dc:	b138      	cbz	r0, 4007ee <pio_handler_process+0x6a>
		if (pio_capture_handler) {
  4007de:	f640 0264 	movw	r2, #2148	; 0x864
  4007e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4007e6:	6813      	ldr	r3, [r2, #0]
  4007e8:	b10b      	cbz	r3, 4007ee <pio_handler_process+0x6a>
			pio_capture_handler(p_pio);
  4007ea:	4640      	mov	r0, r8
  4007ec:	4798      	blx	r3
  4007ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007f2:	bf00      	nop
  4007f4:	20000874 	.word	0x20000874

004007f8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4007fa:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  4007fe:	f2c4 000e 	movt	r0, #16398	; 0x400e
  400802:	f04f 010b 	mov.w	r1, #11
  400806:	f240 7385 	movw	r3, #1925	; 0x785
  40080a:	f2c0 0340 	movt	r3, #64	; 0x40
  40080e:	4798      	blx	r3
  400810:	bd08      	pop	{r3, pc}
  400812:	bf00      	nop

00400814 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400814:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400816:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40081a:	f2c4 000e 	movt	r0, #16398	; 0x400e
  40081e:	f04f 010c 	mov.w	r1, #12
  400822:	f240 7385 	movw	r3, #1925	; 0x785
  400826:	f2c0 0340 	movt	r3, #64	; 0x40
  40082a:	4798      	blx	r3
  40082c:	bd08      	pop	{r3, pc}
  40082e:	bf00      	nop

00400830 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400830:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400832:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  400836:	f2c4 000e 	movt	r0, #16398	; 0x400e
  40083a:	f04f 010d 	mov.w	r1, #13
  40083e:	f240 7385 	movw	r3, #1925	; 0x785
  400842:	f2c0 0340 	movt	r3, #64	; 0x40
  400846:	4798      	blx	r3
  400848:	bd08      	pop	{r3, pc}
  40084a:	bf00      	nop

0040084c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400850:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400856:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  40085a:	4308      	orrs	r0, r1
  40085c:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40085e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400860:	f010 0f08 	tst.w	r0, #8
  400864:	d007      	beq.n	400876 <pmc_switch_mck_to_pllack+0x2a>
  400866:	e010      	b.n	40088a <pmc_switch_mck_to_pllack+0x3e>
  400868:	f100 33ff 	add.w	r3, r0, #4294967295
  40086c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40086e:	f010 0f08 	tst.w	r0, #8
  400872:	d038      	beq.n	4008e6 <pmc_switch_mck_to_pllack+0x9a>
  400874:	e009      	b.n	40088a <pmc_switch_mck_to_pllack+0x3e>
  400876:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40087a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40087e:	f2c4 020e 	movt	r2, #16398	; 0x400e
  400882:	6e91      	ldr	r1, [r2, #104]	; 0x68
  400884:	f011 0f08 	tst.w	r1, #8
  400888:	d0ee      	beq.n	400868 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40088e:	f2c4 010e 	movt	r1, #16398	; 0x400e
  400892:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400894:	f022 0303 	bic.w	r3, r2, #3
  400898:	f043 0002 	orr.w	r0, r3, #2
  40089c:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40089e:	6e89      	ldr	r1, [r1, #104]	; 0x68
  4008a0:	f011 0f08 	tst.w	r1, #8
  4008a4:	d009      	beq.n	4008ba <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4008a6:	f04f 0000 	mov.w	r0, #0
  4008aa:	4770      	bx	lr
  4008ac:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008b0:	6e91      	ldr	r1, [r2, #104]	; 0x68
  4008b2:	f011 0f08 	tst.w	r1, #8
  4008b6:	d013      	beq.n	4008e0 <pmc_switch_mck_to_pllack+0x94>
  4008b8:	e009      	b.n	4008ce <pmc_switch_mck_to_pllack+0x82>
  4008ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008be:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4008c2:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4008c6:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4008c8:	f010 0f08 	tst.w	r0, #8
  4008cc:	d0ee      	beq.n	4008ac <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4008ce:	f04f 0000 	mov.w	r0, #0
  4008d2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4008d4:	f04f 0001 	mov.w	r0, #1
  4008d8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4008da:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
  4008de:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008e0:	3b01      	subs	r3, #1
  4008e2:	d1f0      	bne.n	4008c6 <pmc_switch_mck_to_pllack+0x7a>
  4008e4:	e7f9      	b.n	4008da <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008e6:	1e58      	subs	r0, r3, #1
  4008e8:	d1cb      	bne.n	400882 <pmc_switch_mck_to_pllack+0x36>
  4008ea:	e7f3      	b.n	4008d4 <pmc_switch_mck_to_pllack+0x88>

004008ec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4008ec:	b188      	cbz	r0, 400912 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4008f2:	f2c4 010e 	movt	r1, #16398	; 0x400e
  4008f6:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008f8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  4008fc:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
  400900:	4002      	ands	r2, r0
  400902:	f04f 0302 	mov.w	r3, #2
  400906:	f2c0 1337 	movt	r3, #311	; 0x137
  40090a:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40090e:	6208      	str	r0, [r1, #32]
  400910:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400912:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400916:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40091a:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40091c:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
  400920:	f020 0203 	bic.w	r2, r0, #3
  400924:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
  400928:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40092c:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400930:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400934:	6218      	str	r0, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400936:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40093a:	f2c4 020e 	movt	r2, #16398	; 0x400e
  40093e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400940:	f013 0f01 	tst.w	r3, #1
  400944:	d0fb      	beq.n	40093e <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400946:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40094a:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40094e:	6a08      	ldr	r0, [r1, #32]
  400950:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
  400954:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
  400958:	620b      	str	r3, [r1, #32]
  40095a:	4770      	bx	lr

0040095c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400960:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400964:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400966:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40096a:	4770      	bx	lr

0040096c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40096c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400970:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400974:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400978:	629a      	str	r2, [r3, #40]	; 0x28
  40097a:	4770      	bx	lr

0040097c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400980:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400984:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400986:	f000 0002 	and.w	r0, r0, #2
  40098a:	4770      	bx	lr

0040098c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40098c:	2822      	cmp	r0, #34	; 0x22
  40098e:	d835      	bhi.n	4009fc <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
  400990:	281f      	cmp	r0, #31
  400992:	d817      	bhi.n	4009c4 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400994:	f44f 6180 	mov.w	r1, #1024	; 0x400
  400998:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40099c:	698a      	ldr	r2, [r1, #24]
  40099e:	f04f 0301 	mov.w	r3, #1
  4009a2:	fa03 f300 	lsl.w	r3, r3, r0
  4009a6:	401a      	ands	r2, r3
  4009a8:	4293      	cmp	r3, r2
  4009aa:	d02a      	beq.n	400a02 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
  4009ac:	f04f 0101 	mov.w	r1, #1
  4009b0:	fa01 f000 	lsl.w	r0, r1, r0
  4009b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4009b8:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4009bc:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4009be:	f04f 0000 	mov.w	r0, #0
  4009c2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4009c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4009c8:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4009cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CP)
	} else {
		ul_id -= 32;
  4009d0:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4009d4:	f04f 0101 	mov.w	r1, #1
  4009d8:	fa01 f100 	lsl.w	r1, r1, r0
  4009dc:	400a      	ands	r2, r1
  4009de:	4291      	cmp	r1, r2
  4009e0:	d012      	beq.n	400a08 <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
  4009e2:	f04f 0301 	mov.w	r3, #1
  4009e6:	fa03 f000 	lsl.w	r0, r3, r0
  4009ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4009ee:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4009f2:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4009f6:	f04f 0000 	mov.w	r0, #0
  4009fa:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4009fc:	f04f 0001 	mov.w	r0, #1
  400a00:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400a02:	f04f 0000 	mov.w	r0, #0
  400a06:	4770      	bx	lr
  400a08:	f04f 0000 	mov.w	r0, #0
}
  400a0c:	4770      	bx	lr
  400a0e:	bf00      	nop

00400a10 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400a10:	b4f0      	push	{r4, r5, r6, r7}
  400a12:	b08c      	sub	sp, #48	; 0x30
  400a14:	4606      	mov	r6, r0
  400a16:	460f      	mov	r7, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  400a18:	ac01      	add	r4, sp, #4
  400a1a:	f642 35ec 	movw	r5, #11244	; 0x2bec
  400a1e:	f2c0 0540 	movt	r5, #64	; 0x40
  400a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400a2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400a32:	9b01      	ldr	r3, [sp, #4]
  400a34:	fbb7 f0f3 	udiv	r0, r7, r3
  400a38:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400a3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400a40:	d952      	bls.n	400ae8 <pwm_clocks_generate+0xd8>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400a42:	9902      	ldr	r1, [sp, #8]
  400a44:	fbb7 f2f1 	udiv	r2, r7, r1
  400a48:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400a4c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400a50:	d94d      	bls.n	400aee <pwm_clocks_generate+0xde>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400a52:	9b03      	ldr	r3, [sp, #12]
  400a54:	fbb7 f0f3 	udiv	r0, r7, r3
  400a58:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400a5c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400a60:	d948      	bls.n	400af4 <pwm_clocks_generate+0xe4>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400a62:	9904      	ldr	r1, [sp, #16]
  400a64:	fbb7 f2f1 	udiv	r2, r7, r1
  400a68:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400a6c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400a70:	d943      	bls.n	400afa <pwm_clocks_generate+0xea>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400a72:	9b05      	ldr	r3, [sp, #20]
  400a74:	fbb7 f0f3 	udiv	r0, r7, r3
  400a78:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400a7c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400a80:	d93e      	bls.n	400b00 <pwm_clocks_generate+0xf0>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400a82:	9906      	ldr	r1, [sp, #24]
  400a84:	fbb7 f2f1 	udiv	r2, r7, r1
  400a88:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400a8c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400a90:	d939      	bls.n	400b06 <pwm_clocks_generate+0xf6>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400a92:	9b07      	ldr	r3, [sp, #28]
  400a94:	fbb7 f0f3 	udiv	r0, r7, r3
  400a98:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400a9c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400aa0:	d934      	bls.n	400b0c <pwm_clocks_generate+0xfc>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400aa2:	9908      	ldr	r1, [sp, #32]
  400aa4:	fbb7 f2f1 	udiv	r2, r7, r1
  400aa8:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400aac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400ab0:	d92f      	bls.n	400b12 <pwm_clocks_generate+0x102>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  400ab4:	fbb7 f0f3 	udiv	r0, r7, r3
  400ab8:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400abc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400ac0:	d92a      	bls.n	400b18 <pwm_clocks_generate+0x108>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
  400ac4:	fbb7 f2f1 	udiv	r2, r7, r1
  400ac8:	fbb2 f1f6 	udiv	r1, r2, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400acc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400ad0:	d925      	bls.n	400b1e <pwm_clocks_generate+0x10e>
	uint32_t ul_pre = 0;
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  400ad4:	fbb7 f0f3 	udiv	r0, r7, r3
  400ad8:	fbb0 f1f6 	udiv	r1, r0, r6
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400adc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  400ae0:	d920      	bls.n	400b24 <pwm_clocks_generate+0x114>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  400ae2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  400ae6:	e021      	b.n	400b2c <pwm_clocks_generate+0x11c>
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  400ae8:	f04f 0200 	mov.w	r2, #0
  400aec:	e01c      	b.n	400b28 <pwm_clocks_generate+0x118>
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
			break;
		}
		ul_pre++;
  400aee:	f04f 0201 	mov.w	r2, #1
  400af2:	e019      	b.n	400b28 <pwm_clocks_generate+0x118>
  400af4:	f04f 0202 	mov.w	r2, #2
  400af8:	e016      	b.n	400b28 <pwm_clocks_generate+0x118>
  400afa:	f04f 0203 	mov.w	r2, #3
  400afe:	e013      	b.n	400b28 <pwm_clocks_generate+0x118>
  400b00:	f04f 0204 	mov.w	r2, #4
  400b04:	e010      	b.n	400b28 <pwm_clocks_generate+0x118>
  400b06:	f04f 0205 	mov.w	r2, #5
  400b0a:	e00d      	b.n	400b28 <pwm_clocks_generate+0x118>
  400b0c:	f04f 0206 	mov.w	r2, #6
  400b10:	e00a      	b.n	400b28 <pwm_clocks_generate+0x118>
  400b12:	f04f 0207 	mov.w	r2, #7
  400b16:	e007      	b.n	400b28 <pwm_clocks_generate+0x118>
  400b18:	f04f 0208 	mov.w	r2, #8
  400b1c:	e004      	b.n	400b28 <pwm_clocks_generate+0x118>
  400b1e:	f04f 0209 	mov.w	r2, #9
  400b22:	e001      	b.n	400b28 <pwm_clocks_generate+0x118>
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400b24:	f04f 020a 	mov.w	r2, #10
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
  400b28:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
	}
}
  400b2c:	b00c      	add	sp, #48	; 0x30
  400b2e:	bcf0      	pop	{r4, r5, r6, r7}
  400b30:	4770      	bx	lr
  400b32:	bf00      	nop

00400b34 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  400b34:	b570      	push	{r4, r5, r6, lr}
  400b36:	4606      	mov	r6, r0
  400b38:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  400b3a:	6808      	ldr	r0, [r1, #0]
  400b3c:	b158      	cbz	r0, 400b56 <pwm_init+0x22>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  400b3e:	6889      	ldr	r1, [r1, #8]
  400b40:	f640 2311 	movw	r3, #2577	; 0xa11
  400b44:	f2c0 0340 	movt	r3, #64	; 0x40
  400b48:	4798      	blx	r3
		if (result == PWM_INVALID_ARGUMENT) {
  400b4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  400b4e:	4288      	cmp	r0, r1
  400b50:	d014      	beq.n	400b7c <pwm_init+0x48>
			return result;
		}

		clock = result;
  400b52:	4605      	mov	r5, r0
  400b54:	e001      	b.n	400b5a <pwm_init+0x26>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  400b56:	f04f 0500 	mov.w	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400b5a:	6860      	ldr	r0, [r4, #4]
  400b5c:	b158      	cbz	r0, 400b76 <pwm_init+0x42>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400b5e:	68a1      	ldr	r1, [r4, #8]
  400b60:	f640 2211 	movw	r2, #2577	; 0xa11
  400b64:	f2c0 0240 	movt	r2, #64	; 0x40
  400b68:	4790      	blx	r2

		if (result == PWM_INVALID_ARGUMENT) {
  400b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400b6e:	4298      	cmp	r0, r3
  400b70:	d004      	beq.n	400b7c <pwm_init+0x48>
			return result;
		}

		clock |= (result << 16);
  400b72:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400b76:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  400b78:	f04f 0000 	mov.w	r0, #0
}
  400b7c:	bd70      	pop	{r4, r5, r6, pc}
  400b7e:	bf00      	nop

00400b80 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400b80:	b430      	push	{r4, r5}
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;
  400b82:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
  400b84:	8a8d      	ldrh	r5, [r1, #20]
{
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
  400b86:	684a      	ldr	r2, [r1, #4]
  400b88:	f002 040f 	and.w	r4, r2, #15
  400b8c:	4325      	orrs	r5, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
  400b8e:	890a      	ldrh	r2, [r1, #8]
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
  400b90:	4315      	orrs	r5, r2
  400b92:	7a8c      	ldrb	r4, [r1, #10]
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
			(p_channel->counter_event) |
  400b94:	ea45 2544 	orr.w	r5, r5, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  400b98:	7d8a      	ldrb	r2, [r1, #22]
  400b9a:	ea45 4402 	orr.w	r4, r5, r2, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  400b9e:	7dcd      	ldrb	r5, [r1, #23]
  400ba0:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  400ba4:	7e0a      	ldrb	r2, [r1, #24]
{
	uint32_t ch_mode_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	ch_mode_reg = (p_channel->ul_prescaler & 0xF) |
  400ba6:	ea44 4582 	orr.w	r5, r4, r2, lsl #18
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = ch_mode_reg;
  400baa:	f103 0410 	add.w	r4, r3, #16
  400bae:	ea4f 1244 	mov.w	r2, r4, lsl #5
  400bb2:	1884      	adds	r4, r0, r2
  400bb4:	5085      	str	r5, [r0, r2]

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  400bb6:	68ca      	ldr	r2, [r1, #12]
  400bb8:	6062      	str	r2, [r4, #4]

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  400bba:	690a      	ldr	r2, [r1, #16]
  400bbc:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  400bc0:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  400bc4:	7d8a      	ldrb	r2, [r1, #22]
  400bc6:	b13a      	cbz	r2, 400bd8 <pwm_channel_init+0x58>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  400bc8:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  400bca:	8b4a      	ldrh	r2, [r1, #26]
  400bcc:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  400bd0:	eb00 1243 	add.w	r2, r0, r3, lsl #5
  400bd4:	f8c2 4218 	str.w	r4, [r2, #536]	; 0x218
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
  400bd8:	7fcc      	ldrb	r4, [r1, #31]
  400bda:	fa04 f403 	lsl.w	r4, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
					b_override_pwmh) << ch_num) |
  400bde:	7f8a      	ldrb	r2, [r1, #30]
  400be0:	fa02 f203 	lsl.w	r2, r2, r3
  400be4:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	p_pwm->PWM_OS = ((p_channel->output_selection.
  400be8:	6484      	str	r4, [r0, #72]	; 0x48
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
  400bea:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  400bee:	fa04 f403 	lsl.w	r4, r4, r3
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
					override_level_pwmh) << ch_num) |
  400bf2:	f891 2020 	ldrb.w	r2, [r1, #32]
  400bf6:	fa02 f203 	lsl.w	r2, r2, r3
  400bfa:	ea42 4404 	orr.w	r4, r2, r4, lsl #16
					b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) <<
					ch_num) << 16);

	/* Output Override Value Register */
	p_pwm->PWM_OOV = ((p_channel->output_selection.
  400bfe:	6444      	str	r4, [r0, #68]	; 0x44
					override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) <<
					ch_num) << 16);

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  400c00:	f04f 0201 	mov.w	r2, #1
  400c04:	fa02 f203 	lsl.w	r2, r2, r3
	if (p_channel->b_sync_ch) {
  400c08:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  400c0c:	b11c      	cbz	r4, 400c16 <pwm_channel_init+0x96>
		p_pwm->PWM_SCM |= channel;
  400c0e:	6a04      	ldr	r4, [r0, #32]
  400c10:	4314      	orrs	r4, r2
  400c12:	6204      	str	r4, [r0, #32]
  400c14:	e003      	b.n	400c1e <pwm_channel_init+0x9e>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  400c16:	6a04      	ldr	r4, [r0, #32]
  400c18:	ea24 0402 	bic.w	r4, r4, r2
  400c1c:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV1 &= (!((0x01 << ch_num) << 16));
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  400c1e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  400c22:	2c01      	cmp	r4, #1
  400c24:	d103      	bne.n	400c2e <pwm_channel_init+0xae>
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  400c26:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400c28:	4314      	orrs	r4, r2
  400c2a:	6684      	str	r4, [r0, #104]	; 0x68
  400c2c:	e006      	b.n	400c3c <pwm_channel_init+0xbc>
	} else {
		p_pwm->PWM_FPV &= (!(0x01 << ch_num));
  400c2e:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400c30:	2a00      	cmp	r2, #0
  400c32:	bf14      	ite	ne
  400c34:	2400      	movne	r4, #0
  400c36:	f004 0401 	andeq.w	r4, r4, #1
  400c3a:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  400c3c:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400c40:	2c01      	cmp	r4, #1
  400c42:	d104      	bne.n	400c4e <pwm_channel_init+0xce>
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  400c44:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400c46:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  400c4a:	6682      	str	r2, [r0, #104]	; 0x68
  400c4c:	e006      	b.n	400c5c <pwm_channel_init+0xdc>
	} else {
		p_pwm->PWM_FPV &= (!((0x01 << ch_num) << 16));
  400c4e:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400c50:	0412      	lsls	r2, r2, #16
  400c52:	bf14      	ite	ne
  400c54:	2200      	movne	r2, #0
  400c56:	f004 0201 	andeq.w	r2, r4, #1
  400c5a:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E)
	ch_num *= 8;
	fault_enable_reg = p_pwm->PWM_FPE;
  400c5c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E)
	ch_num *= 8;
  400c5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
	fault_enable_reg = p_pwm->PWM_FPE;
	fault_enable_reg &= ~(0xFF << ch_num);
  400c62:	f04f 02ff 	mov.w	r2, #255	; 0xff
  400c66:	fa02 f203 	lsl.w	r2, r2, r3
  400c6a:	ea24 0202 	bic.w	r2, r4, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  400c6e:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
  400c72:	fa01 f303 	lsl.w	r3, r1, r3
  400c76:	431a      	orrs	r2, r3
	p_pwm->PWM_FPE = fault_enable_reg;
  400c78:	66c2      	str	r2, [r0, #108]	; 0x6c
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#endif

	return 0;
}
  400c7a:	f04f 0000 	mov.w	r0, #0
  400c7e:	bc30      	pop	{r4, r5}
  400c80:	4770      	bx	lr
  400c82:	bf00      	nop

00400c84 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
  400c84:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
  400c86:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400c88:	690b      	ldr	r3, [r1, #16]
  400c8a:	4293      	cmp	r3, r2
  400c8c:	d307      	bcc.n	400c9e <pwm_channel_update_duty+0x1a>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
  400c8e:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  400c90:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  400c94:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
  400c98:	f04f 0000 	mov.w	r0, #0
  400c9c:	e001      	b.n	400ca2 <pwm_channel_update_duty+0x1e>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
  400c9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  400ca2:	bc10      	pop	{r4}
  400ca4:	4770      	bx	lr
  400ca6:	bf00      	nop

00400ca8 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  400ca8:	f04f 0301 	mov.w	r3, #1
  400cac:	fa03 f101 	lsl.w	r1, r3, r1
  400cb0:	6041      	str	r1, [r0, #4]
  400cb2:	4770      	bx	lr

00400cb4 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  400cb4:	f04f 0301 	mov.w	r3, #1
  400cb8:	fa03 f101 	lsl.w	r1, r3, r1
  400cbc:	6081      	str	r1, [r0, #8]
  400cbe:	4770      	bx	lr

00400cc0 <pwm_channel_get_interrupt_status>:
uint32_t pwm_channel_get_interrupt_status(Pwm *p_pwm)
{
#if (SAM3N || SAM4N || SAM4C || SAM4CP)
	return p_pwm->PWM_ISR;
#else
	return p_pwm->PWM_ISR1;
  400cc0:	69c0      	ldr	r0, [r0, #28]
#endif
}
  400cc2:	4770      	bx	lr

00400cc4 <pwm_channel_enable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP)
	p_pwm->PWM_IER = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IER1 = (1 << ul_event) | (1 << (ul_fault + 16));
  400cc4:	f102 0210 	add.w	r2, r2, #16
  400cc8:	f04f 0301 	mov.w	r3, #1
  400ccc:	fa03 f202 	lsl.w	r2, r3, r2
  400cd0:	fa03 f101 	lsl.w	r1, r3, r1
  400cd4:	430a      	orrs	r2, r1
  400cd6:	6102      	str	r2, [r0, #16]
  400cd8:	4770      	bx	lr
  400cda:	bf00      	nop

00400cdc <pwm_channel_disable_interrupt>:
#if (SAM3N || SAM4N || SAM4C || SAM4CP)
	p_pwm->PWM_IDR = (1 << ul_event);
	/* avoid Cppcheck Warning */
	UNUSED(ul_fault);
#else
	p_pwm->PWM_IDR1 = (1 << ul_event) | (1 << (ul_fault + 16));
  400cdc:	f102 0210 	add.w	r2, r2, #16
  400ce0:	f04f 0301 	mov.w	r3, #1
  400ce4:	fa03 f202 	lsl.w	r2, r3, r2
  400ce8:	fa03 f101 	lsl.w	r1, r3, r1
  400cec:	430a      	orrs	r2, r1
  400cee:	6142      	str	r2, [r0, #20]
  400cf0:	4770      	bx	lr
  400cf2:	bf00      	nop

00400cf4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400cf4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400cf6:	f04f 03ac 	mov.w	r3, #172	; 0xac
  400cfa:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400cfc:	680a      	ldr	r2, [r1, #0]
  400cfe:	684c      	ldr	r4, [r1, #4]
  400d00:	fbb2 f3f4 	udiv	r3, r2, r4
  400d04:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400d08:	f103 34ff 	add.w	r4, r3, #4294967295
  400d0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400d10:	4294      	cmp	r4, r2
  400d12:	d80c      	bhi.n	400d2e <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
  400d14:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400d16:	6889      	ldr	r1, [r1, #8]
  400d18:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400d1a:	f240 2302 	movw	r3, #514	; 0x202
  400d1e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400d22:	f04f 0250 	mov.w	r2, #80	; 0x50
  400d26:	6002      	str	r2, [r0, #0]

	return 0;
  400d28:	f04f 0000 	mov.w	r0, #0
  400d2c:	e001      	b.n	400d32 <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400d2e:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400d32:	bc10      	pop	{r4}
  400d34:	4770      	bx	lr
  400d36:	bf00      	nop

00400d38 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400d38:	6943      	ldr	r3, [r0, #20]
  400d3a:	f013 0f02 	tst.w	r3, #2
  400d3e:	d003      	beq.n	400d48 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400d40:	61c1      	str	r1, [r0, #28]
	return 0;
  400d42:	f04f 0000 	mov.w	r0, #0
  400d46:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400d48:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400d4c:	4770      	bx	lr
  400d4e:	bf00      	nop

00400d50 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400d50:	6943      	ldr	r3, [r0, #20]
  400d52:	f013 0f01 	tst.w	r3, #1
  400d56:	d004      	beq.n	400d62 <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400d58:	6980      	ldr	r0, [r0, #24]
  400d5a:	7008      	strb	r0, [r1, #0]
	return 0;
  400d5c:	f04f 0000 	mov.w	r0, #0
  400d60:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400d62:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400d66:	4770      	bx	lr

00400d68 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400d68:	6943      	ldr	r3, [r0, #20]
  400d6a:	f013 0f02 	tst.w	r3, #2
  400d6e:	d007      	beq.n	400d80 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400d70:	ea4f 51c1 	mov.w	r1, r1, lsl #23
  400d74:	ea4f 52d1 	mov.w	r2, r1, lsr #23
  400d78:	61c2      	str	r2, [r0, #28]
	return 0;
  400d7a:	f04f 0000 	mov.w	r0, #0
  400d7e:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400d80:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400d84:	4770      	bx	lr
  400d86:	bf00      	nop

00400d88 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400d88:	6943      	ldr	r3, [r0, #20]
  400d8a:	f013 0f01 	tst.w	r3, #1
  400d8e:	d008      	beq.n	400da2 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400d90:	6980      	ldr	r0, [r0, #24]
  400d92:	ea4f 52c0 	mov.w	r2, r0, lsl #23
  400d96:	ea4f 53d2 	mov.w	r3, r2, lsr #23
  400d9a:	600b      	str	r3, [r1, #0]

	return 0;
  400d9c:	f04f 0000 	mov.w	r0, #0
  400da0:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400da2:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400da6:	4770      	bx	lr

00400da8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400da8:	e7fe      	b.n	400da8 <Dummy_Handler>
  400daa:	bf00      	nop

00400dac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400dac:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400dae:	4b50      	ldr	r3, [pc, #320]	; (400ef0 <Reset_Handler+0x144>)
  400db0:	4a50      	ldr	r2, [pc, #320]	; (400ef4 <Reset_Handler+0x148>)
  400db2:	429a      	cmp	r2, r3
  400db4:	d929      	bls.n	400e0a <Reset_Handler+0x5e>
		for (; pDest < &_erelocate;) {
  400db6:	4d50      	ldr	r5, [pc, #320]	; (400ef8 <Reset_Handler+0x14c>)
  400db8:	4b4d      	ldr	r3, [pc, #308]	; (400ef0 <Reset_Handler+0x144>)
  400dba:	42ab      	cmp	r3, r5
  400dbc:	d248      	bcs.n	400e50 <Reset_Handler+0xa4>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
  400dbe:	f103 0004 	add.w	r0, r3, #4
  400dc2:	4a4e      	ldr	r2, [pc, #312]	; (400efc <Reset_Handler+0x150>)
  400dc4:	1a11      	subs	r1, r2, r0
  400dc6:	f021 0403 	bic.w	r4, r1, #3
  400dca:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  400dce:	f240 0200 	movw	r2, #0
  400dd2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400dd6:	f642 4194 	movw	r1, #11412	; 0x2c94
  400dda:	f2c0 0140 	movt	r1, #64	; 0x40
  400dde:	f104 0004 	add.w	r0, r4, #4
  400de2:	f3c4 0480 	ubfx	r4, r4, #2, #1
  400de6:	585d      	ldr	r5, [r3, r1]
  400de8:	509d      	str	r5, [r3, r2]
  400dea:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400dee:	4283      	cmp	r3, r0
  400df0:	d16d      	bne.n	400ece <Reset_Handler+0x122>
  400df2:	e02d      	b.n	400e50 <Reset_Handler+0xa4>
			*pDest++ = *pSrc++;
  400df4:	585d      	ldr	r5, [r3, r1]
  400df6:	509d      	str	r5, [r3, r2]
  400df8:	f103 0304 	add.w	r3, r3, #4
  400dfc:	585c      	ldr	r4, [r3, r1]
  400dfe:	509c      	str	r4, [r3, r2]
  400e00:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400e04:	4283      	cmp	r3, r0
  400e06:	d1f5      	bne.n	400df4 <Reset_Handler+0x48>
  400e08:	e022      	b.n	400e50 <Reset_Handler+0xa4>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400e0a:	4839      	ldr	r0, [pc, #228]	; (400ef0 <Reset_Handler+0x144>)
  400e0c:	4939      	ldr	r1, [pc, #228]	; (400ef4 <Reset_Handler+0x148>)
  400e0e:	4281      	cmp	r1, r0
  400e10:	d21e      	bcs.n	400e50 <Reset_Handler+0xa4>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400e12:	f640 0548 	movw	r5, #2120	; 0x848
  400e16:	f2c2 0500 	movt	r5, #8192	; 0x2000
  400e1a:	f240 0400 	movw	r4, #0
  400e1e:	f2c2 0400 	movt	r4, #8192	; 0x2000
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400e22:	4b37      	ldr	r3, [pc, #220]	; (400f00 <Reset_Handler+0x154>)
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400e24:	1b2a      	subs	r2, r5, r4
  400e26:	d013      	beq.n	400e50 <Reset_Handler+0xa4>
  400e28:	f1a2 0004 	sub.w	r0, r2, #4
  400e2c:	f3c0 0180 	ubfx	r1, r0, #2, #1
			*pDest-- = *pSrc--;
  400e30:	589c      	ldr	r4, [r3, r2]
  400e32:	f845 4d04 	str.w	r4, [r5, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400e36:	3a04      	subs	r2, #4
  400e38:	d152      	bne.n	400ee0 <Reset_Handler+0x134>
  400e3a:	e009      	b.n	400e50 <Reset_Handler+0xa4>
			*pDest-- = *pSrc--;
  400e3c:	5899      	ldr	r1, [r3, r2]
  400e3e:	f845 1d04 	str.w	r1, [r5, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400e42:	f1a2 0204 	sub.w	r2, r2, #4
			*pDest-- = *pSrc--;
  400e46:	589c      	ldr	r4, [r3, r2]
  400e48:	f845 4d04 	str.w	r4, [r5, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400e4c:	3a04      	subs	r2, #4
  400e4e:	d1f5      	bne.n	400e3c <Reset_Handler+0x90>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400e50:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400e52:	4b2c      	ldr	r3, [pc, #176]	; (400f04 <Reset_Handler+0x158>)
  400e54:	4a2c      	ldr	r2, [pc, #176]	; (400f08 <Reset_Handler+0x15c>)
  400e56:	429a      	cmp	r2, r3
  400e58:	d21e      	bcs.n	400e98 <Reset_Handler+0xec>
  400e5a:	f1a2 0504 	sub.w	r5, r2, #4

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
  400e5e:	492b      	ldr	r1, [pc, #172]	; (400f0c <Reset_Handler+0x160>)
  400e60:	1b48      	subs	r0, r1, r5
  400e62:	f020 0403 	bic.w	r4, r0, #3
  400e66:	f640 0348 	movw	r3, #2120	; 0x848
  400e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400e6e:	18e2      	adds	r2, r4, r3
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  400e70:	f04f 0100 	mov.w	r1, #0
  400e74:	1b50      	subs	r0, r2, r5
  400e76:	f1a0 0004 	sub.w	r0, r0, #4
  400e7a:	f3c0 0480 	ubfx	r4, r0, #2, #1
  400e7e:	f845 1f04 	str.w	r1, [r5, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400e82:	4295      	cmp	r5, r2
  400e84:	d11c      	bne.n	400ec0 <Reset_Handler+0x114>
  400e86:	e007      	b.n	400e98 <Reset_Handler+0xec>
  400e88:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
  400e8c:	6069      	str	r1, [r5, #4]
  400e8e:	f105 0508 	add.w	r5, r5, #8
  400e92:	6059      	str	r1, [r3, #4]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400e94:	4295      	cmp	r5, r2
  400e96:	d1f7      	bne.n	400e88 <Reset_Handler+0xdc>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400e98:	f44f 456d 	mov.w	r5, #60672	; 0xed00
  400e9c:	f2ce 0500 	movt	r5, #57344	; 0xe000
  400ea0:	f240 0200 	movw	r2, #0
  400ea4:	f2c0 0240 	movt	r2, #64	; 0x40
  400ea8:	60aa      	str	r2, [r5, #8]

	/* Initialize the C library */
	__libc_init_array();
  400eaa:	f241 61c1 	movw	r1, #5825	; 0x16c1
  400eae:	f2c0 0140 	movt	r1, #64	; 0x40
  400eb2:	4788      	blx	r1

	/* Branch to main function */
	main();
  400eb4:	f241 4059 	movw	r0, #5209	; 0x1459
  400eb8:	f2c0 0040 	movt	r0, #64	; 0x40
  400ebc:	4780      	blx	r0
  400ebe:	e7fe      	b.n	400ebe <Reset_Handler+0x112>
  400ec0:	2c00      	cmp	r4, #0
  400ec2:	d0e1      	beq.n	400e88 <Reset_Handler+0xdc>
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  400ec4:	f845 1f04 	str.w	r1, [r5, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400ec8:	4295      	cmp	r5, r2
  400eca:	d1dd      	bne.n	400e88 <Reset_Handler+0xdc>
  400ecc:	e7e4      	b.n	400e98 <Reset_Handler+0xec>
  400ece:	2c00      	cmp	r4, #0
  400ed0:	d090      	beq.n	400df4 <Reset_Handler+0x48>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  400ed2:	585c      	ldr	r4, [r3, r1]
  400ed4:	509c      	str	r4, [r3, r2]
  400ed6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400eda:	4283      	cmp	r3, r0
  400edc:	d18a      	bne.n	400df4 <Reset_Handler+0x48>
  400ede:	e7b7      	b.n	400e50 <Reset_Handler+0xa4>
  400ee0:	2900      	cmp	r1, #0
  400ee2:	d0ab      	beq.n	400e3c <Reset_Handler+0x90>
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
			*pDest-- = *pSrc--;
  400ee4:	5898      	ldr	r0, [r3, r2]
  400ee6:	f845 0d04 	str.w	r0, [r5, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400eea:	3a04      	subs	r2, #4
  400eec:	d1a6      	bne.n	400e3c <Reset_Handler+0x90>
  400eee:	e7af      	b.n	400e50 <Reset_Handler+0xa4>
  400ef0:	20000000 	.word	0x20000000
  400ef4:	00402c94 	.word	0x00402c94
  400ef8:	20000848 	.word	0x20000848
  400efc:	2000084b 	.word	0x2000084b
  400f00:	00402c90 	.word	0x00402c90
  400f04:	20000954 	.word	0x20000954
  400f08:	20000848 	.word	0x20000848
  400f0c:	2000094f 	.word	0x2000094f

00400f10 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400f14:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400f18:	6b18      	ldr	r0, [r3, #48]	; 0x30
  400f1a:	f000 0303 	and.w	r3, r0, #3
  400f1e:	2b03      	cmp	r3, #3
  400f20:	f200 80a9 	bhi.w	401076 <SystemCoreClockUpdate+0x166>
  400f24:	e8df f003 	tbb	[pc, r3]
  400f28:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400f2c:	f241 4010 	movw	r0, #5136	; 0x1410
  400f30:	f2c4 000e 	movt	r0, #16398	; 0x400e
  400f34:	6941      	ldr	r1, [r0, #20]
  400f36:	f011 0f80 	tst.w	r1, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400f3a:	f240 0300 	movw	r3, #0
  400f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400f42:	bf14      	ite	ne
  400f44:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400f48:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400f4c:	601a      	str	r2, [r3, #0]
  400f4e:	e092      	b.n	401076 <SystemCoreClockUpdate+0x166>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400f54:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400f58:	6a18      	ldr	r0, [r3, #32]
  400f5a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  400f5e:	d009      	beq.n	400f74 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400f60:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  400f64:	f2c0 03b7 	movt	r3, #183	; 0xb7
  400f68:	f240 0200 	movw	r2, #0
  400f6c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400f70:	6013      	str	r3, [r2, #0]
  400f72:	e080      	b.n	401076 <SystemCoreClockUpdate+0x166>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400f74:	f44f 6110 	mov.w	r1, #2304	; 0x900
  400f78:	f2c0 013d 	movt	r1, #61	; 0x3d
  400f7c:	f240 0200 	movw	r2, #0
  400f80:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400f84:	6011      	str	r1, [r2, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400f8a:	f2c4 030e 	movt	r3, #16398	; 0x400e
  400f8e:	6a18      	ldr	r0, [r3, #32]
  400f90:	f000 0170 	and.w	r1, r0, #112	; 0x70
  400f94:	2910      	cmp	r1, #16
  400f96:	d002      	beq.n	400f9e <SystemCoreClockUpdate+0x8e>
  400f98:	2920      	cmp	r1, #32
  400f9a:	d16c      	bne.n	401076 <SystemCoreClockUpdate+0x166>
  400f9c:	e009      	b.n	400fb2 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400f9e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  400fa2:	f2c0 007a 	movt	r0, #122	; 0x7a
  400fa6:	f240 0100 	movw	r1, #0
  400faa:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400fae:	6008      	str	r0, [r1, #0]
			break;
  400fb0:	e061      	b.n	401076 <SystemCoreClockUpdate+0x166>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400fb2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  400fb6:	f2c0 03b7 	movt	r3, #183	; 0xb7
  400fba:	f240 0200 	movw	r2, #0
  400fbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400fc2:	6013      	str	r3, [r2, #0]
			break;
  400fc4:	e057      	b.n	401076 <SystemCoreClockUpdate+0x166>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400fca:	f2c4 020e 	movt	r2, #16398	; 0x400e
  400fce:	6a13      	ldr	r3, [r2, #32]
  400fd0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400fd4:	d009      	beq.n	400fea <SystemCoreClockUpdate+0xda>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400fd6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  400fda:	f2c0 03b7 	movt	r3, #183	; 0xb7
  400fde:	f240 0200 	movw	r2, #0
  400fe2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400fe6:	6013      	str	r3, [r2, #0]
  400fe8:	e027      	b.n	40103a <SystemCoreClockUpdate+0x12a>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400fea:	f44f 6310 	mov.w	r3, #2304	; 0x900
  400fee:	f2c0 033d 	movt	r3, #61	; 0x3d
  400ff2:	f240 0200 	movw	r2, #0
  400ff6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400ffa:	6013      	str	r3, [r2, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401000:	f2c4 030e 	movt	r3, #16398	; 0x400e
  401004:	6a1a      	ldr	r2, [r3, #32]
  401006:	f002 0370 	and.w	r3, r2, #112	; 0x70
  40100a:	2b10      	cmp	r3, #16
  40100c:	d002      	beq.n	401014 <SystemCoreClockUpdate+0x104>
  40100e:	2b20      	cmp	r3, #32
  401010:	d113      	bne.n	40103a <SystemCoreClockUpdate+0x12a>
  401012:	e009      	b.n	401028 <SystemCoreClockUpdate+0x118>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401014:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  401018:	f2c0 037a 	movt	r3, #122	; 0x7a
  40101c:	f240 0200 	movw	r2, #0
  401020:	f2c2 0200 	movt	r2, #8192	; 0x2000
  401024:	6013      	str	r3, [r2, #0]
					break;
  401026:	e008      	b.n	40103a <SystemCoreClockUpdate+0x12a>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401028:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  40102c:	f2c0 03b7 	movt	r3, #183	; 0xb7
  401030:	f240 0200 	movw	r2, #0
  401034:	f2c2 0200 	movt	r2, #8192	; 0x2000
  401038:	6013      	str	r3, [r2, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40103a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40103e:	f2c4 030e 	movt	r3, #16398	; 0x400e
  401042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401044:	f002 0303 	and.w	r3, r2, #3
  401048:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40104a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40104e:	f2c4 020e 	movt	r2, #16398	; 0x400e
  401052:	bf07      	ittee	eq
  401054:	6a90      	ldreq	r0, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401056:	6a91      	ldreq	r1, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401058:	6ad0      	ldrne	r0, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40105a:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
  40105c:	f240 0300 	movw	r3, #0
  401060:	f2c2 0300 	movt	r3, #8192	; 0x2000
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  401064:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  401068:	681a      	ldr	r2, [r3, #0]
  40106a:	fb00 2002 	mla	r0, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  40106e:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  401070:	fbb0 f2f1 	udiv	r2, r0, r1
  401074:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401076:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40107a:	f2c4 020e 	movt	r2, #16398	; 0x400e
  40107e:	6b10      	ldr	r0, [r2, #48]	; 0x30
  401080:	f000 0170 	and.w	r1, r0, #112	; 0x70
  401084:	2970      	cmp	r1, #112	; 0x70
  401086:	d10e      	bne.n	4010a6 <SystemCoreClockUpdate+0x196>
		SystemCoreClock /= 3U;
  401088:	f240 0300 	movw	r3, #0
  40108c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401090:	6818      	ldr	r0, [r3, #0]
  401092:	f64a 22ab 	movw	r2, #43691	; 0xaaab
  401096:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
  40109a:	fba2 0100 	umull	r0, r1, r2, r0
  40109e:	ea4f 0051 	mov.w	r0, r1, lsr #1
  4010a2:	6018      	str	r0, [r3, #0]
  4010a4:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4010aa:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4010ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4010b0:	f240 0000 	movw	r0, #0
  4010b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010b8:	f3c2 1102 	ubfx	r1, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4010bc:	6803      	ldr	r3, [r0, #0]
  4010be:	fa23 f301 	lsr.w	r3, r3, r1
  4010c2:	6003      	str	r3, [r0, #0]
  4010c4:	4770      	bx	lr
  4010c6:	bf00      	nop

004010c8 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4010c8:	f642 43ff 	movw	r3, #11519	; 0x2cff
  4010cc:	f2c0 1331 	movt	r3, #305	; 0x131
  4010d0:	4298      	cmp	r0, r3
  4010d2:	d80c      	bhi.n	4010ee <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4010d4:	f44f 6120 	mov.w	r1, #2560	; 0xa00
  4010d8:	f2c4 010e 	movt	r1, #16398	; 0x400e
  4010dc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  4010e0:	6008      	str	r0, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4010e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  4010e6:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4010ea:	6018      	str	r0, [r3, #0]
  4010ec:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4010ee:	f645 11ff 	movw	r1, #23039	; 0x59ff
  4010f2:	f2c0 2162 	movt	r1, #610	; 0x262
  4010f6:	4288      	cmp	r0, r1
  4010f8:	d80e      	bhi.n	401118 <system_init_flash+0x50>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4010fa:	f44f 6020 	mov.w	r0, #2560	; 0xa00
  4010fe:	f2c4 000e 	movt	r0, #16398	; 0x400e
  401102:	f44f 7380 	mov.w	r3, #256	; 0x100
  401106:	f2c0 4300 	movt	r3, #1024	; 0x400
  40110a:	6003      	str	r3, [r0, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40110c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  401110:	f2c4 020e 	movt	r2, #16398	; 0x400e
  401114:	6013      	str	r3, [r2, #0]
  401116:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401118:	f248 62ff 	movw	r2, #34559	; 0x86ff
  40111c:	f2c0 3293 	movt	r2, #915	; 0x393
  401120:	4290      	cmp	r0, r2
  401122:	d80e      	bhi.n	401142 <system_init_flash+0x7a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401124:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  401128:	f2c4 020e 	movt	r2, #16398	; 0x400e
  40112c:	f44f 7300 	mov.w	r3, #512	; 0x200
  401130:	f2c0 4300 	movt	r3, #1024	; 0x400
  401134:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401136:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  40113a:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40113e:	600b      	str	r3, [r1, #0]
  401140:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401142:	f24b 33ff 	movw	r3, #46079	; 0xb3ff
  401146:	f2c0 43c4 	movt	r3, #1220	; 0x4c4
  40114a:	4298      	cmp	r0, r3
  40114c:	d80e      	bhi.n	40116c <system_init_flash+0xa4>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40114e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  401152:	f2c4 020e 	movt	r2, #16398	; 0x400e
  401156:	f44f 7140 	mov.w	r1, #768	; 0x300
  40115a:	f2c0 4100 	movt	r1, #1024	; 0x400
  40115e:	6011      	str	r1, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401160:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  401164:	f2c4 000e 	movt	r0, #16398	; 0x400e
  401168:	6001      	str	r1, [r0, #0]
  40116a:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40116c:	f24e 01ff 	movw	r1, #57599	; 0xe0ff
  401170:	f2c0 51f5 	movt	r1, #1525	; 0x5f5
  401174:	4288      	cmp	r0, r1
  401176:	d80c      	bhi.n	401192 <system_init_flash+0xca>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401178:	f44f 6120 	mov.w	r1, #2560	; 0xa00
  40117c:	f2c4 010e 	movt	r1, #16398	; 0x400e
  401180:	f04f 2004 	mov.w	r0, #67109888	; 0x4000400
  401184:	6008      	str	r0, [r1, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401186:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  40118a:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40118e:	6018      	str	r0, [r3, #0]
  401190:	4770      	bx	lr
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401192:	f44f 6020 	mov.w	r0, #2560	; 0xa00
  401196:	f2c4 000e 	movt	r0, #16398	; 0x400e
  40119a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  40119e:	f2c0 4300 	movt	r3, #1024	; 0x400
  4011a2:	6003      	str	r3, [r0, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4011a4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  4011a8:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4011ac:	6013      	str	r3, [r2, #0]
  4011ae:	4770      	bx	lr

004011b0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4011b0:	f640 03d8 	movw	r3, #2264	; 0x8d8
  4011b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4011b8:	6819      	ldr	r1, [r3, #0]
  4011ba:	b941      	cbnz	r1, 4011ce <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
  4011bc:	f640 03d8 	movw	r3, #2264	; 0x8d8
  4011c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4011c4:	f643 1258 	movw	r2, #14680	; 0x3958
  4011c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4011cc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4011ce:	f640 01d8 	movw	r1, #2264	; 0x8d8
  4011d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4011d6:	680b      	ldr	r3, [r1, #0]

	if (((int)prev_heap + incr) > ramend) {
  4011d8:	1818      	adds	r0, r3, r0
  4011da:	f647 72fc 	movw	r2, #32764	; 0x7ffc
  4011de:	f2c2 0202 	movt	r2, #8194	; 0x2002
  4011e2:	4282      	cmp	r2, r0
  4011e4:	db06      	blt.n	4011f4 <_sbrk+0x44>
		return (caddr_t) -1;	
	}

	heap += incr;
  4011e6:	4601      	mov	r1, r0
  4011e8:	f640 00d8 	movw	r0, #2264	; 0x8d8
  4011ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4011f0:	6001      	str	r1, [r0, #0]

	return (caddr_t) prev_heap;
  4011f2:	e001      	b.n	4011f8 <_sbrk+0x48>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4011f4:	f04f 33ff 	mov.w	r3, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4011f8:	4618      	mov	r0, r3
  4011fa:	4770      	bx	lr

004011fc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4011fc:	f04f 30ff 	mov.w	r0, #4294967295
  401200:	4770      	bx	lr
  401202:	bf00      	nop

00401204 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401208:	604b      	str	r3, [r1, #4]

	return 0;
}
  40120a:	f04f 0000 	mov.w	r0, #0
  40120e:	4770      	bx	lr

00401210 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401210:	f04f 0001 	mov.w	r0, #1
  401214:	4770      	bx	lr
  401216:	bf00      	nop

00401218 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401218:	f04f 0000 	mov.w	r0, #0
  40121c:	4770      	bx	lr
  40121e:	bf00      	nop

00401220 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401220:	b5f0      	push	{r4, r5, r6, r7, lr}
  401222:	b083      	sub	sp, #12
  401224:	4604      	mov	r4, r0
  401226:	460d      	mov	r5, r1
	uint32_t val = 0;
  401228:	f04f 0300 	mov.w	r3, #0
  40122c:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40122e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  401232:	f2c4 000e 	movt	r0, #16398	; 0x400e
  401236:	4284      	cmp	r4, r0
  401238:	d10d      	bne.n	401256 <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
  40123a:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  40123e:	f2c4 060e 	movt	r6, #16398	; 0x400e
  401242:	f640 5751 	movw	r7, #3409	; 0xd51
  401246:	f2c0 0740 	movt	r7, #64	; 0x40
  40124a:	4630      	mov	r0, r6
  40124c:	4629      	mov	r1, r5
  40124e:	47b8      	blx	r7
  401250:	2800      	cmp	r0, #0
  401252:	d1fa      	bne.n	40124a <usart_serial_getchar+0x2a>
  401254:	e029      	b.n	4012aa <usart_serial_getchar+0x8a>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401256:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40125a:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40125e:	428c      	cmp	r4, r1
  401260:	d10d      	bne.n	40127e <usart_serial_getchar+0x5e>
		while (uart_read((Uart*)p_usart, data));
  401262:	f44f 6400 	mov.w	r4, #2048	; 0x800
  401266:	f2c4 040e 	movt	r4, #16398	; 0x400e
  40126a:	f640 5651 	movw	r6, #3409	; 0xd51
  40126e:	f2c0 0640 	movt	r6, #64	; 0x40
  401272:	4620      	mov	r0, r4
  401274:	4629      	mov	r1, r5
  401276:	47b0      	blx	r6
  401278:	2800      	cmp	r0, #0
  40127a:	d1fa      	bne.n	401272 <usart_serial_getchar+0x52>
  40127c:	e02a      	b.n	4012d4 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40127e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401282:	f2c4 0202 	movt	r2, #16386	; 0x4002
  401286:	4294      	cmp	r4, r2
  401288:	d10f      	bne.n	4012aa <usart_serial_getchar+0x8a>
		while (usart_read(p_usart, &val));
  40128a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  40128e:	f2c4 0402 	movt	r4, #16386	; 0x4002
  401292:	f640 5689 	movw	r6, #3465	; 0xd89
  401296:	f2c0 0640 	movt	r6, #64	; 0x40
  40129a:	4620      	mov	r0, r4
  40129c:	a901      	add	r1, sp, #4
  40129e:	47b0      	blx	r6
  4012a0:	2800      	cmp	r0, #0
  4012a2:	d1fa      	bne.n	40129a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
  4012a4:	9b01      	ldr	r3, [sp, #4]
  4012a6:	702b      	strb	r3, [r5, #0]
  4012a8:	e014      	b.n	4012d4 <usart_serial_getchar+0xb4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4012aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4012ae:	f2c4 0002 	movt	r0, #16386	; 0x4002
  4012b2:	4284      	cmp	r4, r0
  4012b4:	d10e      	bne.n	4012d4 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
  4012b6:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  4012ba:	f2c4 0402 	movt	r4, #16386	; 0x4002
  4012be:	f640 5689 	movw	r6, #3465	; 0xd89
  4012c2:	f2c0 0640 	movt	r6, #64	; 0x40
  4012c6:	4620      	mov	r0, r4
  4012c8:	a901      	add	r1, sp, #4
  4012ca:	47b0      	blx	r6
  4012cc:	2800      	cmp	r0, #0
  4012ce:	d1fa      	bne.n	4012c6 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4012d0:	9901      	ldr	r1, [sp, #4]
  4012d2:	7029      	strb	r1, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4012d4:	b003      	add	sp, #12
  4012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

004012d8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4012d8:	b570      	push	{r4, r5, r6, lr}
  4012da:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4012dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  4012e0:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4012e4:	4298      	cmp	r0, r3
  4012e6:	d10f      	bne.n	401308 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
  4012e8:	f44f 65c0 	mov.w	r5, #1536	; 0x600
  4012ec:	f2c4 050e 	movt	r5, #16398	; 0x400e
  4012f0:	f640 5639 	movw	r6, #3385	; 0xd39
  4012f4:	f2c0 0640 	movt	r6, #64	; 0x40
  4012f8:	4628      	mov	r0, r5
  4012fa:	4621      	mov	r1, r4
  4012fc:	47b0      	blx	r6
  4012fe:	2800      	cmp	r0, #0
  401300:	d1fa      	bne.n	4012f8 <usart_serial_putchar+0x20>
		return 1;
  401302:	f04f 0001 	mov.w	r0, #1
  401306:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401308:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40130c:	f2c4 010e 	movt	r1, #16398	; 0x400e
  401310:	4288      	cmp	r0, r1
  401312:	d10f      	bne.n	401334 <usart_serial_putchar+0x5c>
		while (uart_write((Uart*)p_usart, c)!=0);
  401314:	f44f 6500 	mov.w	r5, #2048	; 0x800
  401318:	f2c4 050e 	movt	r5, #16398	; 0x400e
  40131c:	f640 5639 	movw	r6, #3385	; 0xd39
  401320:	f2c0 0640 	movt	r6, #64	; 0x40
  401324:	4628      	mov	r0, r5
  401326:	4621      	mov	r1, r4
  401328:	47b0      	blx	r6
  40132a:	2800      	cmp	r0, #0
  40132c:	d1fa      	bne.n	401324 <usart_serial_putchar+0x4c>
		return 1;
  40132e:	f04f 0001 	mov.w	r0, #1
  401332:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401334:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  401338:	f2c4 0202 	movt	r2, #16386	; 0x4002
  40133c:	4290      	cmp	r0, r2
  40133e:	d10f      	bne.n	401360 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
  401340:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  401344:	f2c4 0502 	movt	r5, #16386	; 0x4002
  401348:	f640 5669 	movw	r6, #3433	; 0xd69
  40134c:	f2c0 0640 	movt	r6, #64	; 0x40
  401350:	4628      	mov	r0, r5
  401352:	4621      	mov	r1, r4
  401354:	47b0      	blx	r6
  401356:	2800      	cmp	r0, #0
  401358:	d1fa      	bne.n	401350 <usart_serial_putchar+0x78>
		return 1;
  40135a:	f04f 0001 	mov.w	r0, #1
  40135e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401364:	f2c4 0302 	movt	r3, #16386	; 0x4002
  401368:	4298      	cmp	r0, r3
  40136a:	d10f      	bne.n	40138c <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
  40136c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  401370:	f2c4 0502 	movt	r5, #16386	; 0x4002
  401374:	f640 5669 	movw	r6, #3433	; 0xd69
  401378:	f2c0 0640 	movt	r6, #64	; 0x40
  40137c:	4628      	mov	r0, r5
  40137e:	4621      	mov	r1, r4
  401380:	47b0      	blx	r6
  401382:	2800      	cmp	r0, #0
  401384:	d1fa      	bne.n	40137c <usart_serial_putchar+0xa4>
		return 1;
  401386:	f04f 0001 	mov.w	r0, #1
  40138a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40138c:	f04f 0000 	mov.w	r0, #0
}
  401390:	bd70      	pop	{r4, r5, r6, pc}
  401392:	bf00      	nop

00401394 <PWM_Handler>:

/**
 * \brief Interrupt handler for the PWM controller.
 */
void PWM_Handler(void)
{
  401394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint32_t ul_count = 0;  /* PWM counter value */
	static uint32_t ul_duty = INIT_DUTY_VALUE;  /* PWM duty cycle rate */
	static uint8_t fade_in = 1;  /* LED fade in flag */
	uint32_t events = pwm_channel_get_interrupt_status(PWM);
  401396:	f04f 0000 	mov.w	r0, #0
  40139a:	f2c4 0002 	movt	r0, #16386	; 0x4002
  40139e:	f640 43c1 	movw	r3, #3265	; 0xcc1
  4013a2:	f2c0 0340 	movt	r3, #64	; 0x40
  4013a6:	4798      	blx	r3

	/* Interrupt on PIN_PWM_LED0_CHANNEL */
	if ((events & (1 << PIN_PWM_LED0_CHANNEL)) ==
  4013a8:	f010 0f01 	tst.w	r0, #1
  4013ac:	d053      	beq.n	401456 <PWM_Handler+0xc2>
			(1 << PIN_PWM_LED0_CHANNEL)) {
		ul_count++;
  4013ae:	f640 02e0 	movw	r2, #2272	; 0x8e0
  4013b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4013b6:	6810      	ldr	r0, [r2, #0]
  4013b8:	f100 0001 	add.w	r0, r0, #1
  4013bc:	6010      	str	r0, [r2, #0]

		/* Fade in/out */
		if (ul_count == (PWM_FREQUENCY / (PERIOD_VALUE - INIT_DUTY_VALUE))) {
  4013be:	280a      	cmp	r0, #10
  4013c0:	d149      	bne.n	401456 <PWM_Handler+0xc2>
			/* Fade in */
			if (fade_in) {
  4013c2:	f240 0104 	movw	r1, #4
  4013c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4013ca:	780c      	ldrb	r4, [r1, #0]
  4013cc:	b18c      	cbz	r4, 4013f2 <PWM_Handler+0x5e>
				ul_duty++;
  4013ce:	f640 00dc 	movw	r0, #2268	; 0x8dc
  4013d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4013d6:	6801      	ldr	r1, [r0, #0]
  4013d8:	f101 0101 	add.w	r1, r1, #1
  4013dc:	6001      	str	r1, [r0, #0]
				if (ul_duty == PERIOD_VALUE) {
  4013de:	2964      	cmp	r1, #100	; 0x64
  4013e0:	d117      	bne.n	401412 <PWM_Handler+0x7e>
					fade_in = 0;
  4013e2:	f240 0404 	movw	r4, #4
  4013e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4013ea:	f04f 0500 	mov.w	r5, #0
  4013ee:	7025      	strb	r5, [r4, #0]
  4013f0:	e00f      	b.n	401412 <PWM_Handler+0x7e>
				}
			} else {
				/* Fade out */
				ul_duty--;
  4013f2:	f640 05dc 	movw	r5, #2268	; 0x8dc
  4013f6:	f2c2 0500 	movt	r5, #8192	; 0x2000
  4013fa:	682e      	ldr	r6, [r5, #0]
  4013fc:	f106 37ff 	add.w	r7, r6, #4294967295
  401400:	602f      	str	r7, [r5, #0]
				if (ul_duty == INIT_DUTY_VALUE) {
  401402:	b937      	cbnz	r7, 401412 <PWM_Handler+0x7e>
					fade_in = 1;
  401404:	f240 0304 	movw	r3, #4
  401408:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40140c:	f04f 0201 	mov.w	r2, #1
  401410:	701a      	strb	r2, [r3, #0]
				}
			}

			/* Set new duty cycle */
			ul_count = 0;
  401412:	f04f 0600 	mov.w	r6, #0
  401416:	f640 07e0 	movw	r7, #2272	; 0x8e0
  40141a:	f2c2 0700 	movt	r7, #8192	; 0x2000
  40141e:	603e      	str	r6, [r7, #0]
			g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  401420:	f640 1428 	movw	r4, #2344	; 0x928
  401424:	f2c2 0400 	movt	r4, #8192	; 0x2000
  401428:	6026      	str	r6, [r4, #0]
			pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_duty);
  40142a:	4635      	mov	r5, r6
  40142c:	f2c4 0502 	movt	r5, #16386	; 0x4002
  401430:	f640 07dc 	movw	r7, #2268	; 0x8dc
  401434:	f2c2 0700 	movt	r7, #8192	; 0x2000
  401438:	4628      	mov	r0, r5
  40143a:	4621      	mov	r1, r4
  40143c:	683a      	ldr	r2, [r7, #0]
  40143e:	f640 4685 	movw	r6, #3205	; 0xc85
  401442:	f2c0 0640 	movt	r6, #64	; 0x40
  401446:	47b0      	blx	r6
			g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  401448:	f04f 0301 	mov.w	r3, #1
  40144c:	6023      	str	r3, [r4, #0]
			pwm_channel_update_duty(PWM, &g_pwm_channel_led, ul_duty);
  40144e:	4628      	mov	r0, r5
  401450:	4621      	mov	r1, r4
  401452:	683a      	ldr	r2, [r7, #0]
  401454:	47b0      	blx	r6
  401456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00401458 <main>:
 * Output PWM waves on LEDs to make them fade in and out.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  401458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40145c:	b088      	sub	sp, #32
	/* Initialize the SAM system */
	sysclk_init();
  40145e:	f240 137d 	movw	r3, #381	; 0x17d
  401462:	f2c0 0340 	movt	r3, #64	; 0x40
  401466:	4798      	blx	r3
	board_init();
  401468:	f240 301d 	movw	r0, #797	; 0x31d
  40146c:	f2c0 0040 	movt	r0, #64	; 0x40
  401470:	4780      	blx	r0
  401472:	f04f 0008 	mov.w	r0, #8
  401476:	f640 158d 	movw	r5, #2445	; 0x98d
  40147a:	f2c0 0540 	movt	r5, #64	; 0x40
  40147e:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401480:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  401484:	f2c4 060e 	movt	r6, #16398	; 0x400e
  401488:	f640 1120 	movw	r1, #2336	; 0x920
  40148c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401490:	600e      	str	r6, [r1, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401492:	f640 141c 	movw	r4, #2332	; 0x91c
  401496:	f2c2 0400 	movt	r4, #8192	; 0x2000
  40149a:	f241 22d9 	movw	r2, #4825	; 0x12d9
  40149e:	f2c0 0240 	movt	r2, #64	; 0x40
  4014a2:	6022      	str	r2, [r4, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4014a4:	f640 1718 	movw	r7, #2328	; 0x918
  4014a8:	f2c2 0700 	movt	r7, #8192	; 0x2000
  4014ac:	f241 2321 	movw	r3, #4641	; 0x1221
  4014b0:	f2c0 0340 	movt	r3, #64	; 0x40
  4014b4:	603b      	str	r3, [r7, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4014b6:	f44f 6460 	mov.w	r4, #3584	; 0xe00
  4014ba:	f2c0 7427 	movt	r4, #1831	; 0x727
  4014be:	9401      	str	r4, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  4014c0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  4014c4:	9002      	str	r0, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  4014c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4014ca:	9103      	str	r1, [sp, #12]
  4014cc:	f04f 0008 	mov.w	r0, #8
  4014d0:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4014d2:	4630      	mov	r0, r6
  4014d4:	a901      	add	r1, sp, #4
  4014d6:	f640 46f5 	movw	r6, #3317	; 0xcf5
  4014da:	f2c0 0640 	movt	r6, #64	; 0x40
  4014de:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4014e0:	f240 0708 	movw	r7, #8
  4014e4:	f2c2 0700 	movt	r7, #8192	; 0x2000
  4014e8:	683a      	ldr	r2, [r7, #0]
  4014ea:	6890      	ldr	r0, [r2, #8]
  4014ec:	f04f 0100 	mov.w	r1, #0
  4014f0:	f241 7691 	movw	r6, #6033	; 0x1791
  4014f4:	f2c0 0640 	movt	r6, #64	; 0x40
  4014f8:	47b0      	blx	r6
	setbuf(stdin, NULL);
  4014fa:	683b      	ldr	r3, [r7, #0]
  4014fc:	6858      	ldr	r0, [r3, #4]
  4014fe:	f04f 0100 	mov.w	r1, #0
  401502:	47b0      	blx	r6

	/* Configure the console uart for debug information */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  401504:	f642 4018 	movw	r0, #11288	; 0x2c18
  401508:	f2c0 0040 	movt	r0, #64	; 0x40
  40150c:	f241 7181 	movw	r1, #6017	; 0x1781
  401510:	f2c0 0140 	movt	r1, #64	; 0x40
  401514:	4788      	blx	r1

	/* Enable PWM peripheral clock */
	pmc_enable_periph_clk(ID_PWM);
  401516:	f04f 001f 	mov.w	r0, #31
  40151a:	47a8      	blx	r5

	/* Disable PWM channels for LEDs */
	pwm_channel_disable(PWM, PIN_PWM_LED0_CHANNEL);
  40151c:	f04f 0600 	mov.w	r6, #0
  401520:	f2c4 0602 	movt	r6, #16386	; 0x4002
  401524:	4630      	mov	r0, r6
  401526:	f04f 0100 	mov.w	r1, #0
  40152a:	f640 45b5 	movw	r5, #3253	; 0xcb5
  40152e:	f2c0 0540 	movt	r5, #64	; 0x40
  401532:	47a8      	blx	r5
	pwm_channel_disable(PWM, PIN_PWM_LED1_CHANNEL);
  401534:	4630      	mov	r0, r6
  401536:	f04f 0101 	mov.w	r1, #1
  40153a:	47a8      	blx	r5

	/* Set PWM clock A as PWM_FREQUENCY*PERIOD_VALUE (clock B is not used) */
	pwm_clock_t clock_setting = {
  40153c:	f248 60a0 	movw	r0, #34464	; 0x86a0
  401540:	f2c0 0001 	movt	r0, #1
  401544:	9005      	str	r0, [sp, #20]
  401546:	f04f 0500 	mov.w	r5, #0
  40154a:	9506      	str	r5, [sp, #24]
  40154c:	9407      	str	r4, [sp, #28]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clock_setting);
  40154e:	4630      	mov	r0, r6
  401550:	a905      	add	r1, sp, #20
  401552:	f640 3435 	movw	r4, #2869	; 0xb35
  401556:	f2c0 0440 	movt	r4, #64	; 0x40
  40155a:	47a0      	blx	r4

	/* Initialize PWM channel for LED0 */
	/* Period is left-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_LEFT;
  40155c:	f640 1428 	movw	r4, #2344	; 0x928
  401560:	f2c2 0400 	movt	r4, #8192	; 0x2000
  401564:	8125      	strh	r5, [r4, #8]
	/* Output waveform starts at a low level */
	g_pwm_channel_led.polarity = PWM_LOW;
  401566:	72a5      	strb	r5, [r4, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401568:	f04f 0a0b 	mov.w	sl, #11
  40156c:	f8c4 a004 	str.w	sl, [r4, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  401570:	f04f 0964 	mov.w	r9, #100	; 0x64
  401574:	f8c4 9010 	str.w	r9, [r4, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  401578:	60e5      	str	r5, [r4, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED0_CHANNEL;
  40157a:	6025      	str	r5, [r4, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led);
  40157c:	4630      	mov	r0, r6
  40157e:	4621      	mov	r1, r4
  401580:	f640 3881 	movw	r8, #2945	; 0xb81
  401584:	f2c0 0840 	movt	r8, #64	; 0x40
  401588:	47c0      	blx	r8

	/* Enable channel counter event interrupt */
	pwm_channel_enable_interrupt(PWM, PIN_PWM_LED0_CHANNEL, 0);
  40158a:	4630      	mov	r0, r6
  40158c:	4629      	mov	r1, r5
  40158e:	462a      	mov	r2, r5
  401590:	f640 43c5 	movw	r3, #3269	; 0xcc5
  401594:	f2c0 0340 	movt	r3, #64	; 0x40
  401598:	4798      	blx	r3

	/* Initialize PWM channel for LED1 */
	/* Period is center-aligned */
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  40159a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40159e:	8122      	strh	r2, [r4, #8]
	/* Output waveform starts at a high level */
	g_pwm_channel_led.polarity = PWM_HIGH;
  4015a0:	f04f 0701 	mov.w	r7, #1
  4015a4:	72a7      	strb	r7, [r4, #10]
	/* Use PWM clock A as source clock */
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  4015a6:	f8c4 a004 	str.w	sl, [r4, #4]
	/* Period value of output waveform */
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  4015aa:	f8c4 9010 	str.w	r9, [r4, #16]
	/* Duty cycle value of output waveform */
	g_pwm_channel_led.ul_duty = INIT_DUTY_VALUE;
  4015ae:	60e5      	str	r5, [r4, #12]
	g_pwm_channel_led.channel = PIN_PWM_LED1_CHANNEL;
  4015b0:	6027      	str	r7, [r4, #0]
	pwm_channel_init(PWM, &g_pwm_channel_led);
  4015b2:	4630      	mov	r0, r6
  4015b4:	4621      	mov	r1, r4
  4015b6:	47c0      	blx	r8

	/* Disable channel counter event interrupt */
	pwm_channel_disable_interrupt(PWM, PIN_PWM_LED1_CHANNEL, 0);
  4015b8:	4630      	mov	r0, r6
  4015ba:	4639      	mov	r1, r7
  4015bc:	462a      	mov	r2, r5
  4015be:	f640 44dd 	movw	r4, #3293	; 0xcdd
  4015c2:	f2c0 0440 	movt	r4, #64	; 0x40
  4015c6:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4015c8:	f44f 4161 	mov.w	r1, #57600	; 0xe100
  4015cc:	f2ce 0100 	movt	r1, #57344	; 0xe000
  4015d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  4015d4:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4015d8:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4015dc:	f881 531f 	strb.w	r5, [r1, #799]	; 0x31f
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4015e0:	6008      	str	r0, [r1, #0]
	NVIC_ClearPendingIRQ(PWM_IRQn);
	NVIC_SetPriority(PWM_IRQn, 0);
	NVIC_EnableIRQ(PWM_IRQn);

	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM, PIN_PWM_LED0_CHANNEL);
  4015e2:	4630      	mov	r0, r6
  4015e4:	4629      	mov	r1, r5
  4015e6:	f640 45a9 	movw	r5, #3241	; 0xca9
  4015ea:	f2c0 0540 	movt	r5, #64	; 0x40
  4015ee:	47a8      	blx	r5
	pwm_channel_enable(PWM, PIN_PWM_LED1_CHANNEL);
  4015f0:	4630      	mov	r0, r6
  4015f2:	4639      	mov	r1, r7
  4015f4:	47a8      	blx	r5
  4015f6:	e7fe      	b.n	4015f6 <main+0x19e>

004015f8 <__register_exitproc>:
  4015f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4015fc:	4698      	mov	r8, r3
  4015fe:	4b23      	ldr	r3, [pc, #140]	; (40168c <__register_exitproc+0x94>)
  401600:	681c      	ldr	r4, [r3, #0]
  401602:	4606      	mov	r6, r0
  401604:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  401608:	460f      	mov	r7, r1
  40160a:	4691      	mov	r9, r2
  40160c:	b918      	cbnz	r0, 401616 <__register_exitproc+0x1e>
  40160e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  401612:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401616:	6841      	ldr	r1, [r0, #4]
  401618:	291f      	cmp	r1, #31
  40161a:	dd16      	ble.n	40164a <__register_exitproc+0x52>
  40161c:	481c      	ldr	r0, [pc, #112]	; (401690 <__register_exitproc+0x98>)
  40161e:	b918      	cbnz	r0, 401628 <__register_exitproc+0x30>
  401620:	f04f 30ff 	mov.w	r0, #4294967295
  401624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401628:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40162c:	f000 fe20 	bl	402270 <malloc>
  401630:	2800      	cmp	r0, #0
  401632:	d0f5      	beq.n	401620 <__register_exitproc+0x28>
  401634:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401638:	2500      	movs	r5, #0
  40163a:	6045      	str	r5, [r0, #4]
  40163c:	6002      	str	r2, [r0, #0]
  40163e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401642:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  401646:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  40164a:	b1b6      	cbz	r6, 40167a <__register_exitproc+0x82>
  40164c:	6844      	ldr	r4, [r0, #4]
  40164e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  401652:	2201      	movs	r2, #1
  401654:	eb00 0384 	add.w	r3, r0, r4, lsl #2
  401658:	fa02 f204 	lsl.w	r2, r2, r4
  40165c:	4311      	orrs	r1, r2
  40165e:	2e02      	cmp	r6, #2
  401660:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
  401664:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401668:	461c      	mov	r4, r3
  40166a:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
  40166e:	d104      	bne.n	40167a <__register_exitproc+0x82>
  401670:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  401674:	431a      	orrs	r2, r3
  401676:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  40167a:	6841      	ldr	r1, [r0, #4]
  40167c:	1c8b      	adds	r3, r1, #2
  40167e:	1c4a      	adds	r2, r1, #1
  401680:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
  401684:	6042      	str	r2, [r0, #4]
  401686:	2000      	movs	r0, #0
  401688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40168c:	00402c68 	.word	0x00402c68
  401690:	00402271 	.word	0x00402271

00401694 <__libc_fini_array>:
  401694:	b570      	push	{r4, r5, r6, lr}
  401696:	4b08      	ldr	r3, [pc, #32]	; (4016b8 <__libc_fini_array+0x24>)
  401698:	4c08      	ldr	r4, [pc, #32]	; (4016bc <__libc_fini_array+0x28>)
  40169a:	1ae0      	subs	r0, r4, r3
  40169c:	1084      	asrs	r4, r0, #2
  40169e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
  4016a2:	2500      	movs	r5, #0
  4016a4:	3d04      	subs	r5, #4
  4016a6:	b11c      	cbz	r4, 4016b0 <__libc_fini_array+0x1c>
  4016a8:	5972      	ldr	r2, [r6, r5]
  4016aa:	4790      	blx	r2
  4016ac:	3c01      	subs	r4, #1
  4016ae:	e7f9      	b.n	4016a4 <__libc_fini_array+0x10>
  4016b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  4016b4:	f001 bae6 	b.w	402c84 <_fini>
  4016b8:	00402c90 	.word	0x00402c90
  4016bc:	00402c94 	.word	0x00402c94

004016c0 <__libc_init_array>:
  4016c0:	b538      	push	{r3, r4, r5, lr}
  4016c2:	4d0e      	ldr	r5, [pc, #56]	; (4016fc <__libc_init_array+0x3c>)
  4016c4:	4b0e      	ldr	r3, [pc, #56]	; (401700 <__libc_init_array+0x40>)
  4016c6:	1ae8      	subs	r0, r5, r3
  4016c8:	1085      	asrs	r5, r0, #2
  4016ca:	2400      	movs	r4, #0
  4016cc:	42ac      	cmp	r4, r5
  4016ce:	d005      	beq.n	4016dc <__libc_init_array+0x1c>
  4016d0:	490b      	ldr	r1, [pc, #44]	; (401700 <__libc_init_array+0x40>)
  4016d2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
  4016d6:	4790      	blx	r2
  4016d8:	3401      	adds	r4, #1
  4016da:	e7f7      	b.n	4016cc <__libc_init_array+0xc>
  4016dc:	f001 fac8 	bl	402c70 <_init>
  4016e0:	4908      	ldr	r1, [pc, #32]	; (401704 <__libc_init_array+0x44>)
  4016e2:	4a09      	ldr	r2, [pc, #36]	; (401708 <__libc_init_array+0x48>)
  4016e4:	1a54      	subs	r4, r2, r1
  4016e6:	10a5      	asrs	r5, r4, #2
  4016e8:	2400      	movs	r4, #0
  4016ea:	42ac      	cmp	r4, r5
  4016ec:	d005      	beq.n	4016fa <__libc_init_array+0x3a>
  4016ee:	4b05      	ldr	r3, [pc, #20]	; (401704 <__libc_init_array+0x44>)
  4016f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4016f4:	4780      	blx	r0
  4016f6:	3401      	adds	r4, #1
  4016f8:	e7f7      	b.n	4016ea <__libc_init_array+0x2a>
  4016fa:	bd38      	pop	{r3, r4, r5, pc}
  4016fc:	00402c7c 	.word	0x00402c7c
  401700:	00402c7c 	.word	0x00402c7c
  401704:	00402c7c 	.word	0x00402c7c
  401708:	00402c84 	.word	0x00402c84

0040170c <memset>:
  40170c:	1882      	adds	r2, r0, r2
  40170e:	4603      	mov	r3, r0
  401710:	4293      	cmp	r3, r2
  401712:	d002      	beq.n	40171a <memset+0xe>
  401714:	f803 1b01 	strb.w	r1, [r3], #1
  401718:	e7fa      	b.n	401710 <memset+0x4>
  40171a:	4770      	bx	lr

0040171c <_puts_r>:
  40171c:	b530      	push	{r4, r5, lr}
  40171e:	4605      	mov	r5, r0
  401720:	b089      	sub	sp, #36	; 0x24
  401722:	4608      	mov	r0, r1
  401724:	460c      	mov	r4, r1
  401726:	f000 f8b1 	bl	40188c <strlen>
  40172a:	2101      	movs	r1, #1
  40172c:	1843      	adds	r3, r0, r1
  40172e:	9107      	str	r1, [sp, #28]
  401730:	4911      	ldr	r1, [pc, #68]	; (401778 <_puts_r+0x5c>)
  401732:	9303      	str	r3, [sp, #12]
  401734:	680b      	ldr	r3, [r1, #0]
  401736:	4a11      	ldr	r2, [pc, #68]	; (40177c <_puts_r+0x60>)
  401738:	9005      	str	r0, [sp, #20]
  40173a:	a804      	add	r0, sp, #16
  40173c:	9001      	str	r0, [sp, #4]
  40173e:	6898      	ldr	r0, [r3, #8]
  401740:	9206      	str	r2, [sp, #24]
  401742:	2202      	movs	r2, #2
  401744:	9202      	str	r2, [sp, #8]
  401746:	8982      	ldrh	r2, [r0, #12]
  401748:	9404      	str	r4, [sp, #16]
  40174a:	f402 5100 	and.w	r1, r2, #8192	; 0x2000
  40174e:	b20b      	sxth	r3, r1
  401750:	b933      	cbnz	r3, 401760 <_puts_r+0x44>
  401752:	6e41      	ldr	r1, [r0, #100]	; 0x64
  401754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401758:	f421 5300 	bic.w	r3, r1, #8192	; 0x2000
  40175c:	8182      	strh	r2, [r0, #12]
  40175e:	6643      	str	r3, [r0, #100]	; 0x64
  401760:	4628      	mov	r0, r5
  401762:	68a9      	ldr	r1, [r5, #8]
  401764:	aa01      	add	r2, sp, #4
  401766:	f000 fb79 	bl	401e5c <__sfvwrite_r>
  40176a:	2800      	cmp	r0, #0
  40176c:	bf0c      	ite	eq
  40176e:	200a      	moveq	r0, #10
  401770:	f04f 30ff 	movne.w	r0, #4294967295
  401774:	b009      	add	sp, #36	; 0x24
  401776:	bd30      	pop	{r4, r5, pc}
  401778:	20000008 	.word	0x20000008
  40177c:	00402c6e 	.word	0x00402c6e

00401780 <puts>:
  401780:	4b02      	ldr	r3, [pc, #8]	; (40178c <puts+0xc>)
  401782:	4601      	mov	r1, r0
  401784:	6818      	ldr	r0, [r3, #0]
  401786:	f7ff bfc9 	b.w	40171c <_puts_r>
  40178a:	bf00      	nop
  40178c:	20000008 	.word	0x20000008

00401790 <setbuf>:
  401790:	2900      	cmp	r1, #0
  401792:	bf0c      	ite	eq
  401794:	2202      	moveq	r2, #2
  401796:	2200      	movne	r2, #0
  401798:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40179c:	f000 b800 	b.w	4017a0 <setvbuf>

004017a0 <setvbuf>:
  4017a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4017a4:	461d      	mov	r5, r3
  4017a6:	4b37      	ldr	r3, [pc, #220]	; (401884 <setvbuf+0xe4>)
  4017a8:	4604      	mov	r4, r0
  4017aa:	6818      	ldr	r0, [r3, #0]
  4017ac:	460e      	mov	r6, r1
  4017ae:	4617      	mov	r7, r2
  4017b0:	4698      	mov	r8, r3
  4017b2:	b118      	cbz	r0, 4017bc <setvbuf+0x1c>
  4017b4:	6b82      	ldr	r2, [r0, #56]	; 0x38
  4017b6:	b90a      	cbnz	r2, 4017bc <setvbuf+0x1c>
  4017b8:	f000 f9d0 	bl	401b5c <__sinit>
  4017bc:	2f02      	cmp	r7, #2
  4017be:	d85d      	bhi.n	40187c <setvbuf+0xdc>
  4017c0:	2d00      	cmp	r5, #0
  4017c2:	db5b      	blt.n	40187c <setvbuf+0xdc>
  4017c4:	4621      	mov	r1, r4
  4017c6:	f8d8 0000 	ldr.w	r0, [r8]
  4017ca:	f000 f8d3 	bl	401974 <_fflush_r>
  4017ce:	89a1      	ldrh	r1, [r4, #12]
  4017d0:	f001 0380 	and.w	r3, r1, #128	; 0x80
  4017d4:	2000      	movs	r0, #0
  4017d6:	b21a      	sxth	r2, r3
  4017d8:	6060      	str	r0, [r4, #4]
  4017da:	61a0      	str	r0, [r4, #24]
  4017dc:	b122      	cbz	r2, 4017e8 <setvbuf+0x48>
  4017de:	4829      	ldr	r0, [pc, #164]	; (401884 <setvbuf+0xe4>)
  4017e0:	6921      	ldr	r1, [r4, #16]
  4017e2:	6800      	ldr	r0, [r0, #0]
  4017e4:	f000 fa84 	bl	401cf0 <_free_r>
  4017e8:	89a1      	ldrh	r1, [r4, #12]
  4017ea:	2f02      	cmp	r7, #2
  4017ec:	f021 0383 	bic.w	r3, r1, #131	; 0x83
  4017f0:	81a3      	strh	r3, [r4, #12]
  4017f2:	d012      	beq.n	40181a <setvbuf+0x7a>
  4017f4:	bb36      	cbnz	r6, 401844 <setvbuf+0xa4>
  4017f6:	2d00      	cmp	r5, #0
  4017f8:	bf08      	it	eq
  4017fa:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  4017fe:	4628      	mov	r0, r5
  401800:	f000 fd36 	bl	402270 <malloc>
  401804:	4606      	mov	r6, r0
  401806:	b9c8      	cbnz	r0, 40183c <setvbuf+0x9c>
  401808:	f44f 6080 	mov.w	r0, #1024	; 0x400
  40180c:	f000 fd30 	bl	402270 <malloc>
  401810:	4606      	mov	r6, r0
  401812:	b988      	cbnz	r0, 401838 <setvbuf+0x98>
  401814:	f04f 30ff 	mov.w	r0, #4294967295
  401818:	e000      	b.n	40181c <setvbuf+0x7c>
  40181a:	2000      	movs	r0, #0
  40181c:	89a1      	ldrh	r1, [r4, #12]
  40181e:	f041 0302 	orr.w	r3, r1, #2
  401822:	81a3      	strh	r3, [r4, #12]
  401824:	f104 0143 	add.w	r1, r4, #67	; 0x43
  401828:	2200      	movs	r2, #0
  40182a:	2301      	movs	r3, #1
  40182c:	60a2      	str	r2, [r4, #8]
  40182e:	6021      	str	r1, [r4, #0]
  401830:	6121      	str	r1, [r4, #16]
  401832:	6163      	str	r3, [r4, #20]
  401834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401838:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40183c:	89a2      	ldrh	r2, [r4, #12]
  40183e:	f042 0080 	orr.w	r0, r2, #128	; 0x80
  401842:	81a0      	strh	r0, [r4, #12]
  401844:	2f01      	cmp	r7, #1
  401846:	d105      	bne.n	401854 <setvbuf+0xb4>
  401848:	89a1      	ldrh	r1, [r4, #12]
  40184a:	426a      	negs	r2, r5
  40184c:	f041 0301 	orr.w	r3, r1, #1
  401850:	81a3      	strh	r3, [r4, #12]
  401852:	61a2      	str	r2, [r4, #24]
  401854:	480b      	ldr	r0, [pc, #44]	; (401884 <setvbuf+0xe4>)
  401856:	89a2      	ldrh	r2, [r4, #12]
  401858:	6801      	ldr	r1, [r0, #0]
  40185a:	4b0b      	ldr	r3, [pc, #44]	; (401888 <setvbuf+0xe8>)
  40185c:	f002 0008 	and.w	r0, r2, #8
  401860:	b200      	sxth	r0, r0
  401862:	63cb      	str	r3, [r1, #60]	; 0x3c
  401864:	6026      	str	r6, [r4, #0]
  401866:	6126      	str	r6, [r4, #16]
  401868:	6165      	str	r5, [r4, #20]
  40186a:	b148      	cbz	r0, 401880 <setvbuf+0xe0>
  40186c:	f012 0f03 	tst.w	r2, #3
  401870:	bf18      	it	ne
  401872:	2500      	movne	r5, #0
  401874:	60a5      	str	r5, [r4, #8]
  401876:	2000      	movs	r0, #0
  401878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40187c:	f04f 30ff 	mov.w	r0, #4294967295
  401880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401884:	20000008 	.word	0x20000008
  401888:	00401ad1 	.word	0x00401ad1

0040188c <strlen>:
  40188c:	4603      	mov	r3, r0
  40188e:	f813 2b01 	ldrb.w	r2, [r3], #1
  401892:	2a00      	cmp	r2, #0
  401894:	d1fb      	bne.n	40188e <strlen+0x2>
  401896:	1a18      	subs	r0, r3, r0
  401898:	3801      	subs	r0, #1
  40189a:	4770      	bx	lr

0040189c <__swsetup_r>:
  40189c:	b538      	push	{r3, r4, r5, lr}
  40189e:	4b2c      	ldr	r3, [pc, #176]	; (401950 <__swsetup_r+0xb4>)
  4018a0:	4605      	mov	r5, r0
  4018a2:	6818      	ldr	r0, [r3, #0]
  4018a4:	460c      	mov	r4, r1
  4018a6:	b118      	cbz	r0, 4018b0 <__swsetup_r+0x14>
  4018a8:	6b82      	ldr	r2, [r0, #56]	; 0x38
  4018aa:	b90a      	cbnz	r2, 4018b0 <__swsetup_r+0x14>
  4018ac:	f000 f956 	bl	401b5c <__sinit>
  4018b0:	89a0      	ldrh	r0, [r4, #12]
  4018b2:	f000 0108 	and.w	r1, r0, #8
  4018b6:	b20b      	sxth	r3, r1
  4018b8:	bb0b      	cbnz	r3, 4018fe <__swsetup_r+0x62>
  4018ba:	f000 0210 	and.w	r2, r0, #16
  4018be:	b211      	sxth	r1, r2
  4018c0:	b911      	cbnz	r1, 4018c8 <__swsetup_r+0x2c>
  4018c2:	f04f 30ff 	mov.w	r0, #4294967295
  4018c6:	bd38      	pop	{r3, r4, r5, pc}
  4018c8:	f000 0004 	and.w	r0, r0, #4
  4018cc:	b203      	sxth	r3, r0
  4018ce:	b193      	cbz	r3, 4018f6 <__swsetup_r+0x5a>
  4018d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4018d2:	b141      	cbz	r1, 4018e6 <__swsetup_r+0x4a>
  4018d4:	f104 0240 	add.w	r2, r4, #64	; 0x40
  4018d8:	4291      	cmp	r1, r2
  4018da:	d002      	beq.n	4018e2 <__swsetup_r+0x46>
  4018dc:	4628      	mov	r0, r5
  4018de:	f000 fa07 	bl	401cf0 <_free_r>
  4018e2:	2100      	movs	r1, #0
  4018e4:	6321      	str	r1, [r4, #48]	; 0x30
  4018e6:	89a0      	ldrh	r0, [r4, #12]
  4018e8:	6921      	ldr	r1, [r4, #16]
  4018ea:	f020 0324 	bic.w	r3, r0, #36	; 0x24
  4018ee:	2200      	movs	r2, #0
  4018f0:	81a3      	strh	r3, [r4, #12]
  4018f2:	6062      	str	r2, [r4, #4]
  4018f4:	6021      	str	r1, [r4, #0]
  4018f6:	89a0      	ldrh	r0, [r4, #12]
  4018f8:	f040 0308 	orr.w	r3, r0, #8
  4018fc:	81a3      	strh	r3, [r4, #12]
  4018fe:	6922      	ldr	r2, [r4, #16]
  401900:	b94a      	cbnz	r2, 401916 <__swsetup_r+0x7a>
  401902:	89a1      	ldrh	r1, [r4, #12]
  401904:	f401 7020 	and.w	r0, r1, #640	; 0x280
  401908:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  40190c:	d003      	beq.n	401916 <__swsetup_r+0x7a>
  40190e:	4628      	mov	r0, r5
  401910:	4621      	mov	r1, r4
  401912:	f000 fc41 	bl	402198 <__smakebuf_r>
  401916:	89a3      	ldrh	r3, [r4, #12]
  401918:	f013 0201 	ands.w	r2, r3, #1
  40191c:	d005      	beq.n	40192a <__swsetup_r+0x8e>
  40191e:	6961      	ldr	r1, [r4, #20]
  401920:	2200      	movs	r2, #0
  401922:	4248      	negs	r0, r1
  401924:	60a2      	str	r2, [r4, #8]
  401926:	61a0      	str	r0, [r4, #24]
  401928:	e007      	b.n	40193a <__swsetup_r+0x9e>
  40192a:	f003 0102 	and.w	r1, r3, #2
  40192e:	b208      	sxth	r0, r1
  401930:	b908      	cbnz	r0, 401936 <__swsetup_r+0x9a>
  401932:	6963      	ldr	r3, [r4, #20]
  401934:	e000      	b.n	401938 <__swsetup_r+0x9c>
  401936:	4613      	mov	r3, r2
  401938:	60a3      	str	r3, [r4, #8]
  40193a:	6923      	ldr	r3, [r4, #16]
  40193c:	b933      	cbnz	r3, 40194c <__swsetup_r+0xb0>
  40193e:	89a2      	ldrh	r2, [r4, #12]
  401940:	f002 0180 	and.w	r1, r2, #128	; 0x80
  401944:	b208      	sxth	r0, r1
  401946:	2800      	cmp	r0, #0
  401948:	d1bb      	bne.n	4018c2 <__swsetup_r+0x26>
  40194a:	bd38      	pop	{r3, r4, r5, pc}
  40194c:	2000      	movs	r0, #0
  40194e:	bd38      	pop	{r3, r4, r5, pc}
  401950:	20000008 	.word	0x20000008

00401954 <register_fini>:
  401954:	4b02      	ldr	r3, [pc, #8]	; (401960 <register_fini+0xc>)
  401956:	b113      	cbz	r3, 40195e <register_fini+0xa>
  401958:	4802      	ldr	r0, [pc, #8]	; (401964 <register_fini+0x10>)
  40195a:	f000 b805 	b.w	401968 <atexit>
  40195e:	4770      	bx	lr
  401960:	00000000 	.word	0x00000000
  401964:	00401695 	.word	0x00401695

00401968 <atexit>:
  401968:	4601      	mov	r1, r0
  40196a:	2000      	movs	r0, #0
  40196c:	4602      	mov	r2, r0
  40196e:	4603      	mov	r3, r0
  401970:	f7ff be42 	b.w	4015f8 <__register_exitproc>

00401974 <_fflush_r>:
  401974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401978:	460c      	mov	r4, r1
  40197a:	4605      	mov	r5, r0
  40197c:	b118      	cbz	r0, 401986 <_fflush_r+0x12>
  40197e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401980:	b90b      	cbnz	r3, 401986 <_fflush_r+0x12>
  401982:	f000 f8eb 	bl	401b5c <__sinit>
  401986:	89a2      	ldrh	r2, [r4, #12]
  401988:	b332      	cbz	r2, 4019d8 <_fflush_r+0x64>
  40198a:	f002 0008 	and.w	r0, r2, #8
  40198e:	b201      	sxth	r1, r0
  401990:	2900      	cmp	r1, #0
  401992:	d162      	bne.n	401a5a <_fflush_r+0xe6>
  401994:	6861      	ldr	r1, [r4, #4]
  401996:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
  40199a:	2900      	cmp	r1, #0
  40199c:	81a0      	strh	r0, [r4, #12]
  40199e:	dc02      	bgt.n	4019a6 <_fflush_r+0x32>
  4019a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019a2:	2b00      	cmp	r3, #0
  4019a4:	dd18      	ble.n	4019d8 <_fflush_r+0x64>
  4019a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4019a8:	b1b6      	cbz	r6, 4019d8 <_fflush_r+0x64>
  4019aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  4019ae:	2000      	movs	r0, #0
  4019b0:	b212      	sxth	r2, r2
  4019b2:	682f      	ldr	r7, [r5, #0]
  4019b4:	6028      	str	r0, [r5, #0]
  4019b6:	b10a      	cbz	r2, 4019bc <_fflush_r+0x48>
  4019b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4019ba:	e010      	b.n	4019de <_fflush_r+0x6a>
  4019bc:	2301      	movs	r3, #1
  4019be:	4628      	mov	r0, r5
  4019c0:	69e1      	ldr	r1, [r4, #28]
  4019c2:	47b0      	blx	r6
  4019c4:	4602      	mov	r2, r0
  4019c6:	3001      	adds	r0, #1
  4019c8:	d109      	bne.n	4019de <_fflush_r+0x6a>
  4019ca:	6829      	ldr	r1, [r5, #0]
  4019cc:	b139      	cbz	r1, 4019de <_fflush_r+0x6a>
  4019ce:	291d      	cmp	r1, #29
  4019d0:	d001      	beq.n	4019d6 <_fflush_r+0x62>
  4019d2:	2916      	cmp	r1, #22
  4019d4:	d14f      	bne.n	401a76 <_fflush_r+0x102>
  4019d6:	602f      	str	r7, [r5, #0]
  4019d8:	2000      	movs	r0, #0
  4019da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019de:	89a6      	ldrh	r6, [r4, #12]
  4019e0:	f006 0104 	and.w	r1, r6, #4
  4019e4:	b20b      	sxth	r3, r1
  4019e6:	b12b      	cbz	r3, 4019f4 <_fflush_r+0x80>
  4019e8:	6860      	ldr	r0, [r4, #4]
  4019ea:	6b26      	ldr	r6, [r4, #48]	; 0x30
  4019ec:	1a12      	subs	r2, r2, r0
  4019ee:	b10e      	cbz	r6, 4019f4 <_fflush_r+0x80>
  4019f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  4019f2:	1a52      	subs	r2, r2, r1
  4019f4:	69e1      	ldr	r1, [r4, #28]
  4019f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  4019f8:	2300      	movs	r3, #0
  4019fa:	4628      	mov	r0, r5
  4019fc:	47b0      	blx	r6
  4019fe:	1c41      	adds	r1, r0, #1
  401a00:	d105      	bne.n	401a0e <_fflush_r+0x9a>
  401a02:	682a      	ldr	r2, [r5, #0]
  401a04:	b11a      	cbz	r2, 401a0e <_fflush_r+0x9a>
  401a06:	2a1d      	cmp	r2, #29
  401a08:	d001      	beq.n	401a0e <_fflush_r+0x9a>
  401a0a:	2a16      	cmp	r2, #22
  401a0c:	d11f      	bne.n	401a4e <_fflush_r+0xda>
  401a0e:	89a3      	ldrh	r3, [r4, #12]
  401a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  401a14:	2100      	movs	r1, #0
  401a16:	81a2      	strh	r2, [r4, #12]
  401a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  401a1c:	6922      	ldr	r2, [r4, #16]
  401a1e:	6061      	str	r1, [r4, #4]
  401a20:	b219      	sxth	r1, r3
  401a22:	6022      	str	r2, [r4, #0]
  401a24:	b121      	cbz	r1, 401a30 <_fflush_r+0xbc>
  401a26:	1c42      	adds	r2, r0, #1
  401a28:	d101      	bne.n	401a2e <_fflush_r+0xba>
  401a2a:	682a      	ldr	r2, [r5, #0]
  401a2c:	b902      	cbnz	r2, 401a30 <_fflush_r+0xbc>
  401a2e:	6520      	str	r0, [r4, #80]	; 0x50
  401a30:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401a32:	602f      	str	r7, [r5, #0]
  401a34:	2900      	cmp	r1, #0
  401a36:	d0cf      	beq.n	4019d8 <_fflush_r+0x64>
  401a38:	f104 0040 	add.w	r0, r4, #64	; 0x40
  401a3c:	4281      	cmp	r1, r0
  401a3e:	d002      	beq.n	401a46 <_fflush_r+0xd2>
  401a40:	4628      	mov	r0, r5
  401a42:	f000 f955 	bl	401cf0 <_free_r>
  401a46:	2000      	movs	r0, #0
  401a48:	6320      	str	r0, [r4, #48]	; 0x30
  401a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a4e:	89a3      	ldrh	r3, [r4, #12]
  401a50:	f043 0140 	orr.w	r1, r3, #64	; 0x40
  401a54:	81a1      	strh	r1, [r4, #12]
  401a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a5a:	6926      	ldr	r6, [r4, #16]
  401a5c:	2e00      	cmp	r6, #0
  401a5e:	d0bb      	beq.n	4019d8 <_fflush_r+0x64>
  401a60:	0792      	lsls	r2, r2, #30
  401a62:	6823      	ldr	r3, [r4, #0]
  401a64:	bf08      	it	eq
  401a66:	6962      	ldreq	r2, [r4, #20]
  401a68:	6026      	str	r6, [r4, #0]
  401a6a:	bf18      	it	ne
  401a6c:	2200      	movne	r2, #0
  401a6e:	ebc6 0803 	rsb	r8, r6, r3
  401a72:	60a2      	str	r2, [r4, #8]
  401a74:	e012      	b.n	401a9c <_fflush_r+0x128>
  401a76:	89a3      	ldrh	r3, [r4, #12]
  401a78:	f043 0040 	orr.w	r0, r3, #64	; 0x40
  401a7c:	81a0      	strh	r0, [r4, #12]
  401a7e:	f04f 30ff 	mov.w	r0, #4294967295
  401a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a86:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401a88:	69e1      	ldr	r1, [r4, #28]
  401a8a:	4628      	mov	r0, r5
  401a8c:	4632      	mov	r2, r6
  401a8e:	4643      	mov	r3, r8
  401a90:	47b8      	blx	r7
  401a92:	2800      	cmp	r0, #0
  401a94:	ddef      	ble.n	401a76 <_fflush_r+0x102>
  401a96:	1836      	adds	r6, r6, r0
  401a98:	ebc0 0808 	rsb	r8, r0, r8
  401a9c:	f1b8 0f00 	cmp.w	r8, #0
  401aa0:	dcf1      	bgt.n	401a86 <_fflush_r+0x112>
  401aa2:	e799      	b.n	4019d8 <_fflush_r+0x64>

00401aa4 <fflush>:
  401aa4:	4601      	mov	r1, r0
  401aa6:	b920      	cbnz	r0, 401ab2 <fflush+0xe>
  401aa8:	4804      	ldr	r0, [pc, #16]	; (401abc <fflush+0x18>)
  401aaa:	4905      	ldr	r1, [pc, #20]	; (401ac0 <fflush+0x1c>)
  401aac:	6800      	ldr	r0, [r0, #0]
  401aae:	f000 bb51 	b.w	402154 <_fwalk_reent>
  401ab2:	4b04      	ldr	r3, [pc, #16]	; (401ac4 <fflush+0x20>)
  401ab4:	6818      	ldr	r0, [r3, #0]
  401ab6:	f7ff bf5d 	b.w	401974 <_fflush_r>
  401aba:	bf00      	nop
  401abc:	00402c68 	.word	0x00402c68
  401ac0:	00401975 	.word	0x00401975
  401ac4:	20000008 	.word	0x20000008

00401ac8 <__fp_lock>:
  401ac8:	2000      	movs	r0, #0
  401aca:	4770      	bx	lr

00401acc <__fp_unlock>:
  401acc:	2000      	movs	r0, #0
  401ace:	4770      	bx	lr

00401ad0 <_cleanup_r>:
  401ad0:	4901      	ldr	r1, [pc, #4]	; (401ad8 <_cleanup_r+0x8>)
  401ad2:	f000 bb1e 	b.w	402112 <_fwalk>
  401ad6:	bf00      	nop
  401ad8:	00402b51 	.word	0x00402b51

00401adc <std.isra.0>:
  401adc:	2300      	movs	r3, #0
  401ade:	b510      	push	{r4, lr}
  401ae0:	4604      	mov	r4, r0
  401ae2:	6003      	str	r3, [r0, #0]
  401ae4:	6043      	str	r3, [r0, #4]
  401ae6:	6083      	str	r3, [r0, #8]
  401ae8:	8181      	strh	r1, [r0, #12]
  401aea:	6643      	str	r3, [r0, #100]	; 0x64
  401aec:	81c2      	strh	r2, [r0, #14]
  401aee:	6103      	str	r3, [r0, #16]
  401af0:	6143      	str	r3, [r0, #20]
  401af2:	6183      	str	r3, [r0, #24]
  401af4:	4619      	mov	r1, r3
  401af6:	2208      	movs	r2, #8
  401af8:	f100 005c 	add.w	r0, r0, #92	; 0x5c
  401afc:	f7ff fe06 	bl	40170c <memset>
  401b00:	4804      	ldr	r0, [pc, #16]	; (401b14 <std.isra.0+0x38>)
  401b02:	4905      	ldr	r1, [pc, #20]	; (401b18 <std.isra.0+0x3c>)
  401b04:	4a05      	ldr	r2, [pc, #20]	; (401b1c <std.isra.0+0x40>)
  401b06:	4b06      	ldr	r3, [pc, #24]	; (401b20 <std.isra.0+0x44>)
  401b08:	61e4      	str	r4, [r4, #28]
  401b0a:	6220      	str	r0, [r4, #32]
  401b0c:	6261      	str	r1, [r4, #36]	; 0x24
  401b0e:	62a2      	str	r2, [r4, #40]	; 0x28
  401b10:	62e3      	str	r3, [r4, #44]	; 0x2c
  401b12:	bd10      	pop	{r4, pc}
  401b14:	004029f9 	.word	0x004029f9
  401b18:	00402a1f 	.word	0x00402a1f
  401b1c:	00402a5b 	.word	0x00402a5b
  401b20:	00402a7f 	.word	0x00402a7f

00401b24 <__sfmoreglue>:
  401b24:	b570      	push	{r4, r5, r6, lr}
  401b26:	2568      	movs	r5, #104	; 0x68
  401b28:	434d      	muls	r5, r1
  401b2a:	460e      	mov	r6, r1
  401b2c:	f105 010c 	add.w	r1, r5, #12
  401b30:	f000 fbae 	bl	402290 <_malloc_r>
  401b34:	4604      	mov	r4, r0
  401b36:	b140      	cbz	r0, 401b4a <__sfmoreglue+0x26>
  401b38:	f100 000c 	add.w	r0, r0, #12
  401b3c:	2100      	movs	r1, #0
  401b3e:	e884 0042 	stmia.w	r4, {r1, r6}
  401b42:	60a0      	str	r0, [r4, #8]
  401b44:	462a      	mov	r2, r5
  401b46:	f7ff fde1 	bl	40170c <memset>
  401b4a:	4620      	mov	r0, r4
  401b4c:	bd70      	pop	{r4, r5, r6, pc}

00401b4e <_cleanup>:
  401b4e:	4b02      	ldr	r3, [pc, #8]	; (401b58 <_cleanup+0xa>)
  401b50:	6818      	ldr	r0, [r3, #0]
  401b52:	f7ff bfbd 	b.w	401ad0 <_cleanup_r>
  401b56:	bf00      	nop
  401b58:	00402c68 	.word	0x00402c68

00401b5c <__sinit>:
  401b5c:	b538      	push	{r3, r4, r5, lr}
  401b5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401b60:	4604      	mov	r4, r0
  401b62:	b9eb      	cbnz	r3, 401ba0 <__sinit+0x44>
  401b64:	4a0f      	ldr	r2, [pc, #60]	; (401ba4 <__sinit+0x48>)
  401b66:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
  401b6a:	2501      	movs	r5, #1
  401b6c:	63c2      	str	r2, [r0, #60]	; 0x3c
  401b6e:	6385      	str	r5, [r0, #56]	; 0x38
  401b70:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
  401b74:	2003      	movs	r0, #3
  401b76:	461a      	mov	r2, r3
  401b78:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
  401b7c:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
  401b80:	6860      	ldr	r0, [r4, #4]
  401b82:	2104      	movs	r1, #4
  401b84:	f7ff ffaa 	bl	401adc <std.isra.0>
  401b88:	68a0      	ldr	r0, [r4, #8]
  401b8a:	2109      	movs	r1, #9
  401b8c:	462a      	mov	r2, r5
  401b8e:	f7ff ffa5 	bl	401adc <std.isra.0>
  401b92:	68e0      	ldr	r0, [r4, #12]
  401b94:	2112      	movs	r1, #18
  401b96:	2202      	movs	r2, #2
  401b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401b9c:	f7ff bf9e 	b.w	401adc <std.isra.0>
  401ba0:	bd38      	pop	{r3, r4, r5, pc}
  401ba2:	bf00      	nop
  401ba4:	00401ad1 	.word	0x00401ad1

00401ba8 <__sfp>:
  401ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401baa:	4b1d      	ldr	r3, [pc, #116]	; (401c20 <__sfp+0x78>)
  401bac:	681e      	ldr	r6, [r3, #0]
  401bae:	4607      	mov	r7, r0
  401bb0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
  401bb2:	b910      	cbnz	r0, 401bba <__sfp+0x12>
  401bb4:	4630      	mov	r0, r6
  401bb6:	f7ff ffd1 	bl	401b5c <__sinit>
  401bba:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
  401bbe:	68b4      	ldr	r4, [r6, #8]
  401bc0:	6871      	ldr	r1, [r6, #4]
  401bc2:	3901      	subs	r1, #1
  401bc4:	d404      	bmi.n	401bd0 <__sfp+0x28>
  401bc6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  401bca:	b185      	cbz	r5, 401bee <__sfp+0x46>
  401bcc:	3468      	adds	r4, #104	; 0x68
  401bce:	e7f8      	b.n	401bc2 <__sfp+0x1a>
  401bd0:	6832      	ldr	r2, [r6, #0]
  401bd2:	b10a      	cbz	r2, 401bd8 <__sfp+0x30>
  401bd4:	6836      	ldr	r6, [r6, #0]
  401bd6:	e7f2      	b.n	401bbe <__sfp+0x16>
  401bd8:	4638      	mov	r0, r7
  401bda:	2104      	movs	r1, #4
  401bdc:	f7ff ffa2 	bl	401b24 <__sfmoreglue>
  401be0:	6030      	str	r0, [r6, #0]
  401be2:	2800      	cmp	r0, #0
  401be4:	d1f6      	bne.n	401bd4 <__sfp+0x2c>
  401be6:	240c      	movs	r4, #12
  401be8:	603c      	str	r4, [r7, #0]
  401bea:	4604      	mov	r4, r0
  401bec:	e015      	b.n	401c1a <__sfp+0x72>
  401bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401bf2:	2001      	movs	r0, #1
  401bf4:	81a0      	strh	r0, [r4, #12]
  401bf6:	81e3      	strh	r3, [r4, #14]
  401bf8:	6665      	str	r5, [r4, #100]	; 0x64
  401bfa:	6025      	str	r5, [r4, #0]
  401bfc:	60a5      	str	r5, [r4, #8]
  401bfe:	6065      	str	r5, [r4, #4]
  401c00:	6125      	str	r5, [r4, #16]
  401c02:	6165      	str	r5, [r4, #20]
  401c04:	61a5      	str	r5, [r4, #24]
  401c06:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  401c0a:	4629      	mov	r1, r5
  401c0c:	2208      	movs	r2, #8
  401c0e:	f7ff fd7d 	bl	40170c <memset>
  401c12:	6325      	str	r5, [r4, #48]	; 0x30
  401c14:	6365      	str	r5, [r4, #52]	; 0x34
  401c16:	6465      	str	r5, [r4, #68]	; 0x44
  401c18:	64a5      	str	r5, [r4, #72]	; 0x48
  401c1a:	4620      	mov	r0, r4
  401c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c1e:	bf00      	nop
  401c20:	00402c68 	.word	0x00402c68

00401c24 <__sfp_lock_acquire>:
  401c24:	4770      	bx	lr

00401c26 <__sfp_lock_release>:
  401c26:	4770      	bx	lr

00401c28 <__sinit_lock_acquire>:
  401c28:	4770      	bx	lr

00401c2a <__sinit_lock_release>:
  401c2a:	4770      	bx	lr

00401c2c <__fp_lock_all>:
  401c2c:	4b02      	ldr	r3, [pc, #8]	; (401c38 <__fp_lock_all+0xc>)
  401c2e:	4903      	ldr	r1, [pc, #12]	; (401c3c <__fp_lock_all+0x10>)
  401c30:	6818      	ldr	r0, [r3, #0]
  401c32:	f000 ba6e 	b.w	402112 <_fwalk>
  401c36:	bf00      	nop
  401c38:	20000008 	.word	0x20000008
  401c3c:	00401ac9 	.word	0x00401ac9

00401c40 <__fp_unlock_all>:
  401c40:	4b02      	ldr	r3, [pc, #8]	; (401c4c <__fp_unlock_all+0xc>)
  401c42:	4903      	ldr	r1, [pc, #12]	; (401c50 <__fp_unlock_all+0x10>)
  401c44:	6818      	ldr	r0, [r3, #0]
  401c46:	f000 ba64 	b.w	402112 <_fwalk>
  401c4a:	bf00      	nop
  401c4c:	20000008 	.word	0x20000008
  401c50:	00401acd 	.word	0x00401acd

00401c54 <_malloc_trim_r>:
  401c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401c56:	4d23      	ldr	r5, [pc, #140]	; (401ce4 <_malloc_trim_r+0x90>)
  401c58:	460e      	mov	r6, r1
  401c5a:	4604      	mov	r4, r0
  401c5c:	f000 fd4b 	bl	4026f6 <__malloc_lock>
  401c60:	68ab      	ldr	r3, [r5, #8]
  401c62:	685f      	ldr	r7, [r3, #4]
  401c64:	f027 0703 	bic.w	r7, r7, #3
  401c68:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
  401c6c:	1b81      	subs	r1, r0, r6
  401c6e:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
  401c72:	f022 060f 	bic.w	r6, r2, #15
  401c76:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  401c7a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  401c7e:	da04      	bge.n	401c8a <_malloc_trim_r+0x36>
  401c80:	4620      	mov	r0, r4
  401c82:	f000 fd39 	bl	4026f8 <__malloc_unlock>
  401c86:	2000      	movs	r0, #0
  401c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c8a:	2100      	movs	r1, #0
  401c8c:	4620      	mov	r0, r4
  401c8e:	f000 fea3 	bl	4029d8 <_sbrk_r>
  401c92:	68ab      	ldr	r3, [r5, #8]
  401c94:	19d9      	adds	r1, r3, r7
  401c96:	4288      	cmp	r0, r1
  401c98:	d1f2      	bne.n	401c80 <_malloc_trim_r+0x2c>
  401c9a:	4271      	negs	r1, r6
  401c9c:	4620      	mov	r0, r4
  401c9e:	f000 fe9b 	bl	4029d8 <_sbrk_r>
  401ca2:	3001      	adds	r0, #1
  401ca4:	d110      	bne.n	401cc8 <_malloc_trim_r+0x74>
  401ca6:	2100      	movs	r1, #0
  401ca8:	4620      	mov	r0, r4
  401caa:	f000 fe95 	bl	4029d8 <_sbrk_r>
  401cae:	68ab      	ldr	r3, [r5, #8]
  401cb0:	1ac2      	subs	r2, r0, r3
  401cb2:	2a0f      	cmp	r2, #15
  401cb4:	dde4      	ble.n	401c80 <_malloc_trim_r+0x2c>
  401cb6:	490c      	ldr	r1, [pc, #48]	; (401ce8 <_malloc_trim_r+0x94>)
  401cb8:	6809      	ldr	r1, [r1, #0]
  401cba:	1a40      	subs	r0, r0, r1
  401cbc:	490b      	ldr	r1, [pc, #44]	; (401cec <_malloc_trim_r+0x98>)
  401cbe:	f042 0201 	orr.w	r2, r2, #1
  401cc2:	6008      	str	r0, [r1, #0]
  401cc4:	605a      	str	r2, [r3, #4]
  401cc6:	e7db      	b.n	401c80 <_malloc_trim_r+0x2c>
  401cc8:	4b08      	ldr	r3, [pc, #32]	; (401cec <_malloc_trim_r+0x98>)
  401cca:	68a8      	ldr	r0, [r5, #8]
  401ccc:	681a      	ldr	r2, [r3, #0]
  401cce:	1bbf      	subs	r7, r7, r6
  401cd0:	f047 0701 	orr.w	r7, r7, #1
  401cd4:	6047      	str	r7, [r0, #4]
  401cd6:	1b96      	subs	r6, r2, r6
  401cd8:	4620      	mov	r0, r4
  401cda:	601e      	str	r6, [r3, #0]
  401cdc:	f000 fd0c 	bl	4026f8 <__malloc_unlock>
  401ce0:	2001      	movs	r0, #1
  401ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401ce4:	20000438 	.word	0x20000438
  401ce8:	20000840 	.word	0x20000840
  401cec:	200008e8 	.word	0x200008e8

00401cf0 <_free_r>:
  401cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401cf2:	4606      	mov	r6, r0
  401cf4:	460d      	mov	r5, r1
  401cf6:	2900      	cmp	r1, #0
  401cf8:	f000 80a6 	beq.w	401e48 <_free_r+0x158>
  401cfc:	f000 fcfb 	bl	4026f6 <__malloc_lock>
  401d00:	f855 cc04 	ldr.w	ip, [r5, #-4]
  401d04:	4f51      	ldr	r7, [pc, #324]	; (401e4c <_free_r+0x15c>)
  401d06:	f1a5 0308 	sub.w	r3, r5, #8
  401d0a:	f02c 0201 	bic.w	r2, ip, #1
  401d0e:	189c      	adds	r4, r3, r2
  401d10:	68b9      	ldr	r1, [r7, #8]
  401d12:	6860      	ldr	r0, [r4, #4]
  401d14:	428c      	cmp	r4, r1
  401d16:	f020 0003 	bic.w	r0, r0, #3
  401d1a:	f00c 0101 	and.w	r1, ip, #1
  401d1e:	d11c      	bne.n	401d5a <_free_r+0x6a>
  401d20:	1882      	adds	r2, r0, r2
  401d22:	b939      	cbnz	r1, 401d34 <_free_r+0x44>
  401d24:	f855 1c08 	ldr.w	r1, [r5, #-8]
  401d28:	1a5b      	subs	r3, r3, r1
  401d2a:	1852      	adds	r2, r2, r1
  401d2c:	6898      	ldr	r0, [r3, #8]
  401d2e:	68d9      	ldr	r1, [r3, #12]
  401d30:	60c1      	str	r1, [r0, #12]
  401d32:	6088      	str	r0, [r1, #8]
  401d34:	4845      	ldr	r0, [pc, #276]	; (401e4c <_free_r+0x15c>)
  401d36:	f042 0101 	orr.w	r1, r2, #1
  401d3a:	6059      	str	r1, [r3, #4]
  401d3c:	6083      	str	r3, [r0, #8]
  401d3e:	4b44      	ldr	r3, [pc, #272]	; (401e50 <_free_r+0x160>)
  401d40:	6819      	ldr	r1, [r3, #0]
  401d42:	428a      	cmp	r2, r1
  401d44:	d304      	bcc.n	401d50 <_free_r+0x60>
  401d46:	4a43      	ldr	r2, [pc, #268]	; (401e54 <_free_r+0x164>)
  401d48:	4630      	mov	r0, r6
  401d4a:	6811      	ldr	r1, [r2, #0]
  401d4c:	f7ff ff82 	bl	401c54 <_malloc_trim_r>
  401d50:	4630      	mov	r0, r6
  401d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  401d56:	f000 bccf 	b.w	4026f8 <__malloc_unlock>
  401d5a:	6060      	str	r0, [r4, #4]
  401d5c:	b959      	cbnz	r1, 401d76 <_free_r+0x86>
  401d5e:	f855 5c08 	ldr.w	r5, [r5, #-8]
  401d62:	1b5b      	subs	r3, r3, r5
  401d64:	1952      	adds	r2, r2, r5
  401d66:	689d      	ldr	r5, [r3, #8]
  401d68:	3708      	adds	r7, #8
  401d6a:	42bd      	cmp	r5, r7
  401d6c:	d005      	beq.n	401d7a <_free_r+0x8a>
  401d6e:	68df      	ldr	r7, [r3, #12]
  401d70:	60ef      	str	r7, [r5, #12]
  401d72:	60bd      	str	r5, [r7, #8]
  401d74:	e002      	b.n	401d7c <_free_r+0x8c>
  401d76:	2100      	movs	r1, #0
  401d78:	e000      	b.n	401d7c <_free_r+0x8c>
  401d7a:	2101      	movs	r1, #1
  401d7c:	1825      	adds	r5, r4, r0
  401d7e:	686d      	ldr	r5, [r5, #4]
  401d80:	f015 0f01 	tst.w	r5, #1
  401d84:	d10f      	bne.n	401da6 <_free_r+0xb6>
  401d86:	1812      	adds	r2, r2, r0
  401d88:	b949      	cbnz	r1, 401d9e <_free_r+0xae>
  401d8a:	68a0      	ldr	r0, [r4, #8]
  401d8c:	4d32      	ldr	r5, [pc, #200]	; (401e58 <_free_r+0x168>)
  401d8e:	42a8      	cmp	r0, r5
  401d90:	d105      	bne.n	401d9e <_free_r+0xae>
  401d92:	60eb      	str	r3, [r5, #12]
  401d94:	60ab      	str	r3, [r5, #8]
  401d96:	60d8      	str	r0, [r3, #12]
  401d98:	6098      	str	r0, [r3, #8]
  401d9a:	2101      	movs	r1, #1
  401d9c:	e003      	b.n	401da6 <_free_r+0xb6>
  401d9e:	68e0      	ldr	r0, [r4, #12]
  401da0:	68a4      	ldr	r4, [r4, #8]
  401da2:	60e0      	str	r0, [r4, #12]
  401da4:	6084      	str	r4, [r0, #8]
  401da6:	f042 0001 	orr.w	r0, r2, #1
  401daa:	6058      	str	r0, [r3, #4]
  401dac:	509a      	str	r2, [r3, r2]
  401dae:	2900      	cmp	r1, #0
  401db0:	d1ce      	bne.n	401d50 <_free_r+0x60>
  401db2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  401db6:	d20c      	bcs.n	401dd2 <_free_r+0xe2>
  401db8:	4924      	ldr	r1, [pc, #144]	; (401e4c <_free_r+0x15c>)
  401dba:	08d2      	lsrs	r2, r2, #3
  401dbc:	1090      	asrs	r0, r2, #2
  401dbe:	2401      	movs	r4, #1
  401dc0:	fa04 f400 	lsl.w	r4, r4, r0
  401dc4:	6848      	ldr	r0, [r1, #4]
  401dc6:	4320      	orrs	r0, r4
  401dc8:	6048      	str	r0, [r1, #4]
  401dca:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  401dce:	6881      	ldr	r1, [r0, #8]
  401dd0:	e035      	b.n	401e3e <_free_r+0x14e>
  401dd2:	0a54      	lsrs	r4, r2, #9
  401dd4:	2c04      	cmp	r4, #4
  401dd6:	d802      	bhi.n	401dde <_free_r+0xee>
  401dd8:	0994      	lsrs	r4, r2, #6
  401dda:	3438      	adds	r4, #56	; 0x38
  401ddc:	e016      	b.n	401e0c <_free_r+0x11c>
  401dde:	2c14      	cmp	r4, #20
  401de0:	d801      	bhi.n	401de6 <_free_r+0xf6>
  401de2:	345b      	adds	r4, #91	; 0x5b
  401de4:	e012      	b.n	401e0c <_free_r+0x11c>
  401de6:	2c54      	cmp	r4, #84	; 0x54
  401de8:	d802      	bhi.n	401df0 <_free_r+0x100>
  401dea:	0b14      	lsrs	r4, r2, #12
  401dec:	346e      	adds	r4, #110	; 0x6e
  401dee:	e00d      	b.n	401e0c <_free_r+0x11c>
  401df0:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
  401df4:	d802      	bhi.n	401dfc <_free_r+0x10c>
  401df6:	0bd4      	lsrs	r4, r2, #15
  401df8:	3477      	adds	r4, #119	; 0x77
  401dfa:	e007      	b.n	401e0c <_free_r+0x11c>
  401dfc:	f240 5554 	movw	r5, #1364	; 0x554
  401e00:	42ac      	cmp	r4, r5
  401e02:	d802      	bhi.n	401e0a <_free_r+0x11a>
  401e04:	0c94      	lsrs	r4, r2, #18
  401e06:	347c      	adds	r4, #124	; 0x7c
  401e08:	e000      	b.n	401e0c <_free_r+0x11c>
  401e0a:	247e      	movs	r4, #126	; 0x7e
  401e0c:	4d0f      	ldr	r5, [pc, #60]	; (401e4c <_free_r+0x15c>)
  401e0e:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
  401e12:	6881      	ldr	r1, [r0, #8]
  401e14:	4281      	cmp	r1, r0
  401e16:	d10c      	bne.n	401e32 <_free_r+0x142>
  401e18:	6868      	ldr	r0, [r5, #4]
  401e1a:	2201      	movs	r2, #1
  401e1c:	10a4      	asrs	r4, r4, #2
  401e1e:	fa02 f404 	lsl.w	r4, r2, r4
  401e22:	ea44 0200 	orr.w	r2, r4, r0
  401e26:	606a      	str	r2, [r5, #4]
  401e28:	4608      	mov	r0, r1
  401e2a:	e008      	b.n	401e3e <_free_r+0x14e>
  401e2c:	6889      	ldr	r1, [r1, #8]
  401e2e:	4281      	cmp	r1, r0
  401e30:	d004      	beq.n	401e3c <_free_r+0x14c>
  401e32:	684c      	ldr	r4, [r1, #4]
  401e34:	f024 0403 	bic.w	r4, r4, #3
  401e38:	42a2      	cmp	r2, r4
  401e3a:	d3f7      	bcc.n	401e2c <_free_r+0x13c>
  401e3c:	68c8      	ldr	r0, [r1, #12]
  401e3e:	60d8      	str	r0, [r3, #12]
  401e40:	6099      	str	r1, [r3, #8]
  401e42:	6083      	str	r3, [r0, #8]
  401e44:	60cb      	str	r3, [r1, #12]
  401e46:	e783      	b.n	401d50 <_free_r+0x60>
  401e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401e4a:	bf00      	nop
  401e4c:	20000438 	.word	0x20000438
  401e50:	20000844 	.word	0x20000844
  401e54:	200008e4 	.word	0x200008e4
  401e58:	20000440 	.word	0x20000440

00401e5c <__sfvwrite_r>:
  401e5c:	6893      	ldr	r3, [r2, #8]
  401e5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e62:	4606      	mov	r6, r0
  401e64:	460c      	mov	r4, r1
  401e66:	4691      	mov	r9, r2
  401e68:	b90b      	cbnz	r3, 401e6e <__sfvwrite_r+0x12>
  401e6a:	2000      	movs	r0, #0
  401e6c:	e14f      	b.n	40210e <__sfvwrite_r+0x2b2>
  401e6e:	8988      	ldrh	r0, [r1, #12]
  401e70:	f000 0108 	and.w	r1, r0, #8
  401e74:	b20a      	sxth	r2, r1
  401e76:	b10a      	cbz	r2, 401e7c <__sfvwrite_r+0x20>
  401e78:	6923      	ldr	r3, [r4, #16]
  401e7a:	b95b      	cbnz	r3, 401e94 <__sfvwrite_r+0x38>
  401e7c:	4630      	mov	r0, r6
  401e7e:	4621      	mov	r1, r4
  401e80:	f7ff fd0c 	bl	40189c <__swsetup_r>
  401e84:	b130      	cbz	r0, 401e94 <__sfvwrite_r+0x38>
  401e86:	89a1      	ldrh	r1, [r4, #12]
  401e88:	2209      	movs	r2, #9
  401e8a:	f041 0040 	orr.w	r0, r1, #64	; 0x40
  401e8e:	81a0      	strh	r0, [r4, #12]
  401e90:	6032      	str	r2, [r6, #0]
  401e92:	e13a      	b.n	40210a <__sfvwrite_r+0x2ae>
  401e94:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
  401e98:	f8d9 8000 	ldr.w	r8, [r9]
  401e9c:	f00a 0c02 	and.w	ip, sl, #2
  401ea0:	fa0f f58c 	sxth.w	r5, ip
  401ea4:	b315      	cbz	r5, 401eec <__sfvwrite_r+0x90>
  401ea6:	f04f 0a00 	mov.w	sl, #0
  401eaa:	4657      	mov	r7, sl
  401eac:	b937      	cbnz	r7, 401ebc <__sfvwrite_r+0x60>
  401eae:	f8d8 a000 	ldr.w	sl, [r8]
  401eb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
  401eb6:	f108 0808 	add.w	r8, r8, #8
  401eba:	e7f7      	b.n	401eac <__sfvwrite_r+0x50>
  401ebc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
  401ec0:	bf34      	ite	cc
  401ec2:	463b      	movcc	r3, r7
  401ec4:	f44f 6380 	movcs.w	r3, #1024	; 0x400
  401ec8:	4630      	mov	r0, r6
  401eca:	69e1      	ldr	r1, [r4, #28]
  401ecc:	6a65      	ldr	r5, [r4, #36]	; 0x24
  401ece:	4652      	mov	r2, sl
  401ed0:	47a8      	blx	r5
  401ed2:	2800      	cmp	r0, #0
  401ed4:	f340 8115 	ble.w	402102 <__sfvwrite_r+0x2a6>
  401ed8:	f8d9 1008 	ldr.w	r1, [r9, #8]
  401edc:	4482      	add	sl, r0
  401ede:	1a3f      	subs	r7, r7, r0
  401ee0:	1a08      	subs	r0, r1, r0
  401ee2:	f8c9 0008 	str.w	r0, [r9, #8]
  401ee6:	2800      	cmp	r0, #0
  401ee8:	d1e0      	bne.n	401eac <__sfvwrite_r+0x50>
  401eea:	e7be      	b.n	401e6a <__sfvwrite_r+0xe>
  401eec:	f01a 0a01 	ands.w	sl, sl, #1
  401ef0:	d004      	beq.n	401efc <__sfvwrite_r+0xa0>
  401ef2:	46ab      	mov	fp, r5
  401ef4:	9501      	str	r5, [sp, #4]
  401ef6:	462f      	mov	r7, r5
  401ef8:	46aa      	mov	sl, r5
  401efa:	e0c7      	b.n	40208c <__sfvwrite_r+0x230>
  401efc:	4655      	mov	r5, sl
  401efe:	b935      	cbnz	r5, 401f0e <__sfvwrite_r+0xb2>
  401f00:	f8d8 a000 	ldr.w	sl, [r8]
  401f04:	f8d8 5004 	ldr.w	r5, [r8, #4]
  401f08:	f108 0808 	add.w	r8, r8, #8
  401f0c:	e7f7      	b.n	401efe <__sfvwrite_r+0xa2>
  401f0e:	89a2      	ldrh	r2, [r4, #12]
  401f10:	f8d4 b008 	ldr.w	fp, [r4, #8]
  401f14:	f402 7000 	and.w	r0, r2, #512	; 0x200
  401f18:	b203      	sxth	r3, r0
  401f1a:	2b00      	cmp	r3, #0
  401f1c:	d052      	beq.n	401fc4 <__sfvwrite_r+0x168>
  401f1e:	455d      	cmp	r5, fp
  401f20:	d340      	bcc.n	401fa4 <__sfvwrite_r+0x148>
  401f22:	f412 6f90 	tst.w	r2, #1152	; 0x480
  401f26:	d03b      	beq.n	401fa0 <__sfvwrite_r+0x144>
  401f28:	6921      	ldr	r1, [r4, #16]
  401f2a:	6827      	ldr	r7, [r4, #0]
  401f2c:	6963      	ldr	r3, [r4, #20]
  401f2e:	f04f 0b03 	mov.w	fp, #3
  401f32:	fb0b f303 	mul.w	r3, fp, r3
  401f36:	2002      	movs	r0, #2
  401f38:	1a7f      	subs	r7, r7, r1
  401f3a:	fb93 fcf0 	sdiv	ip, r3, r0
  401f3e:	1c7b      	adds	r3, r7, #1
  401f40:	1958      	adds	r0, r3, r5
  401f42:	f402 6280 	and.w	r2, r2, #1024	; 0x400
  401f46:	4584      	cmp	ip, r0
  401f48:	bf28      	it	cs
  401f4a:	4660      	movcs	r0, ip
  401f4c:	b213      	sxth	r3, r2
  401f4e:	9001      	str	r0, [sp, #4]
  401f50:	4630      	mov	r0, r6
  401f52:	b17b      	cbz	r3, 401f74 <__sfvwrite_r+0x118>
  401f54:	9901      	ldr	r1, [sp, #4]
  401f56:	f000 f99b 	bl	402290 <_malloc_r>
  401f5a:	4683      	mov	fp, r0
  401f5c:	b198      	cbz	r0, 401f86 <__sfvwrite_r+0x12a>
  401f5e:	6921      	ldr	r1, [r4, #16]
  401f60:	463a      	mov	r2, r7
  401f62:	f000 fba5 	bl	4026b0 <memcpy>
  401f66:	89a1      	ldrh	r1, [r4, #12]
  401f68:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
  401f6c:	f040 0280 	orr.w	r2, r0, #128	; 0x80
  401f70:	81a2      	strh	r2, [r4, #12]
  401f72:	e00b      	b.n	401f8c <__sfvwrite_r+0x130>
  401f74:	9a01      	ldr	r2, [sp, #4]
  401f76:	f000 fbc1 	bl	4026fc <_realloc_r>
  401f7a:	4683      	mov	fp, r0
  401f7c:	b930      	cbnz	r0, 401f8c <__sfvwrite_r+0x130>
  401f7e:	4630      	mov	r0, r6
  401f80:	6921      	ldr	r1, [r4, #16]
  401f82:	f7ff feb5 	bl	401cf0 <_free_r>
  401f86:	230c      	movs	r3, #12
  401f88:	6033      	str	r3, [r6, #0]
  401f8a:	e0ba      	b.n	402102 <__sfvwrite_r+0x2a6>
  401f8c:	9901      	ldr	r1, [sp, #4]
  401f8e:	f8c4 b010 	str.w	fp, [r4, #16]
  401f92:	eb0b 0307 	add.w	r3, fp, r7
  401f96:	1bcf      	subs	r7, r1, r7
  401f98:	6023      	str	r3, [r4, #0]
  401f9a:	6161      	str	r1, [r4, #20]
  401f9c:	46ab      	mov	fp, r5
  401f9e:	60a7      	str	r7, [r4, #8]
  401fa0:	455d      	cmp	r5, fp
  401fa2:	d200      	bcs.n	401fa6 <__sfvwrite_r+0x14a>
  401fa4:	46ab      	mov	fp, r5
  401fa6:	465a      	mov	r2, fp
  401fa8:	4651      	mov	r1, sl
  401faa:	6820      	ldr	r0, [r4, #0]
  401fac:	f000 fb89 	bl	4026c2 <memmove>
  401fb0:	68a0      	ldr	r0, [r4, #8]
  401fb2:	6823      	ldr	r3, [r4, #0]
  401fb4:	ebcb 0200 	rsb	r2, fp, r0
  401fb8:	eb03 010b 	add.w	r1, r3, fp
  401fbc:	60a2      	str	r2, [r4, #8]
  401fbe:	6021      	str	r1, [r4, #0]
  401fc0:	46ab      	mov	fp, r5
  401fc2:	e02a      	b.n	40201a <__sfvwrite_r+0x1be>
  401fc4:	6820      	ldr	r0, [r4, #0]
  401fc6:	6921      	ldr	r1, [r4, #16]
  401fc8:	4288      	cmp	r0, r1
  401fca:	d90f      	bls.n	401fec <__sfvwrite_r+0x190>
  401fcc:	455d      	cmp	r5, fp
  401fce:	d90d      	bls.n	401fec <__sfvwrite_r+0x190>
  401fd0:	4651      	mov	r1, sl
  401fd2:	465a      	mov	r2, fp
  401fd4:	f000 fb75 	bl	4026c2 <memmove>
  401fd8:	6822      	ldr	r2, [r4, #0]
  401fda:	eb02 000b 	add.w	r0, r2, fp
  401fde:	6020      	str	r0, [r4, #0]
  401fe0:	4621      	mov	r1, r4
  401fe2:	4630      	mov	r0, r6
  401fe4:	f7ff fcc6 	bl	401974 <_fflush_r>
  401fe8:	b1b8      	cbz	r0, 40201a <__sfvwrite_r+0x1be>
  401fea:	e08a      	b.n	402102 <__sfvwrite_r+0x2a6>
  401fec:	6963      	ldr	r3, [r4, #20]
  401fee:	429d      	cmp	r5, r3
  401ff0:	d308      	bcc.n	402004 <__sfvwrite_r+0x1a8>
  401ff2:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401ff4:	69e1      	ldr	r1, [r4, #28]
  401ff6:	4630      	mov	r0, r6
  401ff8:	4652      	mov	r2, sl
  401ffa:	47b8      	blx	r7
  401ffc:	f1b0 0b00 	subs.w	fp, r0, #0
  402000:	dc0b      	bgt.n	40201a <__sfvwrite_r+0x1be>
  402002:	e07e      	b.n	402102 <__sfvwrite_r+0x2a6>
  402004:	4651      	mov	r1, sl
  402006:	462a      	mov	r2, r5
  402008:	f000 fb5b 	bl	4026c2 <memmove>
  40200c:	68a2      	ldr	r2, [r4, #8]
  40200e:	6823      	ldr	r3, [r4, #0]
  402010:	1b50      	subs	r0, r2, r5
  402012:	1959      	adds	r1, r3, r5
  402014:	46ab      	mov	fp, r5
  402016:	60a0      	str	r0, [r4, #8]
  402018:	6021      	str	r1, [r4, #0]
  40201a:	f8d9 0008 	ldr.w	r0, [r9, #8]
  40201e:	ebcb 0200 	rsb	r2, fp, r0
  402022:	44da      	add	sl, fp
  402024:	ebcb 0505 	rsb	r5, fp, r5
  402028:	f8c9 2008 	str.w	r2, [r9, #8]
  40202c:	2a00      	cmp	r2, #0
  40202e:	f47f af66 	bne.w	401efe <__sfvwrite_r+0xa2>
  402032:	e71a      	b.n	401e6a <__sfvwrite_r+0xe>
  402034:	9801      	ldr	r0, [sp, #4]
  402036:	2800      	cmp	r0, #0
  402038:	d032      	beq.n	4020a0 <__sfvwrite_r+0x244>
  40203a:	6820      	ldr	r0, [r4, #0]
  40203c:	6921      	ldr	r1, [r4, #16]
  40203e:	68a5      	ldr	r5, [r4, #8]
  402040:	f8d4 e014 	ldr.w	lr, [r4, #20]
  402044:	45d3      	cmp	fp, sl
  402046:	bf34      	ite	cc
  402048:	465b      	movcc	r3, fp
  40204a:	4653      	movcs	r3, sl
  40204c:	4288      	cmp	r0, r1
  40204e:	d937      	bls.n	4020c0 <__sfvwrite_r+0x264>
  402050:	4475      	add	r5, lr
  402052:	42ab      	cmp	r3, r5
  402054:	dd34      	ble.n	4020c0 <__sfvwrite_r+0x264>
  402056:	4639      	mov	r1, r7
  402058:	462a      	mov	r2, r5
  40205a:	f000 fb32 	bl	4026c2 <memmove>
  40205e:	6820      	ldr	r0, [r4, #0]
  402060:	1943      	adds	r3, r0, r5
  402062:	6023      	str	r3, [r4, #0]
  402064:	4630      	mov	r0, r6
  402066:	4621      	mov	r1, r4
  402068:	f7ff fc84 	bl	401974 <_fflush_r>
  40206c:	2800      	cmp	r0, #0
  40206e:	d148      	bne.n	402102 <__sfvwrite_r+0x2a6>
  402070:	ebbb 0b05 	subs.w	fp, fp, r5
  402074:	d03d      	beq.n	4020f2 <__sfvwrite_r+0x296>
  402076:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40207a:	197f      	adds	r7, r7, r5
  40207c:	ebc5 0a0a 	rsb	sl, r5, sl
  402080:	1b55      	subs	r5, r2, r5
  402082:	f8c9 5008 	str.w	r5, [r9, #8]
  402086:	2d00      	cmp	r5, #0
  402088:	f43f aeef 	beq.w	401e6a <__sfvwrite_r+0xe>
  40208c:	f1ba 0f00 	cmp.w	sl, #0
  402090:	d1d0      	bne.n	402034 <__sfvwrite_r+0x1d8>
  402092:	2100      	movs	r1, #0
  402094:	e898 0480 	ldmia.w	r8, {r7, sl}
  402098:	9101      	str	r1, [sp, #4]
  40209a:	f108 0808 	add.w	r8, r8, #8
  40209e:	e7f5      	b.n	40208c <__sfvwrite_r+0x230>
  4020a0:	4638      	mov	r0, r7
  4020a2:	210a      	movs	r1, #10
  4020a4:	4652      	mov	r2, sl
  4020a6:	f000 faf5 	bl	402694 <memchr>
  4020aa:	b120      	cbz	r0, 4020b6 <__sfvwrite_r+0x25a>
  4020ac:	f100 0101 	add.w	r1, r0, #1
  4020b0:	ebc7 0b01 	rsb	fp, r7, r1
  4020b4:	e001      	b.n	4020ba <__sfvwrite_r+0x25e>
  4020b6:	f10a 0b01 	add.w	fp, sl, #1
  4020ba:	2201      	movs	r2, #1
  4020bc:	9201      	str	r2, [sp, #4]
  4020be:	e7bc      	b.n	40203a <__sfvwrite_r+0x1de>
  4020c0:	4573      	cmp	r3, lr
  4020c2:	db08      	blt.n	4020d6 <__sfvwrite_r+0x27a>
  4020c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  4020c6:	69e1      	ldr	r1, [r4, #28]
  4020c8:	4630      	mov	r0, r6
  4020ca:	463a      	mov	r2, r7
  4020cc:	4673      	mov	r3, lr
  4020ce:	47a8      	blx	r5
  4020d0:	1e05      	subs	r5, r0, #0
  4020d2:	dccd      	bgt.n	402070 <__sfvwrite_r+0x214>
  4020d4:	e015      	b.n	402102 <__sfvwrite_r+0x2a6>
  4020d6:	461a      	mov	r2, r3
  4020d8:	4639      	mov	r1, r7
  4020da:	9300      	str	r3, [sp, #0]
  4020dc:	f000 faf1 	bl	4026c2 <memmove>
  4020e0:	9b00      	ldr	r3, [sp, #0]
  4020e2:	6825      	ldr	r5, [r4, #0]
  4020e4:	68a0      	ldr	r0, [r4, #8]
  4020e6:	18e9      	adds	r1, r5, r3
  4020e8:	1ac2      	subs	r2, r0, r3
  4020ea:	60a2      	str	r2, [r4, #8]
  4020ec:	6021      	str	r1, [r4, #0]
  4020ee:	461d      	mov	r5, r3
  4020f0:	e7be      	b.n	402070 <__sfvwrite_r+0x214>
  4020f2:	4630      	mov	r0, r6
  4020f4:	4621      	mov	r1, r4
  4020f6:	f7ff fc3d 	bl	401974 <_fflush_r>
  4020fa:	b910      	cbnz	r0, 402102 <__sfvwrite_r+0x2a6>
  4020fc:	f8cd b004 	str.w	fp, [sp, #4]
  402100:	e7b9      	b.n	402076 <__sfvwrite_r+0x21a>
  402102:	89a2      	ldrh	r2, [r4, #12]
  402104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
  402108:	81a3      	strh	r3, [r4, #12]
  40210a:	f04f 30ff 	mov.w	r0, #4294967295
  40210e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00402112 <_fwalk>:
  402112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402116:	4604      	mov	r4, r0
  402118:	4688      	mov	r8, r1
  40211a:	f7ff fd83 	bl	401c24 <__sfp_lock_acquire>
  40211e:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
  402122:	2600      	movs	r6, #0
  402124:	b18c      	cbz	r4, 40214a <_fwalk+0x38>
  402126:	68a5      	ldr	r5, [r4, #8]
  402128:	6867      	ldr	r7, [r4, #4]
  40212a:	3f01      	subs	r7, #1
  40212c:	d40b      	bmi.n	402146 <_fwalk+0x34>
  40212e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402132:	b133      	cbz	r3, 402142 <_fwalk+0x30>
  402134:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  402138:	1c43      	adds	r3, r0, #1
  40213a:	d002      	beq.n	402142 <_fwalk+0x30>
  40213c:	4628      	mov	r0, r5
  40213e:	47c0      	blx	r8
  402140:	4306      	orrs	r6, r0
  402142:	3568      	adds	r5, #104	; 0x68
  402144:	e7f1      	b.n	40212a <_fwalk+0x18>
  402146:	6824      	ldr	r4, [r4, #0]
  402148:	e7ec      	b.n	402124 <_fwalk+0x12>
  40214a:	f7ff fd6c 	bl	401c26 <__sfp_lock_release>
  40214e:	4630      	mov	r0, r6
  402150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00402154 <_fwalk_reent>:
  402154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402158:	4680      	mov	r8, r0
  40215a:	4689      	mov	r9, r1
  40215c:	f7ff fd62 	bl	401c24 <__sfp_lock_acquire>
  402160:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
  402164:	2600      	movs	r6, #0
  402166:	b194      	cbz	r4, 40218e <_fwalk_reent+0x3a>
  402168:	68a5      	ldr	r5, [r4, #8]
  40216a:	6867      	ldr	r7, [r4, #4]
  40216c:	3f01      	subs	r7, #1
  40216e:	d40c      	bmi.n	40218a <_fwalk_reent+0x36>
  402170:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  402174:	b13b      	cbz	r3, 402186 <_fwalk_reent+0x32>
  402176:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  40217a:	1c43      	adds	r3, r0, #1
  40217c:	d003      	beq.n	402186 <_fwalk_reent+0x32>
  40217e:	4640      	mov	r0, r8
  402180:	4629      	mov	r1, r5
  402182:	47c8      	blx	r9
  402184:	4306      	orrs	r6, r0
  402186:	3568      	adds	r5, #104	; 0x68
  402188:	e7f0      	b.n	40216c <_fwalk_reent+0x18>
  40218a:	6824      	ldr	r4, [r4, #0]
  40218c:	e7eb      	b.n	402166 <_fwalk_reent+0x12>
  40218e:	f7ff fd4a 	bl	401c26 <__sfp_lock_release>
  402192:	4630      	mov	r0, r6
  402194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00402198 <__smakebuf_r>:
  402198:	b5f0      	push	{r4, r5, r6, r7, lr}
  40219a:	898b      	ldrh	r3, [r1, #12]
  40219c:	460c      	mov	r4, r1
  40219e:	f003 0102 	and.w	r1, r3, #2
  4021a2:	b20a      	sxth	r2, r1
  4021a4:	b091      	sub	sp, #68	; 0x44
  4021a6:	4606      	mov	r6, r0
  4021a8:	2a00      	cmp	r2, #0
  4021aa:	d13f      	bne.n	40222c <__smakebuf_r+0x94>
  4021ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4021b0:	2900      	cmp	r1, #0
  4021b2:	da0d      	bge.n	4021d0 <__smakebuf_r+0x38>
  4021b4:	89a7      	ldrh	r7, [r4, #12]
  4021b6:	f007 0280 	and.w	r2, r7, #128	; 0x80
  4021ba:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
  4021be:	b210      	sxth	r0, r2
  4021c0:	2800      	cmp	r0, #0
  4021c2:	bf0c      	ite	eq
  4021c4:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  4021c8:	2540      	movne	r5, #64	; 0x40
  4021ca:	81a3      	strh	r3, [r4, #12]
  4021cc:	2700      	movs	r7, #0
  4021ce:	e020      	b.n	402212 <__smakebuf_r+0x7a>
  4021d0:	aa01      	add	r2, sp, #4
  4021d2:	f000 fcc5 	bl	402b60 <_fstat_r>
  4021d6:	2800      	cmp	r0, #0
  4021d8:	dbec      	blt.n	4021b4 <__smakebuf_r+0x1c>
  4021da:	9802      	ldr	r0, [sp, #8]
  4021dc:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
  4021e0:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
  4021e4:	425f      	negs	r7, r3
  4021e6:	415f      	adcs	r7, r3
  4021e8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  4021ec:	d10b      	bne.n	402206 <__smakebuf_r+0x6e>
  4021ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  4021f0:	4a1d      	ldr	r2, [pc, #116]	; (402268 <__smakebuf_r+0xd0>)
  4021f2:	4291      	cmp	r1, r2
  4021f4:	d107      	bne.n	402206 <__smakebuf_r+0x6e>
  4021f6:	89a3      	ldrh	r3, [r4, #12]
  4021f8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4021fc:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
  402200:	81a1      	strh	r1, [r4, #12]
  402202:	64e5      	str	r5, [r4, #76]	; 0x4c
  402204:	e005      	b.n	402212 <__smakebuf_r+0x7a>
  402206:	89a0      	ldrh	r0, [r4, #12]
  402208:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
  40220c:	81a5      	strh	r5, [r4, #12]
  40220e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  402212:	4630      	mov	r0, r6
  402214:	4629      	mov	r1, r5
  402216:	f000 f83b 	bl	402290 <_malloc_r>
  40221a:	b970      	cbnz	r0, 40223a <__smakebuf_r+0xa2>
  40221c:	89a3      	ldrh	r3, [r4, #12]
  40221e:	f403 7200 	and.w	r2, r3, #512	; 0x200
  402222:	b210      	sxth	r0, r2
  402224:	b9e8      	cbnz	r0, 402262 <__smakebuf_r+0xca>
  402226:	f043 0102 	orr.w	r1, r3, #2
  40222a:	81a1      	strh	r1, [r4, #12]
  40222c:	f104 0343 	add.w	r3, r4, #67	; 0x43
  402230:	2201      	movs	r2, #1
  402232:	6023      	str	r3, [r4, #0]
  402234:	6123      	str	r3, [r4, #16]
  402236:	6162      	str	r2, [r4, #20]
  402238:	e013      	b.n	402262 <__smakebuf_r+0xca>
  40223a:	89a2      	ldrh	r2, [r4, #12]
  40223c:	490b      	ldr	r1, [pc, #44]	; (40226c <__smakebuf_r+0xd4>)
  40223e:	f042 0380 	orr.w	r3, r2, #128	; 0x80
  402242:	63f1      	str	r1, [r6, #60]	; 0x3c
  402244:	81a3      	strh	r3, [r4, #12]
  402246:	6020      	str	r0, [r4, #0]
  402248:	6120      	str	r0, [r4, #16]
  40224a:	6165      	str	r5, [r4, #20]
  40224c:	b14f      	cbz	r7, 402262 <__smakebuf_r+0xca>
  40224e:	4630      	mov	r0, r6
  402250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402254:	f000 fc96 	bl	402b84 <_isatty_r>
  402258:	b118      	cbz	r0, 402262 <__smakebuf_r+0xca>
  40225a:	89a0      	ldrh	r0, [r4, #12]
  40225c:	f040 0101 	orr.w	r1, r0, #1
  402260:	81a1      	strh	r1, [r4, #12]
  402262:	b011      	add	sp, #68	; 0x44
  402264:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402266:	bf00      	nop
  402268:	00402a5b 	.word	0x00402a5b
  40226c:	00401ad1 	.word	0x00401ad1

00402270 <malloc>:
  402270:	4b02      	ldr	r3, [pc, #8]	; (40227c <malloc+0xc>)
  402272:	4601      	mov	r1, r0
  402274:	6818      	ldr	r0, [r3, #0]
  402276:	f000 b80b 	b.w	402290 <_malloc_r>
  40227a:	bf00      	nop
  40227c:	20000008 	.word	0x20000008

00402280 <free>:
  402280:	4b02      	ldr	r3, [pc, #8]	; (40228c <free+0xc>)
  402282:	4601      	mov	r1, r0
  402284:	6818      	ldr	r0, [r3, #0]
  402286:	f7ff bd33 	b.w	401cf0 <_free_r>
  40228a:	bf00      	nop
  40228c:	20000008 	.word	0x20000008

00402290 <_malloc_r>:
  402290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402294:	f101 040b 	add.w	r4, r1, #11
  402298:	2c16      	cmp	r4, #22
  40229a:	4606      	mov	r6, r0
  40229c:	d903      	bls.n	4022a6 <_malloc_r+0x16>
  40229e:	f034 0407 	bics.w	r4, r4, #7
  4022a2:	d501      	bpl.n	4022a8 <_malloc_r+0x18>
  4022a4:	e002      	b.n	4022ac <_malloc_r+0x1c>
  4022a6:	2410      	movs	r4, #16
  4022a8:	428c      	cmp	r4, r1
  4022aa:	d202      	bcs.n	4022b2 <_malloc_r+0x22>
  4022ac:	250c      	movs	r5, #12
  4022ae:	6035      	str	r5, [r6, #0]
  4022b0:	e1d9      	b.n	402666 <_malloc_r+0x3d6>
  4022b2:	4630      	mov	r0, r6
  4022b4:	f000 fa1f 	bl	4026f6 <__malloc_lock>
  4022b8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  4022bc:	d214      	bcs.n	4022e8 <_malloc_r+0x58>
  4022be:	4da0      	ldr	r5, [pc, #640]	; (402540 <_malloc_r+0x2b0>)
  4022c0:	08e1      	lsrs	r1, r4, #3
  4022c2:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
  4022c6:	68c5      	ldr	r5, [r0, #12]
  4022c8:	4285      	cmp	r5, r0
  4022ca:	d105      	bne.n	4022d8 <_malloc_r+0x48>
  4022cc:	f105 0308 	add.w	r3, r5, #8
  4022d0:	696d      	ldr	r5, [r5, #20]
  4022d2:	1c8a      	adds	r2, r1, #2
  4022d4:	429d      	cmp	r5, r3
  4022d6:	d044      	beq.n	402362 <_malloc_r+0xd2>
  4022d8:	68e8      	ldr	r0, [r5, #12]
  4022da:	68a9      	ldr	r1, [r5, #8]
  4022dc:	686a      	ldr	r2, [r5, #4]
  4022de:	60c8      	str	r0, [r1, #12]
  4022e0:	f022 0303 	bic.w	r3, r2, #3
  4022e4:	6081      	str	r1, [r0, #8]
  4022e6:	e059      	b.n	40239c <_malloc_r+0x10c>
  4022e8:	0a62      	lsrs	r2, r4, #9
  4022ea:	d101      	bne.n	4022f0 <_malloc_r+0x60>
  4022ec:	08e2      	lsrs	r2, r4, #3
  4022ee:	e01b      	b.n	402328 <_malloc_r+0x98>
  4022f0:	2a04      	cmp	r2, #4
  4022f2:	d802      	bhi.n	4022fa <_malloc_r+0x6a>
  4022f4:	09a2      	lsrs	r2, r4, #6
  4022f6:	3238      	adds	r2, #56	; 0x38
  4022f8:	e016      	b.n	402328 <_malloc_r+0x98>
  4022fa:	2a14      	cmp	r2, #20
  4022fc:	d801      	bhi.n	402302 <_malloc_r+0x72>
  4022fe:	325b      	adds	r2, #91	; 0x5b
  402300:	e012      	b.n	402328 <_malloc_r+0x98>
  402302:	2a54      	cmp	r2, #84	; 0x54
  402304:	d802      	bhi.n	40230c <_malloc_r+0x7c>
  402306:	0b22      	lsrs	r2, r4, #12
  402308:	326e      	adds	r2, #110	; 0x6e
  40230a:	e00d      	b.n	402328 <_malloc_r+0x98>
  40230c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402310:	d802      	bhi.n	402318 <_malloc_r+0x88>
  402312:	0be2      	lsrs	r2, r4, #15
  402314:	3277      	adds	r2, #119	; 0x77
  402316:	e007      	b.n	402328 <_malloc_r+0x98>
  402318:	f240 5354 	movw	r3, #1364	; 0x554
  40231c:	429a      	cmp	r2, r3
  40231e:	d802      	bhi.n	402326 <_malloc_r+0x96>
  402320:	0ca2      	lsrs	r2, r4, #18
  402322:	327c      	adds	r2, #124	; 0x7c
  402324:	e000      	b.n	402328 <_malloc_r+0x98>
  402326:	227e      	movs	r2, #126	; 0x7e
  402328:	4885      	ldr	r0, [pc, #532]	; (402540 <_malloc_r+0x2b0>)
  40232a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
  40232e:	68dd      	ldr	r5, [r3, #12]
  402330:	429d      	cmp	r5, r3
  402332:	d015      	beq.n	402360 <_malloc_r+0xd0>
  402334:	6869      	ldr	r1, [r5, #4]
  402336:	f021 0103 	bic.w	r1, r1, #3
  40233a:	1b08      	subs	r0, r1, r4
  40233c:	280f      	cmp	r0, #15
  40233e:	dd01      	ble.n	402344 <_malloc_r+0xb4>
  402340:	3a01      	subs	r2, #1
  402342:	e00d      	b.n	402360 <_malloc_r+0xd0>
  402344:	2800      	cmp	r0, #0
  402346:	db09      	blt.n	40235c <_malloc_r+0xcc>
  402348:	68eb      	ldr	r3, [r5, #12]
  40234a:	68aa      	ldr	r2, [r5, #8]
  40234c:	60d3      	str	r3, [r2, #12]
  40234e:	609a      	str	r2, [r3, #8]
  402350:	186b      	adds	r3, r5, r1
  402352:	685a      	ldr	r2, [r3, #4]
  402354:	f042 0001 	orr.w	r0, r2, #1
  402358:	6058      	str	r0, [r3, #4]
  40235a:	e190      	b.n	40267e <_malloc_r+0x3ee>
  40235c:	68ed      	ldr	r5, [r5, #12]
  40235e:	e7e7      	b.n	402330 <_malloc_r+0xa0>
  402360:	3201      	adds	r2, #1
  402362:	4977      	ldr	r1, [pc, #476]	; (402540 <_malloc_r+0x2b0>)
  402364:	690d      	ldr	r5, [r1, #16]
  402366:	f101 0708 	add.w	r7, r1, #8
  40236a:	42bd      	cmp	r5, r7
  40236c:	d068      	beq.n	402440 <_malloc_r+0x1b0>
  40236e:	6868      	ldr	r0, [r5, #4]
  402370:	f020 0303 	bic.w	r3, r0, #3
  402374:	1b18      	subs	r0, r3, r4
  402376:	280f      	cmp	r0, #15
  402378:	dd0c      	ble.n	402394 <_malloc_r+0x104>
  40237a:	192b      	adds	r3, r5, r4
  40237c:	614b      	str	r3, [r1, #20]
  40237e:	610b      	str	r3, [r1, #16]
  402380:	f044 0401 	orr.w	r4, r4, #1
  402384:	f040 0101 	orr.w	r1, r0, #1
  402388:	606c      	str	r4, [r5, #4]
  40238a:	60df      	str	r7, [r3, #12]
  40238c:	609f      	str	r7, [r3, #8]
  40238e:	6059      	str	r1, [r3, #4]
  402390:	5018      	str	r0, [r3, r0]
  402392:	e174      	b.n	40267e <_malloc_r+0x3ee>
  402394:	2800      	cmp	r0, #0
  402396:	614f      	str	r7, [r1, #20]
  402398:	610f      	str	r7, [r1, #16]
  40239a:	db01      	blt.n	4023a0 <_malloc_r+0x110>
  40239c:	18eb      	adds	r3, r5, r3
  40239e:	e7d8      	b.n	402352 <_malloc_r+0xc2>
  4023a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4023a4:	d20f      	bcs.n	4023c6 <_malloc_r+0x136>
  4023a6:	08db      	lsrs	r3, r3, #3
  4023a8:	1098      	asrs	r0, r3, #2
  4023aa:	2701      	movs	r7, #1
  4023ac:	fa07 f700 	lsl.w	r7, r7, r0
  4023b0:	6848      	ldr	r0, [r1, #4]
  4023b2:	4307      	orrs	r7, r0
  4023b4:	604f      	str	r7, [r1, #4]
  4023b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4023ba:	60e9      	str	r1, [r5, #12]
  4023bc:	688b      	ldr	r3, [r1, #8]
  4023be:	60ab      	str	r3, [r5, #8]
  4023c0:	60dd      	str	r5, [r3, #12]
  4023c2:	608d      	str	r5, [r1, #8]
  4023c4:	e03c      	b.n	402440 <_malloc_r+0x1b0>
  4023c6:	0a58      	lsrs	r0, r3, #9
  4023c8:	2804      	cmp	r0, #4
  4023ca:	d802      	bhi.n	4023d2 <_malloc_r+0x142>
  4023cc:	0998      	lsrs	r0, r3, #6
  4023ce:	3038      	adds	r0, #56	; 0x38
  4023d0:	e016      	b.n	402400 <_malloc_r+0x170>
  4023d2:	2814      	cmp	r0, #20
  4023d4:	d801      	bhi.n	4023da <_malloc_r+0x14a>
  4023d6:	305b      	adds	r0, #91	; 0x5b
  4023d8:	e012      	b.n	402400 <_malloc_r+0x170>
  4023da:	2854      	cmp	r0, #84	; 0x54
  4023dc:	d802      	bhi.n	4023e4 <_malloc_r+0x154>
  4023de:	0b18      	lsrs	r0, r3, #12
  4023e0:	306e      	adds	r0, #110	; 0x6e
  4023e2:	e00d      	b.n	402400 <_malloc_r+0x170>
  4023e4:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4023e8:	d802      	bhi.n	4023f0 <_malloc_r+0x160>
  4023ea:	0bd8      	lsrs	r0, r3, #15
  4023ec:	3077      	adds	r0, #119	; 0x77
  4023ee:	e007      	b.n	402400 <_malloc_r+0x170>
  4023f0:	f240 5754 	movw	r7, #1364	; 0x554
  4023f4:	42b8      	cmp	r0, r7
  4023f6:	d802      	bhi.n	4023fe <_malloc_r+0x16e>
  4023f8:	0c98      	lsrs	r0, r3, #18
  4023fa:	307c      	adds	r0, #124	; 0x7c
  4023fc:	e000      	b.n	402400 <_malloc_r+0x170>
  4023fe:	207e      	movs	r0, #126	; 0x7e
  402400:	f8df e13c 	ldr.w	lr, [pc, #316]	; 402540 <_malloc_r+0x2b0>
  402404:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
  402408:	68b9      	ldr	r1, [r7, #8]
  40240a:	42b9      	cmp	r1, r7
  40240c:	d10e      	bne.n	40242c <_malloc_r+0x19c>
  40240e:	1087      	asrs	r7, r0, #2
  402410:	2301      	movs	r3, #1
  402412:	fa03 f007 	lsl.w	r0, r3, r7
  402416:	f8de 7004 	ldr.w	r7, [lr, #4]
  40241a:	ea40 0307 	orr.w	r3, r0, r7
  40241e:	f8ce 3004 	str.w	r3, [lr, #4]
  402422:	4608      	mov	r0, r1
  402424:	e008      	b.n	402438 <_malloc_r+0x1a8>
  402426:	6889      	ldr	r1, [r1, #8]
  402428:	42b9      	cmp	r1, r7
  40242a:	d004      	beq.n	402436 <_malloc_r+0x1a6>
  40242c:	6848      	ldr	r0, [r1, #4]
  40242e:	f020 0003 	bic.w	r0, r0, #3
  402432:	4283      	cmp	r3, r0
  402434:	d3f7      	bcc.n	402426 <_malloc_r+0x196>
  402436:	68c8      	ldr	r0, [r1, #12]
  402438:	60e8      	str	r0, [r5, #12]
  40243a:	60a9      	str	r1, [r5, #8]
  40243c:	60cd      	str	r5, [r1, #12]
  40243e:	6085      	str	r5, [r0, #8]
  402440:	4f3f      	ldr	r7, [pc, #252]	; (402540 <_malloc_r+0x2b0>)
  402442:	1095      	asrs	r5, r2, #2
  402444:	2001      	movs	r0, #1
  402446:	6879      	ldr	r1, [r7, #4]
  402448:	fa00 f305 	lsl.w	r3, r0, r5
  40244c:	428b      	cmp	r3, r1
  40244e:	d85d      	bhi.n	40250c <_malloc_r+0x27c>
  402450:	420b      	tst	r3, r1
  402452:	d105      	bne.n	402460 <_malloc_r+0x1d0>
  402454:	f022 0203 	bic.w	r2, r2, #3
  402458:	005b      	lsls	r3, r3, #1
  40245a:	3204      	adds	r2, #4
  40245c:	420b      	tst	r3, r1
  40245e:	d0fb      	beq.n	402458 <_malloc_r+0x1c8>
  402460:	4d37      	ldr	r5, [pc, #220]	; (402540 <_malloc_r+0x2b0>)
  402462:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
  402466:	4677      	mov	r7, lr
  402468:	4610      	mov	r0, r2
  40246a:	68fd      	ldr	r5, [r7, #12]
  40246c:	42bd      	cmp	r5, r7
  40246e:	d02d      	beq.n	4024cc <_malloc_r+0x23c>
  402470:	6869      	ldr	r1, [r5, #4]
  402472:	f021 0c03 	bic.w	ip, r1, #3
  402476:	ebc4 010c 	rsb	r1, r4, ip
  40247a:	290f      	cmp	r1, #15
  40247c:	dd13      	ble.n	4024a6 <_malloc_r+0x216>
  40247e:	192b      	adds	r3, r5, r4
  402480:	f044 0401 	orr.w	r4, r4, #1
  402484:	68ea      	ldr	r2, [r5, #12]
  402486:	606c      	str	r4, [r5, #4]
  402488:	f855 0f08 	ldr.w	r0, [r5, #8]!
  40248c:	5059      	str	r1, [r3, r1]
  40248e:	60c2      	str	r2, [r0, #12]
  402490:	6090      	str	r0, [r2, #8]
  402492:	4a2b      	ldr	r2, [pc, #172]	; (402540 <_malloc_r+0x2b0>)
  402494:	f041 0001 	orr.w	r0, r1, #1
  402498:	6153      	str	r3, [r2, #20]
  40249a:	6113      	str	r3, [r2, #16]
  40249c:	3208      	adds	r2, #8
  40249e:	60da      	str	r2, [r3, #12]
  4024a0:	609a      	str	r2, [r3, #8]
  4024a2:	6058      	str	r0, [r3, #4]
  4024a4:	e00c      	b.n	4024c0 <_malloc_r+0x230>
  4024a6:	2900      	cmp	r1, #0
  4024a8:	db0e      	blt.n	4024c8 <_malloc_r+0x238>
  4024aa:	eb05 000c 	add.w	r0, r5, ip
  4024ae:	68e9      	ldr	r1, [r5, #12]
  4024b0:	6842      	ldr	r2, [r0, #4]
  4024b2:	f042 0301 	orr.w	r3, r2, #1
  4024b6:	6043      	str	r3, [r0, #4]
  4024b8:	f855 0f08 	ldr.w	r0, [r5, #8]!
  4024bc:	60c1      	str	r1, [r0, #12]
  4024be:	6088      	str	r0, [r1, #8]
  4024c0:	4630      	mov	r0, r6
  4024c2:	f000 f919 	bl	4026f8 <__malloc_unlock>
  4024c6:	e0de      	b.n	402686 <_malloc_r+0x3f6>
  4024c8:	68ed      	ldr	r5, [r5, #12]
  4024ca:	e7cf      	b.n	40246c <_malloc_r+0x1dc>
  4024cc:	3001      	adds	r0, #1
  4024ce:	0781      	lsls	r1, r0, #30
  4024d0:	f105 0708 	add.w	r7, r5, #8
  4024d4:	d1c9      	bne.n	40246a <_malloc_r+0x1da>
  4024d6:	4671      	mov	r1, lr
  4024d8:	0795      	lsls	r5, r2, #30
  4024da:	d105      	bne.n	4024e8 <_malloc_r+0x258>
  4024dc:	4a18      	ldr	r2, [pc, #96]	; (402540 <_malloc_r+0x2b0>)
  4024de:	6855      	ldr	r5, [r2, #4]
  4024e0:	ea25 0503 	bic.w	r5, r5, r3
  4024e4:	6055      	str	r5, [r2, #4]
  4024e6:	e005      	b.n	4024f4 <_malloc_r+0x264>
  4024e8:	f1a1 0708 	sub.w	r7, r1, #8
  4024ec:	6809      	ldr	r1, [r1, #0]
  4024ee:	3a01      	subs	r2, #1
  4024f0:	42b9      	cmp	r1, r7
  4024f2:	d0f1      	beq.n	4024d8 <_malloc_r+0x248>
  4024f4:	4f12      	ldr	r7, [pc, #72]	; (402540 <_malloc_r+0x2b0>)
  4024f6:	687f      	ldr	r7, [r7, #4]
  4024f8:	005b      	lsls	r3, r3, #1
  4024fa:	42bb      	cmp	r3, r7
  4024fc:	d806      	bhi.n	40250c <_malloc_r+0x27c>
  4024fe:	b12b      	cbz	r3, 40250c <_malloc_r+0x27c>
  402500:	4602      	mov	r2, r0
  402502:	423b      	tst	r3, r7
  402504:	d1ac      	bne.n	402460 <_malloc_r+0x1d0>
  402506:	3204      	adds	r2, #4
  402508:	005b      	lsls	r3, r3, #1
  40250a:	e7fa      	b.n	402502 <_malloc_r+0x272>
  40250c:	4b0c      	ldr	r3, [pc, #48]	; (402540 <_malloc_r+0x2b0>)
  40250e:	689f      	ldr	r7, [r3, #8]
  402510:	6878      	ldr	r0, [r7, #4]
  402512:	f020 0903 	bic.w	r9, r0, #3
  402516:	45a1      	cmp	r9, r4
  402518:	4619      	mov	r1, r3
  40251a:	d304      	bcc.n	402526 <_malloc_r+0x296>
  40251c:	ebc4 0009 	rsb	r0, r4, r9
  402520:	280f      	cmp	r0, #15
  402522:	f300 80a2 	bgt.w	40266a <_malloc_r+0x3da>
  402526:	4a07      	ldr	r2, [pc, #28]	; (402544 <_malloc_r+0x2b4>)
  402528:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
  40252c:	6815      	ldr	r5, [r2, #0]
  40252e:	3301      	adds	r3, #1
  402530:	eb07 0a09 	add.w	sl, r7, r9
  402534:	eb04 0805 	add.w	r8, r4, r5
  402538:	d106      	bne.n	402548 <_malloc_r+0x2b8>
  40253a:	f108 0810 	add.w	r8, r8, #16
  40253e:	e00b      	b.n	402558 <_malloc_r+0x2c8>
  402540:	20000438 	.word	0x20000438
  402544:	200008e4 	.word	0x200008e4
  402548:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
  40254c:	f100 010f 	add.w	r1, r0, #15
  402550:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
  402554:	f022 080f 	bic.w	r8, r2, #15
  402558:	4630      	mov	r0, r6
  40255a:	4641      	mov	r1, r8
  40255c:	f000 fa3c 	bl	4029d8 <_sbrk_r>
  402560:	1c42      	adds	r2, r0, #1
  402562:	4605      	mov	r5, r0
  402564:	d071      	beq.n	40264a <_malloc_r+0x3ba>
  402566:	4550      	cmp	r0, sl
  402568:	d202      	bcs.n	402570 <_malloc_r+0x2e0>
  40256a:	4b48      	ldr	r3, [pc, #288]	; (40268c <_malloc_r+0x3fc>)
  40256c:	429f      	cmp	r7, r3
  40256e:	d16c      	bne.n	40264a <_malloc_r+0x3ba>
  402570:	4847      	ldr	r0, [pc, #284]	; (402690 <_malloc_r+0x400>)
  402572:	4a46      	ldr	r2, [pc, #280]	; (40268c <_malloc_r+0x3fc>)
  402574:	6841      	ldr	r1, [r0, #4]
  402576:	4555      	cmp	r5, sl
  402578:	eb08 0301 	add.w	r3, r8, r1
  40257c:	6043      	str	r3, [r0, #4]
  40257e:	d107      	bne.n	402590 <_malloc_r+0x300>
  402580:	0529      	lsls	r1, r5, #20
  402582:	d105      	bne.n	402590 <_malloc_r+0x300>
  402584:	6895      	ldr	r5, [r2, #8]
  402586:	44c8      	add	r8, r9
  402588:	f048 0001 	orr.w	r0, r8, #1
  40258c:	6068      	str	r0, [r5, #4]
  40258e:	e051      	b.n	402634 <_malloc_r+0x3a4>
  402590:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
  402594:	1c42      	adds	r2, r0, #1
  402596:	d103      	bne.n	4025a0 <_malloc_r+0x310>
  402598:	4a3c      	ldr	r2, [pc, #240]	; (40268c <_malloc_r+0x3fc>)
  40259a:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
  40259e:	e005      	b.n	4025ac <_malloc_r+0x31c>
  4025a0:	ebca 0a05 	rsb	sl, sl, r5
  4025a4:	eb03 010a 	add.w	r1, r3, sl
  4025a8:	4b39      	ldr	r3, [pc, #228]	; (402690 <_malloc_r+0x400>)
  4025aa:	6059      	str	r1, [r3, #4]
  4025ac:	f015 0007 	ands.w	r0, r5, #7
  4025b0:	bf1c      	itt	ne
  4025b2:	f1c0 0008 	rsbne	r0, r0, #8
  4025b6:	182d      	addne	r5, r5, r0
  4025b8:	eb05 0c08 	add.w	ip, r5, r8
  4025bc:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
  4025c0:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
  4025c4:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
  4025c8:	4641      	mov	r1, r8
  4025ca:	4630      	mov	r0, r6
  4025cc:	f000 fa04 	bl	4029d8 <_sbrk_r>
  4025d0:	4a2f      	ldr	r2, [pc, #188]	; (402690 <_malloc_r+0x400>)
  4025d2:	1c43      	adds	r3, r0, #1
  4025d4:	6853      	ldr	r3, [r2, #4]
  4025d6:	bf08      	it	eq
  4025d8:	f04f 0800 	moveq.w	r8, #0
  4025dc:	eb08 0103 	add.w	r1, r8, r3
  4025e0:	bf08      	it	eq
  4025e2:	4628      	moveq	r0, r5
  4025e4:	6051      	str	r1, [r2, #4]
  4025e6:	1b40      	subs	r0, r0, r5
  4025e8:	4a28      	ldr	r2, [pc, #160]	; (40268c <_malloc_r+0x3fc>)
  4025ea:	eb00 0308 	add.w	r3, r0, r8
  4025ee:	f043 0101 	orr.w	r1, r3, #1
  4025f2:	4297      	cmp	r7, r2
  4025f4:	6095      	str	r5, [r2, #8]
  4025f6:	6069      	str	r1, [r5, #4]
  4025f8:	d01c      	beq.n	402634 <_malloc_r+0x3a4>
  4025fa:	f1b9 0f0f 	cmp.w	r9, #15
  4025fe:	d802      	bhi.n	402606 <_malloc_r+0x376>
  402600:	2201      	movs	r2, #1
  402602:	606a      	str	r2, [r5, #4]
  402604:	e021      	b.n	40264a <_malloc_r+0x3ba>
  402606:	687d      	ldr	r5, [r7, #4]
  402608:	f1a9 090c 	sub.w	r9, r9, #12
  40260c:	f029 0907 	bic.w	r9, r9, #7
  402610:	eb07 0309 	add.w	r3, r7, r9
  402614:	f005 0201 	and.w	r2, r5, #1
  402618:	2105      	movs	r1, #5
  40261a:	ea49 0002 	orr.w	r0, r9, r2
  40261e:	f1b9 0f0f 	cmp.w	r9, #15
  402622:	6078      	str	r0, [r7, #4]
  402624:	6059      	str	r1, [r3, #4]
  402626:	6099      	str	r1, [r3, #8]
  402628:	d904      	bls.n	402634 <_malloc_r+0x3a4>
  40262a:	4630      	mov	r0, r6
  40262c:	f107 0108 	add.w	r1, r7, #8
  402630:	f7ff fb5e 	bl	401cf0 <_free_r>
  402634:	4a16      	ldr	r2, [pc, #88]	; (402690 <_malloc_r+0x400>)
  402636:	6853      	ldr	r3, [r2, #4]
  402638:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  40263a:	6b15      	ldr	r5, [r2, #48]	; 0x30
  40263c:	428b      	cmp	r3, r1
  40263e:	bf88      	it	hi
  402640:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  402642:	42ab      	cmp	r3, r5
  402644:	bf84      	itt	hi
  402646:	4d12      	ldrhi	r5, [pc, #72]	; (402690 <_malloc_r+0x400>)
  402648:	632b      	strhi	r3, [r5, #48]	; 0x30
  40264a:	4810      	ldr	r0, [pc, #64]	; (40268c <_malloc_r+0x3fc>)
  40264c:	6882      	ldr	r2, [r0, #8]
  40264e:	6853      	ldr	r3, [r2, #4]
  402650:	f023 0103 	bic.w	r1, r3, #3
  402654:	42a1      	cmp	r1, r4
  402656:	ebc4 0001 	rsb	r0, r4, r1
  40265a:	d301      	bcc.n	402660 <_malloc_r+0x3d0>
  40265c:	280f      	cmp	r0, #15
  40265e:	dc04      	bgt.n	40266a <_malloc_r+0x3da>
  402660:	4630      	mov	r0, r6
  402662:	f000 f849 	bl	4026f8 <__malloc_unlock>
  402666:	2500      	movs	r5, #0
  402668:	e00d      	b.n	402686 <_malloc_r+0x3f6>
  40266a:	4a08      	ldr	r2, [pc, #32]	; (40268c <_malloc_r+0x3fc>)
  40266c:	6895      	ldr	r5, [r2, #8]
  40266e:	f044 0301 	orr.w	r3, r4, #1
  402672:	192c      	adds	r4, r5, r4
  402674:	f040 0101 	orr.w	r1, r0, #1
  402678:	606b      	str	r3, [r5, #4]
  40267a:	6094      	str	r4, [r2, #8]
  40267c:	6061      	str	r1, [r4, #4]
  40267e:	4630      	mov	r0, r6
  402680:	f000 f83a 	bl	4026f8 <__malloc_unlock>
  402684:	3508      	adds	r5, #8
  402686:	4628      	mov	r0, r5
  402688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40268c:	20000438 	.word	0x20000438
  402690:	200008e4 	.word	0x200008e4

00402694 <memchr>:
  402694:	b510      	push	{r4, lr}
  402696:	b2c9      	uxtb	r1, r1
  402698:	4603      	mov	r3, r0
  40269a:	1882      	adds	r2, r0, r2
  40269c:	4293      	cmp	r3, r2
  40269e:	4618      	mov	r0, r3
  4026a0:	d004      	beq.n	4026ac <memchr+0x18>
  4026a2:	7804      	ldrb	r4, [r0, #0]
  4026a4:	3301      	adds	r3, #1
  4026a6:	428c      	cmp	r4, r1
  4026a8:	d1f8      	bne.n	40269c <memchr+0x8>
  4026aa:	e000      	b.n	4026ae <memchr+0x1a>
  4026ac:	2000      	movs	r0, #0
  4026ae:	bd10      	pop	{r4, pc}

004026b0 <memcpy>:
  4026b0:	b510      	push	{r4, lr}
  4026b2:	2300      	movs	r3, #0
  4026b4:	4293      	cmp	r3, r2
  4026b6:	d003      	beq.n	4026c0 <memcpy+0x10>
  4026b8:	5ccc      	ldrb	r4, [r1, r3]
  4026ba:	54c4      	strb	r4, [r0, r3]
  4026bc:	3301      	adds	r3, #1
  4026be:	e7f9      	b.n	4026b4 <memcpy+0x4>
  4026c0:	bd10      	pop	{r4, pc}

004026c2 <memmove>:
  4026c2:	4281      	cmp	r1, r0
  4026c4:	b570      	push	{r4, r5, r6, lr}
  4026c6:	d20e      	bcs.n	4026e6 <memmove+0x24>
  4026c8:	188c      	adds	r4, r1, r2
  4026ca:	42a0      	cmp	r0, r4
  4026cc:	d20b      	bcs.n	4026e6 <memmove+0x24>
  4026ce:	1885      	adds	r5, r0, r2
  4026d0:	4613      	mov	r3, r2
  4026d2:	f113 33ff 	adds.w	r3, r3, #4294967295
  4026d6:	d305      	bcc.n	4026e4 <memmove+0x22>
  4026d8:	4251      	negs	r1, r2
  4026da:	1866      	adds	r6, r4, r1
  4026dc:	1869      	adds	r1, r5, r1
  4026de:	5cf6      	ldrb	r6, [r6, r3]
  4026e0:	54ce      	strb	r6, [r1, r3]
  4026e2:	e7f6      	b.n	4026d2 <memmove+0x10>
  4026e4:	bd70      	pop	{r4, r5, r6, pc}
  4026e6:	2300      	movs	r3, #0
  4026e8:	4293      	cmp	r3, r2
  4026ea:	d003      	beq.n	4026f4 <memmove+0x32>
  4026ec:	5ccc      	ldrb	r4, [r1, r3]
  4026ee:	54c4      	strb	r4, [r0, r3]
  4026f0:	3301      	adds	r3, #1
  4026f2:	e7f9      	b.n	4026e8 <memmove+0x26>
  4026f4:	bd70      	pop	{r4, r5, r6, pc}

004026f6 <__malloc_lock>:
  4026f6:	4770      	bx	lr

004026f8 <__malloc_unlock>:
  4026f8:	4770      	bx	lr
	...

004026fc <_realloc_r>:
  4026fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402700:	4681      	mov	r9, r0
  402702:	4616      	mov	r6, r2
  402704:	460c      	mov	r4, r1
  402706:	b921      	cbnz	r1, 402712 <_realloc_r+0x16>
  402708:	4611      	mov	r1, r2
  40270a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40270e:	f7ff bdbf 	b.w	402290 <_malloc_r>
  402712:	f7ff fff0 	bl	4026f6 <__malloc_lock>
  402716:	f106 070b 	add.w	r7, r6, #11
  40271a:	f854 5c04 	ldr.w	r5, [r4, #-4]
  40271e:	2f16      	cmp	r7, #22
  402720:	f1a4 0b08 	sub.w	fp, r4, #8
  402724:	f025 0803 	bic.w	r8, r5, #3
  402728:	d903      	bls.n	402732 <_realloc_r+0x36>
  40272a:	f037 0707 	bics.w	r7, r7, #7
  40272e:	d501      	bpl.n	402734 <_realloc_r+0x38>
  402730:	e002      	b.n	402738 <_realloc_r+0x3c>
  402732:	2710      	movs	r7, #16
  402734:	42b7      	cmp	r7, r6
  402736:	d204      	bcs.n	402742 <_realloc_r+0x46>
  402738:	200c      	movs	r0, #12
  40273a:	f8c9 0000 	str.w	r0, [r9]
  40273e:	2600      	movs	r6, #0
  402740:	e145      	b.n	4029ce <_realloc_r+0x2d2>
  402742:	45b8      	cmp	r8, r7
  402744:	f280 811a 	bge.w	40297c <_realloc_r+0x280>
  402748:	4aa2      	ldr	r2, [pc, #648]	; (4029d4 <_realloc_r+0x2d8>)
  40274a:	6891      	ldr	r1, [r2, #8]
  40274c:	eb0b 0308 	add.w	r3, fp, r8
  402750:	428b      	cmp	r3, r1
  402752:	d006      	beq.n	402762 <_realloc_r+0x66>
  402754:	6858      	ldr	r0, [r3, #4]
  402756:	f020 0201 	bic.w	r2, r0, #1
  40275a:	1898      	adds	r0, r3, r2
  40275c:	6842      	ldr	r2, [r0, #4]
  40275e:	07d0      	lsls	r0, r2, #31
  402760:	d426      	bmi.n	4027b0 <_realloc_r+0xb4>
  402762:	685a      	ldr	r2, [r3, #4]
  402764:	428b      	cmp	r3, r1
  402766:	f022 0003 	bic.w	r0, r2, #3
  40276a:	eb00 0a08 	add.w	sl, r0, r8
  40276e:	d118      	bne.n	4027a2 <_realloc_r+0xa6>
  402770:	f107 0210 	add.w	r2, r7, #16
  402774:	4592      	cmp	sl, r2
  402776:	db1d      	blt.n	4027b4 <_realloc_r+0xb8>
  402778:	eb0b 0507 	add.w	r5, fp, r7
  40277c:	ebc7 0a0a 	rsb	sl, r7, sl
  402780:	f04a 0101 	orr.w	r1, sl, #1
  402784:	6069      	str	r1, [r5, #4]
  402786:	f854 2c04 	ldr.w	r2, [r4, #-4]
  40278a:	4e92      	ldr	r6, [pc, #584]	; (4029d4 <_realloc_r+0x2d8>)
  40278c:	f002 0301 	and.w	r3, r2, #1
  402790:	431f      	orrs	r7, r3
  402792:	60b5      	str	r5, [r6, #8]
  402794:	f844 7c04 	str.w	r7, [r4, #-4]
  402798:	4648      	mov	r0, r9
  40279a:	f7ff ffad 	bl	4026f8 <__malloc_unlock>
  40279e:	4626      	mov	r6, r4
  4027a0:	e115      	b.n	4029ce <_realloc_r+0x2d2>
  4027a2:	45ba      	cmp	sl, r7
  4027a4:	db06      	blt.n	4027b4 <_realloc_r+0xb8>
  4027a6:	68dd      	ldr	r5, [r3, #12]
  4027a8:	689e      	ldr	r6, [r3, #8]
  4027aa:	60f5      	str	r5, [r6, #12]
  4027ac:	60ae      	str	r6, [r5, #8]
  4027ae:	e0e6      	b.n	40297e <_realloc_r+0x282>
  4027b0:	2000      	movs	r0, #0
  4027b2:	4603      	mov	r3, r0
  4027b4:	07ea      	lsls	r2, r5, #31
  4027b6:	f100 8091 	bmi.w	4028dc <_realloc_r+0x1e0>
  4027ba:	f854 5c08 	ldr.w	r5, [r4, #-8]
  4027be:	ebc5 050b 	rsb	r5, r5, fp
  4027c2:	686a      	ldr	r2, [r5, #4]
  4027c4:	f022 0203 	bic.w	r2, r2, #3
  4027c8:	2b00      	cmp	r3, #0
  4027ca:	d051      	beq.n	402870 <_realloc_r+0x174>
  4027cc:	eb02 0a08 	add.w	sl, r2, r8
  4027d0:	428b      	cmp	r3, r1
  4027d2:	4482      	add	sl, r0
  4027d4:	d145      	bne.n	402862 <_realloc_r+0x166>
  4027d6:	f107 0310 	add.w	r3, r7, #16
  4027da:	459a      	cmp	sl, r3
  4027dc:	db48      	blt.n	402870 <_realloc_r+0x174>
  4027de:	462e      	mov	r6, r5
  4027e0:	68e9      	ldr	r1, [r5, #12]
  4027e2:	f856 3f08 	ldr.w	r3, [r6, #8]!
  4027e6:	f1a8 0204 	sub.w	r2, r8, #4
  4027ea:	2a24      	cmp	r2, #36	; 0x24
  4027ec:	60d9      	str	r1, [r3, #12]
  4027ee:	608b      	str	r3, [r1, #8]
  4027f0:	d825      	bhi.n	40283e <_realloc_r+0x142>
  4027f2:	2a13      	cmp	r2, #19
  4027f4:	d91b      	bls.n	40282e <_realloc_r+0x132>
  4027f6:	6821      	ldr	r1, [r4, #0]
  4027f8:	60a9      	str	r1, [r5, #8]
  4027fa:	6863      	ldr	r3, [r4, #4]
  4027fc:	2a1b      	cmp	r2, #27
  4027fe:	60eb      	str	r3, [r5, #12]
  402800:	d803      	bhi.n	40280a <_realloc_r+0x10e>
  402802:	f105 0010 	add.w	r0, r5, #16
  402806:	3408      	adds	r4, #8
  402808:	e012      	b.n	402830 <_realloc_r+0x134>
  40280a:	68a0      	ldr	r0, [r4, #8]
  40280c:	6128      	str	r0, [r5, #16]
  40280e:	68e1      	ldr	r1, [r4, #12]
  402810:	2a24      	cmp	r2, #36	; 0x24
  402812:	6169      	str	r1, [r5, #20]
  402814:	d003      	beq.n	40281e <_realloc_r+0x122>
  402816:	f105 0018 	add.w	r0, r5, #24
  40281a:	3410      	adds	r4, #16
  40281c:	e008      	b.n	402830 <_realloc_r+0x134>
  40281e:	6922      	ldr	r2, [r4, #16]
  402820:	61aa      	str	r2, [r5, #24]
  402822:	6963      	ldr	r3, [r4, #20]
  402824:	f105 0020 	add.w	r0, r5, #32
  402828:	61eb      	str	r3, [r5, #28]
  40282a:	3418      	adds	r4, #24
  40282c:	e000      	b.n	402830 <_realloc_r+0x134>
  40282e:	4630      	mov	r0, r6
  402830:	6821      	ldr	r1, [r4, #0]
  402832:	6001      	str	r1, [r0, #0]
  402834:	6862      	ldr	r2, [r4, #4]
  402836:	6042      	str	r2, [r0, #4]
  402838:	68a3      	ldr	r3, [r4, #8]
  40283a:	6083      	str	r3, [r0, #8]
  40283c:	e003      	b.n	402846 <_realloc_r+0x14a>
  40283e:	4630      	mov	r0, r6
  402840:	4621      	mov	r1, r4
  402842:	f7ff ff3e 	bl	4026c2 <memmove>
  402846:	19e8      	adds	r0, r5, r7
  402848:	ebc7 0a0a 	rsb	sl, r7, sl
  40284c:	f04a 0201 	orr.w	r2, sl, #1
  402850:	6042      	str	r2, [r0, #4]
  402852:	686b      	ldr	r3, [r5, #4]
  402854:	495f      	ldr	r1, [pc, #380]	; (4029d4 <_realloc_r+0x2d8>)
  402856:	6088      	str	r0, [r1, #8]
  402858:	f003 0001 	and.w	r0, r3, #1
  40285c:	4307      	orrs	r7, r0
  40285e:	606f      	str	r7, [r5, #4]
  402860:	e088      	b.n	402974 <_realloc_r+0x278>
  402862:	45ba      	cmp	sl, r7
  402864:	db04      	blt.n	402870 <_realloc_r+0x174>
  402866:	68d9      	ldr	r1, [r3, #12]
  402868:	6898      	ldr	r0, [r3, #8]
  40286a:	60c1      	str	r1, [r0, #12]
  40286c:	6088      	str	r0, [r1, #8]
  40286e:	e003      	b.n	402878 <_realloc_r+0x17c>
  402870:	eb02 0a08 	add.w	sl, r2, r8
  402874:	45ba      	cmp	sl, r7
  402876:	db31      	blt.n	4028dc <_realloc_r+0x1e0>
  402878:	4628      	mov	r0, r5
  40287a:	68eb      	ldr	r3, [r5, #12]
  40287c:	f850 1f08 	ldr.w	r1, [r0, #8]!
  402880:	f1a8 0204 	sub.w	r2, r8, #4
  402884:	2a24      	cmp	r2, #36	; 0x24
  402886:	60cb      	str	r3, [r1, #12]
  402888:	6099      	str	r1, [r3, #8]
  40288a:	d823      	bhi.n	4028d4 <_realloc_r+0x1d8>
  40288c:	2a13      	cmp	r2, #19
  40288e:	d91a      	bls.n	4028c6 <_realloc_r+0x1ca>
  402890:	6820      	ldr	r0, [r4, #0]
  402892:	60a8      	str	r0, [r5, #8]
  402894:	6866      	ldr	r6, [r4, #4]
  402896:	2a1b      	cmp	r2, #27
  402898:	60ee      	str	r6, [r5, #12]
  40289a:	d803      	bhi.n	4028a4 <_realloc_r+0x1a8>
  40289c:	f105 0010 	add.w	r0, r5, #16
  4028a0:	3408      	adds	r4, #8
  4028a2:	e010      	b.n	4028c6 <_realloc_r+0x1ca>
  4028a4:	68a3      	ldr	r3, [r4, #8]
  4028a6:	612b      	str	r3, [r5, #16]
  4028a8:	68e1      	ldr	r1, [r4, #12]
  4028aa:	2a24      	cmp	r2, #36	; 0x24
  4028ac:	6169      	str	r1, [r5, #20]
  4028ae:	d003      	beq.n	4028b8 <_realloc_r+0x1bc>
  4028b0:	f105 0018 	add.w	r0, r5, #24
  4028b4:	3410      	adds	r4, #16
  4028b6:	e006      	b.n	4028c6 <_realloc_r+0x1ca>
  4028b8:	6922      	ldr	r2, [r4, #16]
  4028ba:	61aa      	str	r2, [r5, #24]
  4028bc:	6960      	ldr	r0, [r4, #20]
  4028be:	3418      	adds	r4, #24
  4028c0:	61e8      	str	r0, [r5, #28]
  4028c2:	f105 0020 	add.w	r0, r5, #32
  4028c6:	6826      	ldr	r6, [r4, #0]
  4028c8:	6006      	str	r6, [r0, #0]
  4028ca:	6863      	ldr	r3, [r4, #4]
  4028cc:	6043      	str	r3, [r0, #4]
  4028ce:	68a1      	ldr	r1, [r4, #8]
  4028d0:	6081      	str	r1, [r0, #8]
  4028d2:	e055      	b.n	402980 <_realloc_r+0x284>
  4028d4:	4621      	mov	r1, r4
  4028d6:	f7ff fef4 	bl	4026c2 <memmove>
  4028da:	e051      	b.n	402980 <_realloc_r+0x284>
  4028dc:	4631      	mov	r1, r6
  4028de:	4648      	mov	r0, r9
  4028e0:	f7ff fcd6 	bl	402290 <_malloc_r>
  4028e4:	4606      	mov	r6, r0
  4028e6:	2800      	cmp	r0, #0
  4028e8:	d044      	beq.n	402974 <_realloc_r+0x278>
  4028ea:	f854 1c04 	ldr.w	r1, [r4, #-4]
  4028ee:	f021 0301 	bic.w	r3, r1, #1
  4028f2:	f1a0 0208 	sub.w	r2, r0, #8
  4028f6:	eb0b 0103 	add.w	r1, fp, r3
  4028fa:	428a      	cmp	r2, r1
  4028fc:	d106      	bne.n	40290c <_realloc_r+0x210>
  4028fe:	f850 6c04 	ldr.w	r6, [r0, #-4]
  402902:	f026 0503 	bic.w	r5, r6, #3
  402906:	eb05 0a08 	add.w	sl, r5, r8
  40290a:	e038      	b.n	40297e <_realloc_r+0x282>
  40290c:	f1a8 0204 	sub.w	r2, r8, #4
  402910:	2a24      	cmp	r2, #36	; 0x24
  402912:	d828      	bhi.n	402966 <_realloc_r+0x26a>
  402914:	2a13      	cmp	r2, #19
  402916:	d91e      	bls.n	402956 <_realloc_r+0x25a>
  402918:	6823      	ldr	r3, [r4, #0]
  40291a:	6003      	str	r3, [r0, #0]
  40291c:	6861      	ldr	r1, [r4, #4]
  40291e:	2a1b      	cmp	r2, #27
  402920:	6041      	str	r1, [r0, #4]
  402922:	d804      	bhi.n	40292e <_realloc_r+0x232>
  402924:	f100 0008 	add.w	r0, r0, #8
  402928:	f104 0208 	add.w	r2, r4, #8
  40292c:	e014      	b.n	402958 <_realloc_r+0x25c>
  40292e:	68a0      	ldr	r0, [r4, #8]
  402930:	60b0      	str	r0, [r6, #8]
  402932:	68e3      	ldr	r3, [r4, #12]
  402934:	2a24      	cmp	r2, #36	; 0x24
  402936:	60f3      	str	r3, [r6, #12]
  402938:	d004      	beq.n	402944 <_realloc_r+0x248>
  40293a:	f106 0010 	add.w	r0, r6, #16
  40293e:	f104 0210 	add.w	r2, r4, #16
  402942:	e009      	b.n	402958 <_realloc_r+0x25c>
  402944:	6922      	ldr	r2, [r4, #16]
  402946:	6132      	str	r2, [r6, #16]
  402948:	6961      	ldr	r1, [r4, #20]
  40294a:	f106 0018 	add.w	r0, r6, #24
  40294e:	6171      	str	r1, [r6, #20]
  402950:	f104 0218 	add.w	r2, r4, #24
  402954:	e000      	b.n	402958 <_realloc_r+0x25c>
  402956:	4622      	mov	r2, r4
  402958:	6813      	ldr	r3, [r2, #0]
  40295a:	6003      	str	r3, [r0, #0]
  40295c:	6851      	ldr	r1, [r2, #4]
  40295e:	6041      	str	r1, [r0, #4]
  402960:	6892      	ldr	r2, [r2, #8]
  402962:	6082      	str	r2, [r0, #8]
  402964:	e002      	b.n	40296c <_realloc_r+0x270>
  402966:	4621      	mov	r1, r4
  402968:	f7ff feab 	bl	4026c2 <memmove>
  40296c:	4648      	mov	r0, r9
  40296e:	4621      	mov	r1, r4
  402970:	f7ff f9be 	bl	401cf0 <_free_r>
  402974:	4648      	mov	r0, r9
  402976:	f7ff febf 	bl	4026f8 <__malloc_unlock>
  40297a:	e028      	b.n	4029ce <_realloc_r+0x2d2>
  40297c:	46c2      	mov	sl, r8
  40297e:	465d      	mov	r5, fp
  402980:	ebc7 000a 	rsb	r0, r7, sl
  402984:	280f      	cmp	r0, #15
  402986:	686a      	ldr	r2, [r5, #4]
  402988:	d911      	bls.n	4029ae <_realloc_r+0x2b2>
  40298a:	19e9      	adds	r1, r5, r7
  40298c:	f002 0601 	and.w	r6, r2, #1
  402990:	4337      	orrs	r7, r6
  402992:	f040 0301 	orr.w	r3, r0, #1
  402996:	1808      	adds	r0, r1, r0
  402998:	606f      	str	r7, [r5, #4]
  40299a:	604b      	str	r3, [r1, #4]
  40299c:	6842      	ldr	r2, [r0, #4]
  40299e:	f042 0601 	orr.w	r6, r2, #1
  4029a2:	6046      	str	r6, [r0, #4]
  4029a4:	3108      	adds	r1, #8
  4029a6:	4648      	mov	r0, r9
  4029a8:	f7ff f9a2 	bl	401cf0 <_free_r>
  4029ac:	e00a      	b.n	4029c4 <_realloc_r+0x2c8>
  4029ae:	f002 0601 	and.w	r6, r2, #1
  4029b2:	eb05 010a 	add.w	r1, r5, sl
  4029b6:	ea4a 0306 	orr.w	r3, sl, r6
  4029ba:	606b      	str	r3, [r5, #4]
  4029bc:	6848      	ldr	r0, [r1, #4]
  4029be:	f040 0201 	orr.w	r2, r0, #1
  4029c2:	604a      	str	r2, [r1, #4]
  4029c4:	4648      	mov	r0, r9
  4029c6:	f7ff fe97 	bl	4026f8 <__malloc_unlock>
  4029ca:	f105 0608 	add.w	r6, r5, #8
  4029ce:	4630      	mov	r0, r6
  4029d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029d4:	20000438 	.word	0x20000438

004029d8 <_sbrk_r>:
  4029d8:	b538      	push	{r3, r4, r5, lr}
  4029da:	4c06      	ldr	r4, [pc, #24]	; (4029f4 <_sbrk_r+0x1c>)
  4029dc:	2300      	movs	r3, #0
  4029de:	4605      	mov	r5, r0
  4029e0:	4608      	mov	r0, r1
  4029e2:	6023      	str	r3, [r4, #0]
  4029e4:	f7fe fbe4 	bl	4011b0 <_sbrk>
  4029e8:	1c43      	adds	r3, r0, #1
  4029ea:	d102      	bne.n	4029f2 <_sbrk_r+0x1a>
  4029ec:	6821      	ldr	r1, [r4, #0]
  4029ee:	b101      	cbz	r1, 4029f2 <_sbrk_r+0x1a>
  4029f0:	6029      	str	r1, [r5, #0]
  4029f2:	bd38      	pop	{r3, r4, r5, pc}
  4029f4:	20000950 	.word	0x20000950

004029f8 <__sread>:
  4029f8:	b510      	push	{r4, lr}
  4029fa:	460c      	mov	r4, r1
  4029fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a00:	f000 f8e2 	bl	402bc8 <_read_r>
  402a04:	2800      	cmp	r0, #0
  402a06:	db03      	blt.n	402a10 <__sread+0x18>
  402a08:	6d22      	ldr	r2, [r4, #80]	; 0x50
  402a0a:	1813      	adds	r3, r2, r0
  402a0c:	6523      	str	r3, [r4, #80]	; 0x50
  402a0e:	bd10      	pop	{r4, pc}
  402a10:	89a3      	ldrh	r3, [r4, #12]
  402a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
  402a16:	81a1      	strh	r1, [r4, #12]
  402a18:	bd10      	pop	{r4, pc}

00402a1a <__seofread>:
  402a1a:	2000      	movs	r0, #0
  402a1c:	4770      	bx	lr

00402a1e <__swrite>:
  402a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402a22:	461d      	mov	r5, r3
  402a24:	898b      	ldrh	r3, [r1, #12]
  402a26:	460c      	mov	r4, r1
  402a28:	f403 7180 	and.w	r1, r3, #256	; 0x100
  402a2c:	4616      	mov	r6, r2
  402a2e:	b20a      	sxth	r2, r1
  402a30:	4607      	mov	r7, r0
  402a32:	b12a      	cbz	r2, 402a40 <__swrite+0x22>
  402a34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402a38:	2200      	movs	r2, #0
  402a3a:	2302      	movs	r3, #2
  402a3c:	f000 f8b2 	bl	402ba4 <_lseek_r>
  402a40:	89a0      	ldrh	r0, [r4, #12]
  402a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402a46:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
  402a4a:	81a3      	strh	r3, [r4, #12]
  402a4c:	4638      	mov	r0, r7
  402a4e:	4632      	mov	r2, r6
  402a50:	462b      	mov	r3, r5
  402a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402a56:	f000 b817 	b.w	402a88 <_write_r>

00402a5a <__sseek>:
  402a5a:	b510      	push	{r4, lr}
  402a5c:	460c      	mov	r4, r1
  402a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a62:	f000 f89f 	bl	402ba4 <_lseek_r>
  402a66:	1c43      	adds	r3, r0, #1
  402a68:	89a3      	ldrh	r3, [r4, #12]
  402a6a:	d103      	bne.n	402a74 <__sseek+0x1a>
  402a6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  402a70:	81a2      	strh	r2, [r4, #12]
  402a72:	bd10      	pop	{r4, pc}
  402a74:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
  402a78:	81a1      	strh	r1, [r4, #12]
  402a7a:	6520      	str	r0, [r4, #80]	; 0x50
  402a7c:	bd10      	pop	{r4, pc}

00402a7e <__sclose>:
  402a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402a82:	f000 b813 	b.w	402aac <_close_r>
	...

00402a88 <_write_r>:
  402a88:	b538      	push	{r3, r4, r5, lr}
  402a8a:	4c07      	ldr	r4, [pc, #28]	; (402aa8 <_write_r+0x20>)
  402a8c:	4605      	mov	r5, r0
  402a8e:	2000      	movs	r0, #0
  402a90:	6020      	str	r0, [r4, #0]
  402a92:	4608      	mov	r0, r1
  402a94:	4611      	mov	r1, r2
  402a96:	461a      	mov	r2, r3
  402a98:	f7fd fbf0 	bl	40027c <_write>
  402a9c:	1c43      	adds	r3, r0, #1
  402a9e:	d102      	bne.n	402aa6 <_write_r+0x1e>
  402aa0:	6823      	ldr	r3, [r4, #0]
  402aa2:	b103      	cbz	r3, 402aa6 <_write_r+0x1e>
  402aa4:	602b      	str	r3, [r5, #0]
  402aa6:	bd38      	pop	{r3, r4, r5, pc}
  402aa8:	20000950 	.word	0x20000950

00402aac <_close_r>:
  402aac:	b538      	push	{r3, r4, r5, lr}
  402aae:	4c06      	ldr	r4, [pc, #24]	; (402ac8 <_close_r+0x1c>)
  402ab0:	2300      	movs	r3, #0
  402ab2:	4605      	mov	r5, r0
  402ab4:	4608      	mov	r0, r1
  402ab6:	6023      	str	r3, [r4, #0]
  402ab8:	f7fe fba0 	bl	4011fc <_close>
  402abc:	1c43      	adds	r3, r0, #1
  402abe:	d102      	bne.n	402ac6 <_close_r+0x1a>
  402ac0:	6821      	ldr	r1, [r4, #0]
  402ac2:	b101      	cbz	r1, 402ac6 <_close_r+0x1a>
  402ac4:	6029      	str	r1, [r5, #0]
  402ac6:	bd38      	pop	{r3, r4, r5, pc}
  402ac8:	20000950 	.word	0x20000950

00402acc <_fclose_r>:
  402acc:	b570      	push	{r4, r5, r6, lr}
  402ace:	4605      	mov	r5, r0
  402ad0:	460c      	mov	r4, r1
  402ad2:	2900      	cmp	r1, #0
  402ad4:	d039      	beq.n	402b4a <_fclose_r+0x7e>
  402ad6:	f7ff f8a5 	bl	401c24 <__sfp_lock_acquire>
  402ada:	b125      	cbz	r5, 402ae6 <_fclose_r+0x1a>
  402adc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  402ade:	b913      	cbnz	r3, 402ae6 <_fclose_r+0x1a>
  402ae0:	4628      	mov	r0, r5
  402ae2:	f7ff f83b 	bl	401b5c <__sinit>
  402ae6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
  402aea:	b35e      	cbz	r6, 402b44 <_fclose_r+0x78>
  402aec:	4628      	mov	r0, r5
  402aee:	4621      	mov	r1, r4
  402af0:	f7fe ff40 	bl	401974 <_fflush_r>
  402af4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402af6:	4606      	mov	r6, r0
  402af8:	b13a      	cbz	r2, 402b0a <_fclose_r+0x3e>
  402afa:	4628      	mov	r0, r5
  402afc:	69e1      	ldr	r1, [r4, #28]
  402afe:	4790      	blx	r2
  402b00:	ea36 0620 	bics.w	r6, r6, r0, asr #32
  402b04:	bf28      	it	cs
  402b06:	f04f 36ff 	movcs.w	r6, #4294967295
  402b0a:	89a0      	ldrh	r0, [r4, #12]
  402b0c:	f000 0180 	and.w	r1, r0, #128	; 0x80
  402b10:	b20b      	sxth	r3, r1
  402b12:	b11b      	cbz	r3, 402b1c <_fclose_r+0x50>
  402b14:	4628      	mov	r0, r5
  402b16:	6921      	ldr	r1, [r4, #16]
  402b18:	f7ff f8ea 	bl	401cf0 <_free_r>
  402b1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402b1e:	b141      	cbz	r1, 402b32 <_fclose_r+0x66>
  402b20:	f104 0240 	add.w	r2, r4, #64	; 0x40
  402b24:	4291      	cmp	r1, r2
  402b26:	d002      	beq.n	402b2e <_fclose_r+0x62>
  402b28:	4628      	mov	r0, r5
  402b2a:	f7ff f8e1 	bl	401cf0 <_free_r>
  402b2e:	2000      	movs	r0, #0
  402b30:	6320      	str	r0, [r4, #48]	; 0x30
  402b32:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402b34:	b121      	cbz	r1, 402b40 <_fclose_r+0x74>
  402b36:	4628      	mov	r0, r5
  402b38:	f7ff f8da 	bl	401cf0 <_free_r>
  402b3c:	2100      	movs	r1, #0
  402b3e:	6461      	str	r1, [r4, #68]	; 0x44
  402b40:	2300      	movs	r3, #0
  402b42:	81a3      	strh	r3, [r4, #12]
  402b44:	f7ff f86f 	bl	401c26 <__sfp_lock_release>
  402b48:	e000      	b.n	402b4c <_fclose_r+0x80>
  402b4a:	460e      	mov	r6, r1
  402b4c:	4630      	mov	r0, r6
  402b4e:	bd70      	pop	{r4, r5, r6, pc}

00402b50 <fclose>:
  402b50:	4b02      	ldr	r3, [pc, #8]	; (402b5c <fclose+0xc>)
  402b52:	4601      	mov	r1, r0
  402b54:	6818      	ldr	r0, [r3, #0]
  402b56:	f7ff bfb9 	b.w	402acc <_fclose_r>
  402b5a:	bf00      	nop
  402b5c:	20000008 	.word	0x20000008

00402b60 <_fstat_r>:
  402b60:	b538      	push	{r3, r4, r5, lr}
  402b62:	4c07      	ldr	r4, [pc, #28]	; (402b80 <_fstat_r+0x20>)
  402b64:	2300      	movs	r3, #0
  402b66:	4605      	mov	r5, r0
  402b68:	4608      	mov	r0, r1
  402b6a:	4611      	mov	r1, r2
  402b6c:	6023      	str	r3, [r4, #0]
  402b6e:	f7fe fb49 	bl	401204 <_fstat>
  402b72:	1c43      	adds	r3, r0, #1
  402b74:	d102      	bne.n	402b7c <_fstat_r+0x1c>
  402b76:	6821      	ldr	r1, [r4, #0]
  402b78:	b101      	cbz	r1, 402b7c <_fstat_r+0x1c>
  402b7a:	6029      	str	r1, [r5, #0]
  402b7c:	bd38      	pop	{r3, r4, r5, pc}
  402b7e:	bf00      	nop
  402b80:	20000950 	.word	0x20000950

00402b84 <_isatty_r>:
  402b84:	b538      	push	{r3, r4, r5, lr}
  402b86:	4c06      	ldr	r4, [pc, #24]	; (402ba0 <_isatty_r+0x1c>)
  402b88:	2300      	movs	r3, #0
  402b8a:	4605      	mov	r5, r0
  402b8c:	4608      	mov	r0, r1
  402b8e:	6023      	str	r3, [r4, #0]
  402b90:	f7fe fb3e 	bl	401210 <_isatty>
  402b94:	1c43      	adds	r3, r0, #1
  402b96:	d102      	bne.n	402b9e <_isatty_r+0x1a>
  402b98:	6821      	ldr	r1, [r4, #0]
  402b9a:	b101      	cbz	r1, 402b9e <_isatty_r+0x1a>
  402b9c:	6029      	str	r1, [r5, #0]
  402b9e:	bd38      	pop	{r3, r4, r5, pc}
  402ba0:	20000950 	.word	0x20000950

00402ba4 <_lseek_r>:
  402ba4:	b538      	push	{r3, r4, r5, lr}
  402ba6:	4c07      	ldr	r4, [pc, #28]	; (402bc4 <_lseek_r+0x20>)
  402ba8:	4605      	mov	r5, r0
  402baa:	2000      	movs	r0, #0
  402bac:	6020      	str	r0, [r4, #0]
  402bae:	4608      	mov	r0, r1
  402bb0:	4611      	mov	r1, r2
  402bb2:	461a      	mov	r2, r3
  402bb4:	f7fe fb30 	bl	401218 <_lseek>
  402bb8:	1c43      	adds	r3, r0, #1
  402bba:	d102      	bne.n	402bc2 <_lseek_r+0x1e>
  402bbc:	6823      	ldr	r3, [r4, #0]
  402bbe:	b103      	cbz	r3, 402bc2 <_lseek_r+0x1e>
  402bc0:	602b      	str	r3, [r5, #0]
  402bc2:	bd38      	pop	{r3, r4, r5, pc}
  402bc4:	20000950 	.word	0x20000950

00402bc8 <_read_r>:
  402bc8:	b538      	push	{r3, r4, r5, lr}
  402bca:	4c07      	ldr	r4, [pc, #28]	; (402be8 <_read_r+0x20>)
  402bcc:	4605      	mov	r5, r0
  402bce:	2000      	movs	r0, #0
  402bd0:	6020      	str	r0, [r4, #0]
  402bd2:	4608      	mov	r0, r1
  402bd4:	4611      	mov	r1, r2
  402bd6:	461a      	mov	r2, r3
  402bd8:	f7fd fb0c 	bl	4001f4 <_read>
  402bdc:	1c43      	adds	r3, r0, #1
  402bde:	d102      	bne.n	402be6 <_read_r+0x1e>
  402be0:	6823      	ldr	r3, [r4, #0]
  402be2:	b103      	cbz	r3, 402be6 <_read_r+0x1e>
  402be4:	602b      	str	r3, [r5, #0]
  402be6:	bd38      	pop	{r3, r4, r5, pc}
  402be8:	20000950 	.word	0x20000950
  402bec:	00000001 	.word	0x00000001
  402bf0:	00000002 	.word	0x00000002
  402bf4:	00000004 	.word	0x00000004
  402bf8:	00000008 	.word	0x00000008
  402bfc:	00000010 	.word	0x00000010
  402c00:	00000020 	.word	0x00000020
  402c04:	00000040 	.word	0x00000040
  402c08:	00000080 	.word	0x00000080
  402c0c:	00000100 	.word	0x00000100
  402c10:	00000200 	.word	0x00000200
  402c14:	00000400 	.word	0x00000400
  402c18:	50202d2d 	.word	0x50202d2d
  402c1c:	4c204d57 	.word	0x4c204d57
  402c20:	45204445 	.word	0x45204445
  402c24:	706d6178 	.word	0x706d6178
  402c28:	2d20656c 	.word	0x2d20656c
  402c2c:	2d0a0d2d 	.word	0x2d0a0d2d
  402c30:	4153202d 	.word	0x4153202d
  402c34:	2d53344d 	.word	0x2d53344d
  402c38:	20324b45 	.word	0x20324b45
  402c3c:	0a0d2d2d 	.word	0x0a0d2d2d
  402c40:	43202d2d 	.word	0x43202d2d
  402c44:	69706d6f 	.word	0x69706d6f
  402c48:	3a64656c 	.word	0x3a64656c
  402c4c:	6e754a20 	.word	0x6e754a20
  402c50:	20343220 	.word	0x20343220
  402c54:	35313032 	.word	0x35313032
  402c58:	3a303020 	.word	0x3a303020
  402c5c:	313a3434 	.word	0x313a3434
  402c60:	2d2d2034 	.word	0x2d2d2034
  402c64:	0000000d 	.word	0x0000000d

00402c68 <_global_impure_ptr>:
  402c68:	20000010 000a0043                       ... C...

00402c70 <_init>:
  402c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402c72:	bf00      	nop
  402c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402c76:	bc08      	pop	{r3}
  402c78:	469e      	mov	lr, r3
  402c7a:	4770      	bx	lr

00402c7c <__init_array_start>:
  402c7c:	00401955 	.word	0x00401955

00402c80 <__frame_dummy_init_array_entry>:
  402c80:	00400145                                E.@.

00402c84 <_fini>:
  402c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402c86:	bf00      	nop
  402c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402c8a:	bc08      	pop	{r3}
  402c8c:	469e      	mov	lr, r3
  402c8e:	4770      	bx	lr

00402c90 <__fini_array_start>:
  402c90:	0040011d 	.word	0x0040011d
