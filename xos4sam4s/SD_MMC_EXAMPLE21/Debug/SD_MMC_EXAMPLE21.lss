
SD_MMC_EXAMPLE21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009858  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409858  00409858  00011858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000900  20000000  00409860  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004ec  20000900  0040a160  00018900  2**2
                  ALLOC
  4 .stack        00003004  20000dec  0040a64c  00018900  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00018900  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  0001892a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002dd1d  00000000  00000000  0001899b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000806d  00000000  00000000  000466b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015593  00000000  00000000  0004e725  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000014f0  00000000  00000000  00063cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000016c0  00000000  00000000  000651a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000186e6  00000000  00000000  00066868  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b5e9  00000000  00000000  0007ef4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005e8c2  00000000  00000000  0009a537  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003010  00000000  00000000  000f8dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003df0 	.word	0x20003df0
  400004:	0040301d 	.word	0x0040301d
  400008:	00403019 	.word	0x00403019
  40000c:	00403019 	.word	0x00403019
  400010:	00403019 	.word	0x00403019
  400014:	00403019 	.word	0x00403019
  400018:	00403019 	.word	0x00403019
	...
  40002c:	00403019 	.word	0x00403019
  400030:	00403019 	.word	0x00403019
  400034:	00000000 	.word	0x00000000
  400038:	00403019 	.word	0x00403019
  40003c:	00403019 	.word	0x00403019
  400040:	00403019 	.word	0x00403019
  400044:	00403019 	.word	0x00403019
  400048:	00403019 	.word	0x00403019
  40004c:	00403019 	.word	0x00403019
  400050:	00403019 	.word	0x00403019
  400054:	00403019 	.word	0x00403019
  400058:	00403019 	.word	0x00403019
  40005c:	00403019 	.word	0x00403019
  400060:	00403019 	.word	0x00403019
  400064:	00403019 	.word	0x00403019
  400068:	00000000 	.word	0x00000000
  40006c:	00402c4d 	.word	0x00402c4d
  400070:	00402c69 	.word	0x00402c69
  400074:	00402c85 	.word	0x00402c85
  400078:	00403019 	.word	0x00403019
  40007c:	00403019 	.word	0x00403019
	...
  400088:	00403019 	.word	0x00403019
  40008c:	00403019 	.word	0x00403019
  400090:	00403019 	.word	0x00403019
  400094:	00403019 	.word	0x00403019
  400098:	00403019 	.word	0x00403019
  40009c:	00403019 	.word	0x00403019
  4000a0:	00403019 	.word	0x00403019
  4000a4:	00403019 	.word	0x00403019
  4000a8:	00403019 	.word	0x00403019
  4000ac:	00403019 	.word	0x00403019
  4000b0:	00403019 	.word	0x00403019
  4000b4:	00403019 	.word	0x00403019
  4000b8:	00403019 	.word	0x00403019
  4000bc:	00403019 	.word	0x00403019
  4000c0:	00403019 	.word	0x00403019
  4000c4:	00403019 	.word	0x00403019
  4000c8:	00403019 	.word	0x00403019

004000cc <deregister_tm_clones>:
  4000cc:	b508      	push	{r3, lr}
  4000ce:	4805      	ldr	r0, [pc, #20]	; (4000e4 <deregister_tm_clones+0x18>)
  4000d0:	4b05      	ldr	r3, [pc, #20]	; (4000e8 <deregister_tm_clones+0x1c>)
  4000d2:	1a19      	subs	r1, r3, r0
  4000d4:	2906      	cmp	r1, #6
  4000d6:	d800      	bhi.n	4000da <deregister_tm_clones+0xe>
  4000d8:	bd08      	pop	{r3, pc}
  4000da:	4a04      	ldr	r2, [pc, #16]	; (4000ec <deregister_tm_clones+0x20>)
  4000dc:	2a00      	cmp	r2, #0
  4000de:	d0fb      	beq.n	4000d8 <deregister_tm_clones+0xc>
  4000e0:	4790      	blx	r2
  4000e2:	e7f9      	b.n	4000d8 <deregister_tm_clones+0xc>
  4000e4:	00409860 	.word	0x00409860
  4000e8:	00409863 	.word	0x00409863
  4000ec:	00000000 	.word	0x00000000

004000f0 <register_tm_clones>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4807      	ldr	r0, [pc, #28]	; (400110 <register_tm_clones+0x20>)
  4000f4:	4b07      	ldr	r3, [pc, #28]	; (400114 <register_tm_clones+0x24>)
  4000f6:	1a19      	subs	r1, r3, r0
  4000f8:	108a      	asrs	r2, r1, #2
  4000fa:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
  4000fe:	1059      	asrs	r1, r3, #1
  400100:	d100      	bne.n	400104 <register_tm_clones+0x14>
  400102:	bd08      	pop	{r3, pc}
  400104:	4a04      	ldr	r2, [pc, #16]	; (400118 <register_tm_clones+0x28>)
  400106:	2a00      	cmp	r2, #0
  400108:	d0fb      	beq.n	400102 <register_tm_clones+0x12>
  40010a:	4790      	blx	r2
  40010c:	e7f9      	b.n	400102 <register_tm_clones+0x12>
  40010e:	bf00      	nop
  400110:	00409860 	.word	0x00409860
  400114:	00409860 	.word	0x00409860
  400118:	00000000 	.word	0x00000000

0040011c <__do_global_dtors_aux>:
  40011c:	b510      	push	{r4, lr}
  40011e:	4c06      	ldr	r4, [pc, #24]	; (400138 <__do_global_dtors_aux+0x1c>)
  400120:	7823      	ldrb	r3, [r4, #0]
  400122:	b943      	cbnz	r3, 400136 <__do_global_dtors_aux+0x1a>
  400124:	f7ff ffd2 	bl	4000cc <deregister_tm_clones>
  400128:	4804      	ldr	r0, [pc, #16]	; (40013c <__do_global_dtors_aux+0x20>)
  40012a:	b110      	cbz	r0, 400132 <__do_global_dtors_aux+0x16>
  40012c:	4804      	ldr	r0, [pc, #16]	; (400140 <__do_global_dtors_aux+0x24>)
  40012e:	f3af 8000 	nop.w
  400132:	2101      	movs	r1, #1
  400134:	7021      	strb	r1, [r4, #0]
  400136:	bd10      	pop	{r4, pc}
  400138:	20000900 	.word	0x20000900
  40013c:	00000000 	.word	0x00000000
  400140:	00409860 	.word	0x00409860

00400144 <frame_dummy>:
  400144:	b508      	push	{r3, lr}
  400146:	4b08      	ldr	r3, [pc, #32]	; (400168 <frame_dummy+0x24>)
  400148:	b11b      	cbz	r3, 400152 <frame_dummy+0xe>
  40014a:	4808      	ldr	r0, [pc, #32]	; (40016c <frame_dummy+0x28>)
  40014c:	4908      	ldr	r1, [pc, #32]	; (400170 <frame_dummy+0x2c>)
  40014e:	f3af 8000 	nop.w
  400152:	4808      	ldr	r0, [pc, #32]	; (400174 <frame_dummy+0x30>)
  400154:	6801      	ldr	r1, [r0, #0]
  400156:	b111      	cbz	r1, 40015e <frame_dummy+0x1a>
  400158:	4a07      	ldr	r2, [pc, #28]	; (400178 <frame_dummy+0x34>)
  40015a:	b102      	cbz	r2, 40015e <frame_dummy+0x1a>
  40015c:	4790      	blx	r2
  40015e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400162:	f7ff bfc5 	b.w	4000f0 <register_tm_clones>
  400166:	bf00      	nop
  400168:	00000000 	.word	0x00000000
  40016c:	00409860 	.word	0x00409860
  400170:	20000904 	.word	0x20000904
  400174:	00409860 	.word	0x00409860
  400178:	00000000 	.word	0x00000000

0040017c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
  40017c:	b508      	push	{r3, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
  40017e:	f640 1326 	movw	r3, #2342	; 0x926
  400182:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400186:	7818      	ldrb	r0, [r3, #0]
  400188:	b930      	cbnz	r0, 400198 <sd_mmc_deselect_slot+0x1c>
		driver_deselect_device(sd_mmc_slot_sel);
  40018a:	f04f 0000 	mov.w	r0, #0
  40018e:	f242 31d1 	movw	r1, #9169	; 0x23d1
  400192:	f2c0 0140 	movt	r1, #64	; 0x40
  400196:	4788      	blx	r1
  400198:	bd08      	pop	{r3, pc}
  40019a:	bf00      	nop

0040019c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
  40019c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
  40019e:	f640 1320 	movw	r3, #2336	; 0x920
  4001a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4001a6:	681a      	ldr	r2, [r3, #0]
  4001a8:	f892 4022 	ldrb.w	r4, [r2, #34]	; 0x22
  4001ac:	f640 1126 	movw	r1, #2342	; 0x926
  4001b0:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4001b4:	7808      	ldrb	r0, [r1, #0]
  4001b6:	6811      	ldr	r1, [r2, #0]
  4001b8:	7c52      	ldrb	r2, [r2, #17]
  4001ba:	1c23      	adds	r3, r4, #0
  4001bc:	bf18      	it	ne
  4001be:	2301      	movne	r3, #1
  4001c0:	f242 345d 	movw	r4, #9053	; 0x235d
  4001c4:	f2c0 0440 	movt	r4, #64	; 0x40
  4001c8:	47a0      	blx	r4
  4001ca:	bd10      	pop	{r4, pc}

004001cc <sd_mmc_cmd9_mci>:
 * data (CSD) on the CMD line mci.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
  4001cc:	b508      	push	{r3, lr}
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
  4001ce:	f640 1320 	movw	r3, #2336	; 0x920
  4001d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4001d6:	6818      	ldr	r0, [r3, #0]
  4001d8:	8981      	ldrh	r1, [r0, #12]
  4001da:	f641 3009 	movw	r0, #6921	; 0x1b09
  4001de:	ea4f 4101 	mov.w	r1, r1, lsl #16
  4001e2:	f242 32f9 	movw	r2, #9209	; 0x23f9
  4001e6:	f2c0 0240 	movt	r2, #64	; 0x40
  4001ea:	4790      	blx	r2
  4001ec:	b170      	cbz	r0, 40020c <sd_mmc_cmd9_mci+0x40>
		return false;
	}
	driver_get_response_128(sd_mmc_card->csd);
  4001ee:	f640 1320 	movw	r3, #2336	; 0x920
  4001f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4001f6:	6818      	ldr	r0, [r3, #0]
  4001f8:	f100 0012 	add.w	r0, r0, #18
  4001fc:	f242 4131 	movw	r1, #9265	; 0x2431
  400200:	f2c0 0140 	movt	r1, #64	; 0x40
  400204:	4788      	blx	r1
	return true;
  400206:	f04f 0001 	mov.w	r0, #1
  40020a:	bd08      	pop	{r3, pc}
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_mci(void)
{
	if (!driver_send_cmd(SDMMC_MCI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  40020c:	f04f 0000 	mov.w	r0, #0
	}
	driver_get_response_128(sd_mmc_card->csd);
	return true;
}
  400210:	bd08      	pop	{r3, pc}
  400212:	bf00      	nop

00400214 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
  400214:	b510      	push	{r4, lr}
	if (slot >= SD_MMC_MEM_CNT) {
  400216:	2800      	cmp	r0, #0
  400218:	f040 80a8 	bne.w	40036c <sd_mmc_select_slot+0x158>
	}
	Assert(sd_mmc_nb_block_remaining == 0);

#if (defined SD_MMC_0_CD_GPIO)
	//! Card Detect pins
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
  40021c:	f240 030c 	movw	r3, #12
  400220:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400224:	6898      	ldr	r0, [r3, #8]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400226:	ea4f 1250 	mov.w	r2, r0, lsr #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40022a:	f502 1100 	add.w	r1, r2, #2097152	; 0x200000
  40022e:	f201 7307 	addw	r3, r1, #1799	; 0x707
  400232:	ea4f 2243 	mov.w	r2, r3, lsl #9
	base->PIO_CODR = mask & ~level;
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400236:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400238:	f000 001f 	and.w	r0, r0, #31
  40023c:	f04f 0101 	mov.w	r1, #1
  400240:	fa01 f300 	lsl.w	r3, r1, r0
  400244:	4213      	tst	r3, r2
  400246:	d01d      	beq.n	400284 <sd_mmc_select_slot+0x70>
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  400248:	f240 020c 	movw	r2, #12
  40024c:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400250:	7b90      	ldrb	r0, [r2, #14]
  400252:	4288      	cmp	r0, r1
  400254:	d10c      	bne.n	400270 <sd_mmc_select_slot+0x5c>
	return false;
}

static inline void SD_MMC_STOP_TIMEOUT(void)
{
	if (sd_mmc_sam_systick_used) {
  400256:	f640 131e 	movw	r3, #2334	; 0x91e
  40025a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40025e:	7819      	ldrb	r1, [r3, #0]
  400260:	b131      	cbz	r1, 400270 <sd_mmc_select_slot+0x5c>
		SysTick->CTRL = 0;
  400262:	f24e 0010 	movw	r0, #57360	; 0xe010
  400266:	f2ce 0000 	movt	r0, #57344	; 0xe000
  40026a:	f04f 0200 	mov.w	r2, #0
  40026e:	6002      	str	r2, [r0, #0]
	if (ioport_get_pin_level(sd_mmc_cards[slot].cd_gpio)
			!= SD_MMC_0_CD_DETECT_VALUE) {
		if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
			SD_MMC_STOP_TIMEOUT();
		}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  400270:	f240 030c 	movw	r3, #12
  400274:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400278:	f04f 0104 	mov.w	r1, #4
  40027c:	7399      	strb	r1, [r3, #14]
		return SD_MMC_ERR_NO_CARD;
  40027e:	f04f 0002 	mov.w	r0, #2
  400282:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
  400284:	f240 020c 	movw	r2, #12
  400288:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40028c:	7b90      	ldrb	r0, [r2, #14]
  40028e:	2804      	cmp	r0, #4
  400290:	d131      	bne.n	4002f6 <sd_mmc_select_slot+0xe2>
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
  400292:	f240 010c 	movw	r1, #12
  400296:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40029a:	f04f 0201 	mov.w	r2, #1
  40029e:	738a      	strb	r2, [r1, #14]
		static xTimeOutType xTimeOut;
#endif

static inline void SD_MMC_START_TIMEOUT(void)
{
	if (!SysTick->CTRL) {
  4002a0:	f24e 0310 	movw	r3, #57360	; 0xe010
  4002a4:	f2ce 0300 	movt	r3, #57344	; 0xe000
  4002a8:	6818      	ldr	r0, [r3, #0]
  4002aa:	b988      	cbnz	r0, 4002d0 <sd_mmc_select_slot+0xbc>
		sd_mmc_sam_systick_used = true;
  4002ac:	f640 101e 	movw	r0, #2334	; 0x91e
  4002b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4002b4:	7002      	strb	r2, [r0, #0]
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
  4002b6:	f24e 0310 	movw	r3, #57360	; 0xe010
  4002ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
  4002be:	f24e 11c0 	movw	r1, #57792	; 0xe1c0
  4002c2:	f2c0 01e4 	movt	r1, #228	; 0xe4
  4002c6:	6059      	str	r1, [r3, #4]
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
  4002c8:	601a      	str	r2, [r3, #0]
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  4002ca:	f04f 0002 	mov.w	r0, #2
  4002ce:	bd10      	pop	{r4, pc}
		sd_mmc_sam_systick_used = true;
		SysTick->LOAD = (sysclk_get_cpu_hz() / (8 * 1000))
				* SD_MMC_DEBOUNCE_TIMEOUT;
		SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
	} else {
		sd_mmc_sam_systick_used = false;
  4002d0:	f640 111e 	movw	r1, #2334	; 0x91e
  4002d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4002d8:	f04f 0200 	mov.w	r2, #0
  4002dc:	700a      	strb	r2, [r1, #0]
#ifdef FREERTOS_USED
		// Note: the define INCLUDE_vTaskDelay must be set to one
		// in FreeRTOSConfig.h file.
		vTaskSetTimeOutState(&xTimeOut);
#else
		delay_ms(SD_MMC_DEBOUNCE_TIMEOUT);
  4002de:	f64c 2025 	movw	r0, #51749	; 0xca25
  4002e2:	f2c0 0082 	movt	r0, #130	; 0x82
  4002e6:	f240 0301 	movw	r3, #1
  4002ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4002ee:	4798      	blx	r3
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD) {
		// A card plug on going, but this is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_DEBOUNCE;
		// Debounce + Power On Setup
		SD_MMC_START_TIMEOUT();
		return SD_MMC_ERR_NO_CARD;
  4002f0:	f04f 0002 	mov.w	r0, #2
  4002f4:	bd10      	pop	{r4, pc}
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
  4002f6:	2801      	cmp	r0, #1
  4002f8:	d116      	bne.n	400328 <sd_mmc_select_slot+0x114>
	}
}

static inline bool SD_MMC_IS_TIMEOUT(void)
{
	if (!sd_mmc_sam_systick_used) {
  4002fa:	f640 111e 	movw	r1, #2334	; 0x91e
  4002fe:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400302:	780b      	ldrb	r3, [r1, #0]
  400304:	2b00      	cmp	r3, #0
  400306:	d03a      	beq.n	40037e <sd_mmc_select_slot+0x16a>
		return (xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE);
#else
		return true;
#endif
	}
	if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
  400308:	f24e 0210 	movw	r2, #57360	; 0xe010
  40030c:	f2ce 0200 	movt	r2, #57344	; 0xe000
  400310:	6810      	ldr	r0, [r2, #0]
  400312:	f410 3f80 	tst.w	r0, #65536	; 0x10000
  400316:	d02c      	beq.n	400372 <sd_mmc_select_slot+0x15e>
		SysTick->CTRL = 0;
  400318:	f24e 0110 	movw	r1, #57360	; 0xe010
  40031c:	f2ce 0100 	movt	r1, #57344	; 0xe000
  400320:	f04f 0300 	mov.w	r3, #0
  400324:	600b      	str	r3, [r1, #0]
  400326:	e02a      	b.n	40037e <sd_mmc_select_slot+0x16a>
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
  400328:	f240 000c 	movw	r0, #12
  40032c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400330:	7b81      	ldrb	r1, [r0, #14]
  400332:	2903      	cmp	r1, #3
  400334:	d020      	beq.n	400378 <sd_mmc_select_slot+0x164>
		sd_mmc_cards[slot].high_speed = 0;
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
  400336:	f640 1426 	movw	r4, #2342	; 0x926
  40033a:	f2c2 0400 	movt	r4, #8192	; 0x2000
  40033e:	f04f 0300 	mov.w	r3, #0
  400342:	7023      	strb	r3, [r4, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
  400344:	f240 040c 	movw	r4, #12
  400348:	f2c2 0400 	movt	r4, #8192	; 0x2000
  40034c:	f640 1220 	movw	r2, #2336	; 0x920
  400350:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400354:	6014      	str	r4, [r2, #0]
	sd_mmc_configure_slot();
  400356:	f240 109d 	movw	r0, #413	; 0x19d
  40035a:	f2c0 0040 	movt	r0, #64	; 0x40
  40035e:	4780      	blx	r0
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
  400360:	7ba0      	ldrb	r0, [r4, #14]

	// Initialize interface
	sd_mmc_slot_sel = slot;
	sd_mmc_card = &sd_mmc_cards[slot];
	sd_mmc_configure_slot();
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
  400362:	2802      	cmp	r0, #2
  400364:	bf14      	ite	ne
  400366:	2000      	movne	r0, #0
  400368:	2001      	moveq	r0, #1
  40036a:	bd10      	pop	{r4, pc}
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
	if (slot >= SD_MMC_MEM_CNT) {
		return SD_MMC_ERR_SLOT;
  40036c:	f04f 0004 	mov.w	r0, #4
  400370:	bd10      	pop	{r4, pc}
		return SD_MMC_ERR_NO_CARD;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_DEBOUNCE) {
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
  400372:	f04f 0002 	mov.w	r0, #2
  400376:	bd10      	pop	{r4, pc}
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
		sd_mmc_cards[slot].bus_width = 1;
		sd_mmc_cards[slot].high_speed = 0;
	}
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
  400378:	f04f 0003 	mov.w	r0, #3
  40037c:	bd10      	pop	{r4, pc}
		if (!SD_MMC_IS_TIMEOUT()) {
			// Debounce on going
			return SD_MMC_ERR_NO_CARD;
		}
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
  40037e:	f240 000c 	movw	r0, #12
  400382:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400386:	f04f 0202 	mov.w	r2, #2
  40038a:	7382      	strb	r2, [r0, #14]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
  40038c:	f44f 51d4 	mov.w	r1, #6784	; 0x1a80
  400390:	f2c0 0106 	movt	r1, #6
  400394:	6001      	str	r1, [r0, #0]
		sd_mmc_cards[slot].bus_width = 1;
  400396:	f04f 0301 	mov.w	r3, #1
  40039a:	7443      	strb	r3, [r0, #17]
		sd_mmc_cards[slot].high_speed = 0;
  40039c:	f04f 0200 	mov.w	r2, #0
  4003a0:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
  4003a4:	e7c0      	b.n	400328 <sd_mmc_select_slot+0x114>
  4003a6:	bf00      	nop

004003a8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
  4003a8:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
  4003aa:	f240 030c 	movw	r3, #12
  4003ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4003b2:	f04f 0204 	mov.w	r2, #4
  4003b6:	739a      	strb	r2, [r3, #14]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
  4003b8:	f640 1026 	movw	r0, #2342	; 0x926
  4003bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4003c0:	f04f 01ff 	mov.w	r1, #255	; 0xff
  4003c4:	7001      	strb	r1, [r0, #0]
	driver_init();
  4003c6:	f242 3319 	movw	r3, #8985	; 0x2319
  4003ca:	f2c0 0340 	movt	r3, #64	; 0x40
  4003ce:	4798      	blx	r3
  4003d0:	bd08      	pop	{r3, pc}
  4003d2:	bf00      	nop

004003d4 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
  4003d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003d8:	b095      	sub	sp, #84	; 0x54
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
  4003da:	f240 2315 	movw	r3, #533	; 0x215
  4003de:	f2c0 0340 	movt	r3, #64	; 0x40
  4003e2:	4798      	blx	r3
  4003e4:	4604      	mov	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
  4003e6:	2801      	cmp	r0, #1
  4003e8:	d005      	beq.n	4003f6 <sd_mmc_check+0x22>
		sd_mmc_deselect_slot();
  4003ea:	f240 117d 	movw	r1, #381	; 0x17d
  4003ee:	f2c0 0140 	movt	r1, #64	; 0x40
  4003f2:	4788      	blx	r1
		return sd_mmc_err;
  4003f4:	e3f5      	b.n	400be2 <sd_mmc_check+0x80e>
static bool sd_mmc_mci_card_init(void)
{
	uint8_t v2 = 0;

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
  4003f6:	f640 1020 	movw	r0, #2336	; 0x920
  4003fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4003fe:	6801      	ldr	r1, [r0, #0]
  400400:	f04f 0201 	mov.w	r2, #1
  400404:	73ca      	strb	r2, [r1, #15]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
  400406:	f04f 0500 	mov.w	r5, #0
  40040a:	740d      	strb	r5, [r1, #16]
	sd_mmc_card->rca = 0;
  40040c:	818d      	strh	r5, [r1, #12]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
  40040e:	f242 33d5 	movw	r3, #9173	; 0x23d5
  400412:	f2c0 0340 	movt	r3, #64	; 0x40
  400416:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400418:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40041c:	4629      	mov	r1, r5
  40041e:	f242 32f9 	movw	r2, #9209	; 0x23f9
  400422:	f2c0 0240 	movt	r2, #64	; 0x40
  400426:	4790      	blx	r2
  400428:	2800      	cmp	r0, #0
  40042a:	f000 837e 	beq.w	400b2a <sd_mmc_check+0x756>
{
	uint32_t resp;

	*v2 = 0;
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
  40042e:	f245 5008 	movw	r0, #21768	; 0x5508
  400432:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
  400436:	f242 33f9 	movw	r3, #9209	; 0x23f9
  40043a:	f2c0 0340 	movt	r3, #64	; 0x40
  40043e:	4798      	blx	r3
  400440:	2800      	cmp	r0, #0
  400442:	f000 8380 	beq.w	400b46 <sd_mmc_check+0x772>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
	}
	// Check R7 response
	resp = driver_get_response();
  400446:	f242 4029 	movw	r0, #9257	; 0x2429
  40044a:	f2c0 0040 	movt	r0, #64	; 0x40
  40044e:	4780      	blx	r0
	if (resp == 0xFFFFFFFF) {
  400450:	f1b0 3fff 	cmp.w	r0, #4294967295
  400454:	f000 837a 	beq.w	400b4c <sd_mmc_check+0x778>
		// No compliance R7 value
		return true; // It is not a V2
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
  400458:	ea4f 5100 	mov.w	r1, r0, lsl #20
  40045c:	ea4f 5211 	mov.w	r2, r1, lsr #20
  400460:	f5b2 7fd5 	cmp.w	r2, #426	; 0x1aa
  400464:	f040 8361 	bne.w	400b2a <sd_mmc_check+0x756>
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
  400468:	f04f 0601 	mov.w	r6, #1
  40046c:	e370      	b.n	400b50 <sd_mmc_check+0x77c>
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40046e:	f241 1737 	movw	r7, #4407	; 0x1137
  400472:	f04f 0800 	mov.w	r8, #0
  400476:	f242 35f9 	movw	r5, #9209	; 0x23f9
  40047a:	f2c0 0540 	movt	r5, #64	; 0x40
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  40047e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400482:	f242 4a29 	movw	sl, #9257	; 0x2429
  400486:	f2c0 0a40 	movt	sl, #64	; 0x40
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  40048a:	4638      	mov	r0, r7
  40048c:	4641      	mov	r1, r8
  40048e:	47a8      	blx	r5
  400490:	2800      	cmp	r0, #0
  400492:	f040 83bc 	bne.w	400c0e <sd_mmc_check+0x83a>
  400496:	e366      	b.n	400b66 <sd_mmc_check+0x792>
  400498:	4638      	mov	r0, r7
  40049a:	4641      	mov	r1, r8
  40049c:	47a8      	blx	r5
  40049e:	2800      	cmp	r0, #0
  4004a0:	f000 8361 	beq.w	400b66 <sd_mmc_check+0x792>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  4004a4:	4649      	mov	r1, r9
  4004a6:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  4004aa:	f244 5029 	movw	r0, #17705	; 0x4529
  4004ae:	2e00      	cmp	r6, #0
  4004b0:	bf08      	it	eq
  4004b2:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
  4004b6:	47a8      	blx	r5
  4004b8:	2800      	cmp	r0, #0
  4004ba:	f000 8354 	beq.w	400b66 <sd_mmc_check+0x792>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  4004be:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
  4004c0:	2800      	cmp	r0, #0
  4004c2:	da0d      	bge.n	4004e0 <sd_mmc_check+0x10c>
			// Card is ready
			if ((resp & OCR_CCS) != 0) {
  4004c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  4004c8:	f000 8362 	beq.w	400b90 <sd_mmc_check+0x7bc>
				sd_mmc_card->type |= CARD_TYPE_HC;
  4004cc:	f640 1220 	movw	r2, #2336	; 0x920
  4004d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4004d4:	6813      	ldr	r3, [r2, #0]
  4004d6:	7bd8      	ldrb	r0, [r3, #15]
  4004d8:	f040 0108 	orr.w	r1, r0, #8
  4004dc:	73d9      	strb	r1, [r3, #15]
  4004de:	e357      	b.n	400b90 <sd_mmc_check+0x7bc>
  4004e0:	f10b 3bff 	add.w	fp, fp, #4294967295
	 */
	retry = 2100;
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
  4004e4:	4638      	mov	r0, r7
  4004e6:	4641      	mov	r1, r8
  4004e8:	47a8      	blx	r5
  4004ea:	2800      	cmp	r0, #0
  4004ec:	f040 83b6 	bne.w	400c5c <sd_mmc_check+0x888>
  4004f0:	e339      	b.n	400b66 <sd_mmc_check+0x792>
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  4004f2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  4004f6:	f2c4 051f 	movt	r5, #16415	; 0x401f
  4004fa:	f244 5601 	movw	r6, #17665	; 0x4501
  4004fe:	f242 37f9 	movw	r7, #9209	; 0x23f9
  400502:	f2c0 0740 	movt	r7, #64	; 0x40
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400506:	f242 4929 	movw	r9, #9257	; 0x2429
  40050a:	f2c0 0940 	movt	r9, #64	; 0x40
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  40050e:	4630      	mov	r0, r6
  400510:	4629      	mov	r1, r5
  400512:	47b8      	blx	r7
  400514:	2800      	cmp	r0, #0
  400516:	f040 8368 	bne.w	400bea <sd_mmc_check+0x816>
  40051a:	e344      	b.n	400ba6 <sd_mmc_check+0x7d2>
  40051c:	4630      	mov	r0, r6
  40051e:	4629      	mov	r1, r5
  400520:	47b8      	blx	r7
  400522:	2800      	cmp	r0, #0
  400524:	f000 833f 	beq.w	400ba6 <sd_mmc_check+0x7d2>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400528:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  40052a:	2800      	cmp	r0, #0
  40052c:	da0c      	bge.n	400548 <sd_mmc_check+0x174>
			// Check OCR value
			if ((resp & OCR_ACCESS_MODE_MASK)
  40052e:	f000 41c0 	and.w	r1, r0, #1610612736	; 0x60000000
  400532:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  400536:	f040 8339 	bne.w	400bac <sd_mmc_check+0x7d8>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
  40053a:	48a5      	ldr	r0, [pc, #660]	; (4007d0 <sd_mmc_check+0x3fc>)
  40053c:	6803      	ldr	r3, [r0, #0]
  40053e:	7bda      	ldrb	r2, [r3, #15]
  400540:	f042 0108 	orr.w	r1, r2, #8
  400544:	73d9      	strb	r1, [r3, #15]
  400546:	e331      	b.n	400bac <sd_mmc_check+0x7d8>
  400548:	f108 38ff 	add.w	r8, r8, #4294967295
	 * 6 = cmd byte size
	 * 6 = response byte size
	 */
	retry = 4200;
	do {
		if (!driver_send_cmd(MMC_MCI_CMD1_SEND_OP_COND,
  40054c:	4630      	mov	r0, r6
  40054e:	4629      	mov	r1, r5
  400550:	47b8      	blx	r7
  400552:	2800      	cmp	r0, #0
  400554:	f040 8352 	bne.w	400bfc <sd_mmc_check+0x828>
  400558:	e325      	b.n	400ba6 <sd_mmc_check+0x7d2>
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
		return false;
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
  40055a:	489d      	ldr	r0, [pc, #628]	; (4007d0 <sd_mmc_check+0x3fc>)
  40055c:	6801      	ldr	r1, [r0, #0]
  40055e:	f04f 0201 	mov.w	r2, #1
  400562:	818a      	strh	r2, [r1, #12]
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
  400564:	f241 1003 	movw	r0, #4355	; 0x1103
  400568:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40056c:	4b99      	ldr	r3, [pc, #612]	; (4007d4 <sd_mmc_check+0x400>)
  40056e:	4798      	blx	r3
  400570:	2800      	cmp	r0, #0
  400572:	f000 8121 	beq.w	4007b8 <sd_mmc_check+0x3e4>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
  400576:	4898      	ldr	r0, [pc, #608]	; (4007d8 <sd_mmc_check+0x404>)
  400578:	4780      	blx	r0
  40057a:	2800      	cmp	r0, #0
  40057c:	f000 811f 	beq.w	4007be <sd_mmc_check+0x3ea>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
  400580:	4993      	ldr	r1, [pc, #588]	; (4007d0 <sd_mmc_check+0x3fc>)
  400582:	680b      	ldr	r3, [r1, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400584:	7c9a      	ldrb	r2, [r3, #18]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  400586:	f3c2 0083 	ubfx	r0, r2, #2, #4
  40058a:	f100 32ff 	add.w	r2, r0, #4294967295
  40058e:	2a03      	cmp	r2, #3
  400590:	d803      	bhi.n	40059a <sd_mmc_check+0x1c6>
  400592:	e8df f002 	tbb	[pc, r2]
  400596:	0a06      	.short	0x0a06
  400598:	120e      	.short	0x120e
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
  40059a:	f04f 0012 	mov.w	r0, #18
  40059e:	7418      	strb	r0, [r3, #16]
  4005a0:	e00e      	b.n	4005c0 <sd_mmc_check+0x1ec>
		break;

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
  4005a2:	f04f 0114 	mov.w	r1, #20
  4005a6:	7419      	strb	r1, [r3, #16]
  4005a8:	e00a      	b.n	4005c0 <sd_mmc_check+0x1ec>
		break;

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
  4005aa:	f04f 0222 	mov.w	r2, #34	; 0x22
  4005ae:	741a      	strb	r2, [r3, #16]
  4005b0:	e006      	b.n	4005c0 <sd_mmc_check+0x1ec>
		break;

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
  4005b2:	f04f 0030 	mov.w	r0, #48	; 0x30
  4005b6:	7418      	strb	r0, [r3, #16]
  4005b8:	e002      	b.n	4005c0 <sd_mmc_check+0x1ec>
		break;

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
  4005ba:	f04f 0140 	mov.w	r1, #64	; 0x40
  4005be:	7419      	strb	r1, [r3, #16]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4005c0:	7d5a      	ldrb	r2, [r3, #21]
		break;
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  4005c2:	f002 0007 	and.w	r0, r2, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  4005c6:	4985      	ldr	r1, [pc, #532]	; (4007dc <sd_mmc_check+0x408>)
  4005c8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  4005cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4005d0:	fb00 f101 	mul.w	r1, r0, r1
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
  4005d4:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  4005d8:	4881      	ldr	r0, [pc, #516]	; (4007e0 <sd_mmc_check+0x40c>)
  4005da:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4005de:	fb02 f101 	mul.w	r1, r2, r1
  4005e2:	6019      	str	r1, [r3, #0]
  4005e4:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005e6:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4005e8:	7e5a      	ldrb	r2, [r3, #25]
  4005ea:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005ee:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4005f2:	ea40 11a1 	orr.w	r1, r0, r1, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  4005f6:	ea4f 5201 	mov.w	r2, r1, lsl #20
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
  4005fa:	ea4f 5112 	mov.w	r1, r2, lsr #20
  4005fe:	f512 1f80 	cmn.w	r2, #1048576	; 0x100000
  400602:	d015      	beq.n	400630 <sd_mmc_check+0x25c>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400604:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400606:	7eda      	ldrb	r2, [r3, #27]
  400608:	ea4f 0242 	mov.w	r2, r2, lsl #1
  40060c:	ea42 10e0 	orr.w	r0, r2, r0, asr #7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  400610:	f101 0101 	add.w	r1, r1, #1
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  400614:	f000 0207 	and.w	r2, r0, #7
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  400618:	f102 0202 	add.w	r2, r2, #2
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
  40061c:	fa01 f102 	lsl.w	r1, r1, r2
  400620:	7dd8      	ldrb	r0, [r3, #23]
  400622:	f000 020f 	and.w	r2, r0, #15
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400626:	fa01 f102 	lsl.w	r1, r1, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
  40062a:	ea4f 2091 	mov.w	r0, r1, lsr #10
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  40062e:	6058      	str	r0, [r3, #4]
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  400630:	899b      	ldrh	r3, [r3, #12]
	if (!sd_mmc_cmd9_mci()) {
		return false;
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  400632:	f243 1007 	movw	r0, #12551	; 0x3107
  400636:	ea4f 4103 	mov.w	r1, r3, lsl #16
  40063a:	4a66      	ldr	r2, [pc, #408]	; (4007d4 <sd_mmc_check+0x400>)
  40063c:	4790      	blx	r2
  40063e:	2800      	cmp	r0, #0
  400640:	f000 80c0 	beq.w	4007c4 <sd_mmc_check+0x3f0>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
  400644:	4d62      	ldr	r5, [pc, #392]	; (4007d0 <sd_mmc_check+0x3fc>)
  400646:	6829      	ldr	r1, [r5, #0]
  400648:	7c08      	ldrb	r0, [r1, #16]
  40064a:	283f      	cmp	r0, #63	; 0x3f
  40064c:	f240 809c 	bls.w	400788 <sd_mmc_check+0x3b4>
{
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
  400650:	f04f 0100 	mov.w	r1, #0
  400654:	9100      	str	r1, [sp, #0]
  400656:	f241 1008 	movw	r0, #4360	; 0x1108
  40065a:	f2c0 0008 	movt	r0, #8
  40065e:	f44f 7200 	mov.w	r2, #512	; 0x200
  400662:	f04f 0301 	mov.w	r3, #1
  400666:	4d5f      	ldr	r5, [pc, #380]	; (4007e4 <sd_mmc_check+0x410>)
  400668:	47a8      	blx	r5
  40066a:	2800      	cmp	r0, #0
  40066c:	f000 82a8 	beq.w	400bc0 <sd_mmc_check+0x7ec>
  400670:	f04f 0500 	mov.w	r5, #0
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
		if (!driver_read_word(&ext_csd)) {
  400674:	4e5c      	ldr	r6, [pc, #368]	; (4007e8 <sd_mmc_check+0x414>)
  400676:	a802      	add	r0, sp, #8
  400678:	47b0      	blx	r6
  40067a:	2800      	cmp	r0, #0
  40067c:	f000 82a0 	beq.w	400bc0 <sd_mmc_check+0x7ec>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
  400680:	f105 0501 	add.w	r5, r5, #1
  400684:	b2ad      	uxth	r5, r5
  400686:	2d32      	cmp	r5, #50	; 0x32
  400688:	d1f5      	bne.n	400676 <sd_mmc_check+0x2a2>
		if (!driver_read_word(&ext_csd)) {
			return false;
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
  40068a:	9f02      	ldr	r7, [sp, #8]
  40068c:	f007 0302 	and.w	r3, r7, #2
  400690:	b2de      	uxtb	r6, r3
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
  400692:	4a4f      	ldr	r2, [pc, #316]	; (4007d0 <sd_mmc_check+0x3fc>)
  400694:	6810      	ldr	r0, [r2, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400696:	7e87      	ldrb	r7, [r0, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  400698:	7e01      	ldrb	r1, [r0, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40069a:	7e43      	ldrb	r3, [r0, #25]
  40069c:	ea4f 0283 	mov.w	r2, r3, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006a0:	ea42 2081 	orr.w	r0, r2, r1, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4006a4:	ea40 17a7 	orr.w	r7, r0, r7, asr #6
	}
	value &=  ((uint32_t)1 << size) - 1;
  4006a8:	ea4f 5107 	mov.w	r1, r7, lsl #20
  4006ac:	f511 1f80 	cmn.w	r1, #1048576	; 0x100000
  4006b0:	d11a      	bne.n	4006e8 <sd_mmc_check+0x314>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
			if (!driver_read_word(&sec_count)) {
  4006b2:	4f4d      	ldr	r7, [pc, #308]	; (4007e8 <sd_mmc_check+0x414>)
  4006b4:	a803      	add	r0, sp, #12
  4006b6:	47b8      	blx	r7
  4006b8:	2800      	cmp	r0, #0
  4006ba:	f000 8281 	beq.w	400bc0 <sd_mmc_check+0x7ec>
			& MMC_CTYPE_52MHZ;

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
  4006be:	f105 0501 	add.w	r5, r5, #1
  4006c2:	b2ad      	uxth	r5, r5
  4006c4:	2d35      	cmp	r5, #53	; 0x35
  4006c6:	d9f5      	bls.n	4006b4 <sd_mmc_check+0x2e0>
			if (!driver_read_word(&sec_count)) {
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
  4006c8:	4b41      	ldr	r3, [pc, #260]	; (4007d0 <sd_mmc_check+0x3fc>)
  4006ca:	681a      	ldr	r2, [r3, #0]
  4006cc:	9803      	ldr	r0, [sp, #12]
  4006ce:	ea4f 0750 	mov.w	r7, r0, lsr #1
  4006d2:	6057      	str	r7, [r2, #4]
  4006d4:	e008      	b.n	4006e8 <sd_mmc_check+0x314>
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
		if (!driver_read_word(&sec_count)) {
  4006d6:	a803      	add	r0, sp, #12
  4006d8:	47b8      	blx	r7
  4006da:	2800      	cmp	r0, #0
  4006dc:	f000 8270 	beq.w	400bc0 <sd_mmc_check+0x7ec>
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4006e0:	f105 0501 	add.w	r5, r5, #1
  4006e4:	b2ad      	uxth	r5, r5
  4006e6:	e000      	b.n	4006ea <sd_mmc_check+0x316>
		if (!driver_read_word(&sec_count)) {
  4006e8:	4f3f      	ldr	r7, [pc, #252]	; (4007e8 <sd_mmc_check+0x414>)
				return false;
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
  4006ea:	2d7f      	cmp	r5, #127	; 0x7f
  4006ec:	d9f3      	bls.n	4006d6 <sd_mmc_check+0x302>
  4006ee:	e26a      	b.n	400bc6 <sd_mmc_check+0x7f2>
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
  4006f0:	4d3e      	ldr	r5, [pc, #248]	; (4007ec <sd_mmc_check+0x418>)
  4006f2:	7828      	ldrb	r0, [r5, #0]
  4006f4:	4a3e      	ldr	r2, [pc, #248]	; (4007f0 <sd_mmc_check+0x41c>)
  4006f6:	4790      	blx	r2
  4006f8:	4605      	mov	r5, r0
 */
static bool mmc_cmd6_set_bus_width(uint8_t bus_width)
{
	uint32_t arg;

	switch (bus_width) {
  4006fa:	2804      	cmp	r0, #4
  4006fc:	d00b      	beq.n	400716 <sd_mmc_check+0x342>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  4006fe:	f44f 7100 	mov.w	r1, #512	; 0x200
  400702:	f2c0 11b7 	movt	r1, #439	; 0x1b7
  400706:	f04f 0000 	mov.w	r0, #0
  40070a:	f2c0 10b7 	movt	r0, #439	; 0x1b7
  40070e:	2d08      	cmp	r5, #8
  400710:	bf18      	it	ne
  400712:	4601      	movne	r1, r0
  400714:	e003      	b.n	40071e <sd_mmc_check+0x34a>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_8BIT;
		break;
	case 4:
		arg = MMC_CMD6_ACCESS_SET_BITS
  400716:	f44f 7180 	mov.w	r1, #256	; 0x100
  40071a:	f2c0 11b7 	movt	r1, #439	; 0x1b7
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_1BIT;
		break;
	}
	if (!driver_send_cmd(MMC_CMD6_SWITCH, arg)) {
  40071e:	f243 1006 	movw	r0, #12550	; 0x3106
  400722:	4b2c      	ldr	r3, [pc, #176]	; (4007d4 <sd_mmc_check+0x400>)
  400724:	4798      	blx	r3
  400726:	2800      	cmp	r0, #0
  400728:	f000 8255 	beq.w	400bd6 <sd_mmc_check+0x802>
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  40072c:	4931      	ldr	r1, [pc, #196]	; (4007f4 <sd_mmc_check+0x420>)
  40072e:	4788      	blx	r1
  400730:	f010 0f80 	tst.w	r0, #128	; 0x80
  400734:	f040 824f 	bne.w	400bd6 <sd_mmc_check+0x802>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->bus_width = bus_width;
  400738:	4a25      	ldr	r2, [pc, #148]	; (4007d0 <sd_mmc_check+0x3fc>)
  40073a:	6810      	ldr	r0, [r2, #0]
  40073c:	7445      	strb	r5, [r0, #17]
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
			}
			// Reinitialize the slot with the bus width
			sd_mmc_configure_slot();
  40073e:	4b2e      	ldr	r3, [pc, #184]	; (4007f8 <sd_mmc_check+0x424>)
  400740:	4798      	blx	r3
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
  400742:	492e      	ldr	r1, [pc, #184]	; (4007fc <sd_mmc_check+0x428>)
  400744:	4788      	blx	r1
  400746:	b338      	cbz	r0, 400798 <sd_mmc_check+0x3c4>
  400748:	b336      	cbz	r6, 400798 <sd_mmc_check+0x3c4>
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd6_set_high_speed(void)
{
	if (!driver_send_cmd(MMC_CMD6_SWITCH,
  40074a:	f243 1006 	movw	r0, #12550	; 0x3106
  40074e:	f44f 7180 	mov.w	r1, #256	; 0x100
  400752:	f2c0 31b9 	movt	r1, #953	; 0x3b9
  400756:	4a1f      	ldr	r2, [pc, #124]	; (4007d4 <sd_mmc_check+0x400>)
  400758:	4790      	blx	r2
  40075a:	2800      	cmp	r0, #0
  40075c:	f000 823e 	beq.w	400bdc <sd_mmc_check+0x808>
			MMC_CMD6_ACCESS_WRITE_BYTE
			| MMC_CMD6_INDEX_HS_TIMING
			| MMC_CMD6_VALUE_HS_TIMING_ENABLE)) {
		return false;
	}
	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400760:	4824      	ldr	r0, [pc, #144]	; (4007f4 <sd_mmc_check+0x420>)
  400762:	4780      	blx	r0
  400764:	f010 0f80 	tst.w	r0, #128	; 0x80
  400768:	f040 8238 	bne.w	400bdc <sd_mmc_check+0x808>
		// No supported, it is not a protocol error
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	sd_mmc_card->high_speed = 1;
  40076c:	4e18      	ldr	r6, [pc, #96]	; (4007d0 <sd_mmc_check+0x3fc>)
  40076e:	6837      	ldr	r7, [r6, #0]
  400770:	f04f 0501 	mov.w	r5, #1
  400774:	f887 5022 	strb.w	r5, [r7, #34]	; 0x22
	sd_mmc_card->clock = 52000000lu;
  400778:	f44f 43ea 	mov.w	r3, #29952	; 0x7500
  40077c:	f2c0 3319 	movt	r3, #793	; 0x319
  400780:	603b      	str	r3, [r7, #0]
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
			}
			// Reinitialize the slot with the new speed
			sd_mmc_configure_slot();
  400782:	491d      	ldr	r1, [pc, #116]	; (4007f8 <sd_mmc_check+0x424>)
  400784:	4788      	blx	r1
  400786:	e007      	b.n	400798 <sd_mmc_check+0x3c4>
		}
	} else {
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
  400788:	4e1b      	ldr	r6, [pc, #108]	; (4007f8 <sd_mmc_check+0x424>)
  40078a:	47b0      	blx	r6
  40078c:	e004      	b.n	400798 <sd_mmc_check+0x3c4>
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40078e:	4640      	mov	r0, r8
  400790:	4639      	mov	r1, r7
  400792:	47b0      	blx	r6
  400794:	b140      	cbz	r0, 4007a8 <sd_mmc_check+0x3d4>
  400796:	e018      	b.n	4007ca <sd_mmc_check+0x3f6>
		arg = MMC_CMD6_ACCESS_SET_BITS
				| MMC_CMD6_INDEX_BUS_WIDTH
				| MMC_CMD6_VALUE_BUS_WIDTH_4BIT;
		break;
	default:
		arg = MMC_CMD6_ACCESS_SET_BITS
  400798:	f04f 050a 	mov.w	r5, #10
		// Retry is a WORKAROUND for no compliance card (Atmel Internal ref. MMC19):
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  40079c:	f241 1810 	movw	r8, #4368	; 0x1110
  4007a0:	f44f 7700 	mov.w	r7, #512	; 0x200
  4007a4:	4e0b      	ldr	r6, [pc, #44]	; (4007d4 <sd_mmc_check+0x400>)
  4007a6:	e7f2      	b.n	40078e <sd_mmc_check+0x3ba>
  4007a8:	f105 32ff 	add.w	r2, r5, #4294967295
		// Reinitialize the slot with the new speed
		sd_mmc_configure_slot();
	}

	uint8_t retry = 10;
	while (retry--) {
  4007ac:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
  4007b0:	d1ed      	bne.n	40078e <sd_mmc_check+0x3ba>
		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
		}
	}
	return false;
  4007b2:	f04f 0000 	mov.w	r0, #0
  4007b6:	e1a9      	b.n	400b0c <sd_mmc_check+0x738>
	}
	// Assign relative address to the card.
	sd_mmc_card->rca = 1;
	if (!driver_send_cmd(MMC_CMD3_SET_RELATIVE_ADDR,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  4007b8:	f04f 0000 	mov.w	r0, #0
  4007bc:	e1a6      	b.n	400b0c <sd_mmc_check+0x738>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_mci()) {
		return false;
  4007be:	f04f 0000 	mov.w	r0, #0
  4007c2:	e1a3      	b.n	400b0c <sd_mmc_check+0x738>
	}
	mmc_decode_csd();
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
  4007c4:	f04f 0000 	mov.w	r0, #0
  4007c8:	e1a0      	b.n	400b0c <sd_mmc_check+0x738>
		// These cards seem not ready immediatly
		// after the end of busy of mmc_cmd6_set_high_speed()

		// Set default block size
		if (driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
			return true;
  4007ca:	f04f 0001 	mov.w	r0, #1
  4007ce:	e19d      	b.n	400b0c <sd_mmc_check+0x738>
  4007d0:	20000920 	.word	0x20000920
  4007d4:	004023f9 	.word	0x004023f9
  4007d8:	004001cd 	.word	0x004001cd
  4007dc:	0040888c 	.word	0x0040888c
  4007e0:	004088a8 	.word	0x004088a8
  4007e4:	00402491 	.word	0x00402491
  4007e8:	0040256d 	.word	0x0040256d
  4007ec:	20000926 	.word	0x20000926
  4007f0:	00402349 	.word	0x00402349
  4007f4:	00402429 	.word	0x00402429
  4007f8:	0040019d 	.word	0x0040019d
  4007fc:	00402355 	.word	0x00402355
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
		// SD MEMORY, Put the Card in Identify Mode
		// Note: The CID is not used in this stack
		if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400800:	f645 3002 	movw	r0, #23298	; 0x5b02
  400804:	f04f 0100 	mov.w	r1, #0
  400808:	f242 32f9 	movw	r2, #9209	; 0x23f9
  40080c:	f2c0 0240 	movt	r2, #64	; 0x40
  400810:	4790      	blx	r2
  400812:	2800      	cmp	r0, #0
  400814:	f000 8189 	beq.w	400b2a <sd_mmc_check+0x756>
			return false;
		}
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
  400818:	f245 1003 	movw	r0, #20739	; 0x5103
  40081c:	f04f 0100 	mov.w	r1, #0
  400820:	f242 33f9 	movw	r3, #9209	; 0x23f9
  400824:	f2c0 0340 	movt	r3, #64	; 0x40
  400828:	4798      	blx	r3
  40082a:	2800      	cmp	r0, #0
  40082c:	f000 817d 	beq.w	400b2a <sd_mmc_check+0x756>
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
  400830:	f640 1520 	movw	r5, #2336	; 0x920
  400834:	f2c2 0500 	movt	r5, #8192	; 0x2000
  400838:	682e      	ldr	r6, [r5, #0]
  40083a:	f242 4129 	movw	r1, #9257	; 0x2429
  40083e:	f2c0 0140 	movt	r1, #64	; 0x40
  400842:	4788      	blx	r1
  400844:	ea4f 4010 	mov.w	r0, r0, lsr #16
  400848:	81b0      	strh	r0, [r6, #12]

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  40084a:	682a      	ldr	r2, [r5, #0]
  40084c:	7bd3      	ldrb	r3, [r2, #15]
  40084e:	f013 0f01 	tst.w	r3, #1
  400852:	d056      	beq.n	400902 <sd_mmc_check+0x52e>
		if (!sd_mmc_cmd9_mci()) {
  400854:	f240 11cd 	movw	r1, #461	; 0x1cd
  400858:	f2c0 0140 	movt	r1, #64	; 0x40
  40085c:	4788      	blx	r1
  40085e:	2800      	cmp	r0, #0
  400860:	f000 8163 	beq.w	400b2a <sd_mmc_check+0x756>
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
  400864:	682b      	ldr	r3, [r5, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400866:	7d5a      	ldrb	r2, [r3, #21]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
  400868:	f002 0007 	and.w	r0, r2, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
	sd_mmc_card->clock = unit * mul * 1000;
  40086c:	f648 018c 	movw	r1, #34956	; 0x888c
  400870:	f2c0 0140 	movt	r1, #64	; 0x40
  400874:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  400878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40087c:	fb00 f101 	mul.w	r1, r0, r1
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
	unit = sd_mmc_trans_units[tran_speed & 0x7];
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
  400880:	f3c2 02c3 	ubfx	r2, r2, #3, #4
	sd_mmc_card->clock = unit * mul * 1000;
  400884:	f648 004c 	movw	r0, #34892	; 0x884c
  400888:	f2c0 0040 	movt	r0, #64	; 0x40
  40088c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  400890:	fb02 f101 	mul.w	r1, r2, r1
  400894:	6019      	str	r1, [r3, #0]
  400896:	7c98      	ldrb	r0, [r3, #18]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
  400898:	0982      	lsrs	r2, r0, #6
  40089a:	d00f      	beq.n	4008bc <sd_mmc_check+0x4e8>
  40089c:	7eda      	ldrb	r2, [r3, #27]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  40089e:	7e98      	ldrb	r0, [r3, #26]
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008a0:	7e59      	ldrb	r1, [r3, #25]
  4008a2:	ea4f 4101 	mov.w	r1, r1, lsl #16
  4008a6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  4008aa:	4302      	orrs	r2, r0
  4008ac:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
  4008b0:	f101 0101 	add.w	r1, r1, #1
  4008b4:	ea4f 2041 	mov.w	r0, r1, lsl #9
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
  4008b8:	6058      	str	r0, [r3, #4]
  4008ba:	e022      	b.n	400902 <sd_mmc_check+0x52e>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4008bc:	7e99      	ldrb	r1, [r3, #26]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008be:	7e18      	ldrb	r0, [r3, #24]
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4008c0:	7e5a      	ldrb	r2, [r3, #25]
  4008c2:	ea4f 0282 	mov.w	r2, r2, lsl #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008c6:	ea42 2080 	orr.w	r0, r2, r0, lsl #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
  4008ca:	ea40 12a1 	orr.w	r2, r0, r1, asr #6
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4008ce:	7f18      	ldrb	r0, [r3, #28]
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  4008d0:	7ed9      	ldrb	r1, [r3, #27]
  4008d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
  4008d6:	ea41 10e0 	orr.w	r0, r1, r0, asr #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  4008da:	ea4f 5202 	mov.w	r2, r2, lsl #20
  4008de:	ea4f 5212 	mov.w	r2, r2, lsr #20
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4008e2:	f102 0201 	add.w	r2, r2, #1
  4008e6:	f000 0107 	and.w	r1, r0, #7
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
  4008ea:	f101 0102 	add.w	r1, r1, #2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
		sd_mmc_card->capacity =
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
  4008ee:	fa02 f001 	lsl.w	r0, r2, r1
  4008f2:	7dda      	ldrb	r2, [r3, #23]
  4008f4:	f002 010f 	and.w	r1, r2, #15
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  4008f8:	fa00 f001 	lsl.w	r0, r0, r1
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
  4008fc:	ea4f 2290 	mov.w	r2, r0, lsr #10
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
				* 512;
	} else {
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
  400900:	605a      	str	r2, [r3, #4]
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
  400902:	f640 1320 	movw	r3, #2336	; 0x920
  400906:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40090a:	681a      	ldr	r2, [r3, #0]
  40090c:	8991      	ldrh	r1, [r2, #12]
			return false;
		}
		sd_decode_csd();
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
  40090e:	f243 1007 	movw	r0, #12551	; 0x3107
  400912:	ea4f 4101 	mov.w	r1, r1, lsl #16
  400916:	f242 33f9 	movw	r3, #9209	; 0x23f9
  40091a:	f2c0 0340 	movt	r3, #64	; 0x40
  40091e:	4798      	blx	r3
  400920:	2800      	cmp	r0, #0
  400922:	f000 8102 	beq.w	400b2a <sd_mmc_check+0x756>
			(uint32_t)sd_mmc_card->rca << 16)) {
		return false;
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400926:	f640 1020 	movw	r0, #2336	; 0x920
  40092a:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40092e:	6801      	ldr	r1, [r0, #0]
  400930:	7bca      	ldrb	r2, [r1, #15]
  400932:	f012 0f01 	tst.w	r2, #1
  400936:	d051      	beq.n	4009dc <sd_mmc_check+0x608>
{
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400938:	898b      	ldrh	r3, [r1, #12]
  40093a:	f241 1037 	movw	r0, #4407	; 0x1137
  40093e:	ea4f 4103 	mov.w	r1, r3, lsl #16
  400942:	f242 32f9 	movw	r2, #9209	; 0x23f9
  400946:	f2c0 0240 	movt	r2, #64	; 0x40
  40094a:	4790      	blx	r2
  40094c:	2800      	cmp	r0, #0
  40094e:	f000 80ec 	beq.w	400b2a <sd_mmc_check+0x756>
		return false;
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
  400952:	f04f 0301 	mov.w	r3, #1
  400956:	9300      	str	r3, [sp, #0]
  400958:	f241 1033 	movw	r0, #4403	; 0x1133
  40095c:	f2c0 0008 	movt	r0, #8
  400960:	f04f 0100 	mov.w	r1, #0
  400964:	f04f 0208 	mov.w	r2, #8
  400968:	f242 4591 	movw	r5, #9361	; 0x2491
  40096c:	f2c0 0540 	movt	r5, #64	; 0x40
  400970:	47a8      	blx	r5
  400972:	2800      	cmp	r0, #0
  400974:	f000 80d9 	beq.w	400b2a <sd_mmc_check+0x756>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(scr, 1)) {
  400978:	a804      	add	r0, sp, #16
  40097a:	f04f 0101 	mov.w	r1, #1
  40097e:	4bae      	ldr	r3, [pc, #696]	; (400c38 <sd_mmc_check+0x864>)
  400980:	4798      	blx	r3
  400982:	2800      	cmp	r0, #0
  400984:	f000 80d1 	beq.w	400b2a <sd_mmc_check+0x756>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400988:	48ac      	ldr	r0, [pc, #688]	; (400c3c <sd_mmc_check+0x868>)
  40098a:	4780      	blx	r0
  40098c:	2800      	cmp	r0, #0
  40098e:	f000 80cc 	beq.w	400b2a <sd_mmc_check+0x756>
  400992:	f89d 1010 	ldrb.w	r1, [sp, #16]
		return false;
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
  400996:	f001 030f 	and.w	r3, r1, #15
  40099a:	2b01      	cmp	r3, #1
  40099c:	d009      	beq.n	4009b2 <sd_mmc_check+0x5de>
  40099e:	b113      	cbz	r3, 4009a6 <sd_mmc_check+0x5d2>
  4009a0:	2b02      	cmp	r3, #2
  4009a2:	d116      	bne.n	4009d2 <sd_mmc_check+0x5fe>
  4009a4:	e00b      	b.n	4009be <sd_mmc_check+0x5ea>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4009a6:	4aa6      	ldr	r2, [pc, #664]	; (400c40 <sd_mmc_check+0x86c>)
  4009a8:	6813      	ldr	r3, [r2, #0]
  4009aa:	f04f 0010 	mov.w	r0, #16
  4009ae:	7418      	strb	r0, [r3, #16]
  4009b0:	e014      	b.n	4009dc <sd_mmc_check+0x608>
		break;

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
  4009b2:	49a3      	ldr	r1, [pc, #652]	; (400c40 <sd_mmc_check+0x86c>)
  4009b4:	680b      	ldr	r3, [r1, #0]
  4009b6:	f04f 021a 	mov.w	r2, #26
  4009ba:	741a      	strb	r2, [r3, #16]
  4009bc:	e00e      	b.n	4009dc <sd_mmc_check+0x608>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  4009be:	f89d 3012 	ldrb.w	r3, [sp, #18]
		break;

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
  4009c2:	09db      	lsrs	r3, r3, #7
			sd_mmc_card->version = CARD_VER_SD_3_0;
  4009c4:	489e      	ldr	r0, [pc, #632]	; (400c40 <sd_mmc_check+0x86c>)
  4009c6:	6801      	ldr	r1, [r0, #0]
  4009c8:	bf14      	ite	ne
  4009ca:	2230      	movne	r2, #48	; 0x30
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
  4009cc:	2220      	moveq	r2, #32
  4009ce:	740a      	strb	r2, [r1, #16]
  4009d0:	e004      	b.n	4009dc <sd_mmc_check+0x608>
		}
		break;

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
  4009d2:	4a9b      	ldr	r2, [pc, #620]	; (400c40 <sd_mmc_check+0x86c>)
  4009d4:	6810      	ldr	r0, [r2, #0]
  4009d6:	f04f 0110 	mov.w	r1, #16
  4009da:	7401      	strb	r1, [r0, #16]
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
  4009dc:	f640 1026 	movw	r0, #2342	; 0x926
  4009e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4009e4:	7800      	ldrb	r0, [r0, #0]
  4009e6:	f242 3149 	movw	r1, #9033	; 0x2349
  4009ea:	f2c0 0140 	movt	r1, #64	; 0x40
  4009ee:	4788      	blx	r1
  4009f0:	2803      	cmp	r0, #3
  4009f2:	d927      	bls.n	400a44 <sd_mmc_check+0x670>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  4009f4:	f640 1320 	movw	r3, #2336	; 0x920
  4009f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4009fc:	6818      	ldr	r0, [r3, #0]
  4009fe:	7bc2      	ldrb	r2, [r0, #15]
  400a00:	f012 0f01 	tst.w	r2, #1
  400a04:	d019      	beq.n	400a3a <sd_mmc_check+0x666>
 */
static bool sd_acmd6(void)
{
	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
  400a06:	8981      	ldrh	r1, [r0, #12]
  400a08:	f241 1037 	movw	r0, #4407	; 0x1137
  400a0c:	ea4f 4101 	mov.w	r1, r1, lsl #16
  400a10:	f242 33f9 	movw	r3, #9209	; 0x23f9
  400a14:	f2c0 0340 	movt	r3, #64	; 0x40
  400a18:	4798      	blx	r3
  400a1a:	2800      	cmp	r0, #0
  400a1c:	f000 8085 	beq.w	400b2a <sd_mmc_check+0x756>
		return false;
	}
	// 10b = 4 bits bus
	if (!driver_send_cmd(SD_ACMD6_SET_BUS_WIDTH, 0x2)) {
  400a20:	f241 1006 	movw	r0, #4358	; 0x1106
  400a24:	f04f 0102 	mov.w	r1, #2
  400a28:	4a86      	ldr	r2, [pc, #536]	; (400c44 <sd_mmc_check+0x870>)
  400a2a:	4790      	blx	r2
  400a2c:	2800      	cmp	r0, #0
  400a2e:	d07c      	beq.n	400b2a <sd_mmc_check+0x756>
		return false;
	}
	sd_mmc_card->bus_width = 4;
  400a30:	4883      	ldr	r0, [pc, #524]	; (400c40 <sd_mmc_check+0x86c>)
  400a32:	6801      	ldr	r1, [r0, #0]
  400a34:	f04f 0304 	mov.w	r3, #4
  400a38:	744b      	strb	r3, [r1, #17]
			if (!sd_acmd6()) {
				return false;
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
  400a3a:	f240 129d 	movw	r2, #413	; 0x19d
  400a3e:	f2c0 0240 	movt	r2, #64	; 0x40
  400a42:	4790      	blx	r2
	}
	if (driver_is_high_speed_capable()) {
  400a44:	f242 3055 	movw	r0, #9045	; 0x2355
  400a48:	f2c0 0040 	movt	r0, #64	; 0x40
  400a4c:	4780      	blx	r0
  400a4e:	2800      	cmp	r0, #0
  400a50:	d04a      	beq.n	400ae8 <sd_mmc_check+0x714>
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
  400a52:	f640 1120 	movw	r1, #2336	; 0x920
  400a56:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400a5a:	680b      	ldr	r3, [r1, #0]
  400a5c:	7bda      	ldrb	r2, [r3, #15]
  400a5e:	f012 0f01 	tst.w	r2, #1
  400a62:	d03c      	beq.n	400ade <sd_mmc_check+0x70a>
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
  400a64:	7c18      	ldrb	r0, [r3, #16]
  400a66:	2810      	cmp	r0, #16
  400a68:	d939      	bls.n	400ade <sd_mmc_check+0x70a>
 */
static bool sd_cm6_set_high_speed(void)
{
	uint8_t switch_status[SD_SW_STATUS_BSIZE];

	if (!driver_adtc_start(SD_CMD6_SWITCH_FUNC,
  400a6a:	f04f 0301 	mov.w	r3, #1
  400a6e:	9300      	str	r3, [sp, #0]
  400a70:	f241 1006 	movw	r0, #4358	; 0x1106
  400a74:	f2c0 0008 	movt	r0, #8
  400a78:	f64f 7101 	movw	r1, #65281	; 0xff01
  400a7c:	f2c8 01ff 	movt	r1, #33023	; 0x80ff
  400a80:	f04f 0240 	mov.w	r2, #64	; 0x40
  400a84:	4d70      	ldr	r5, [pc, #448]	; (400c48 <sd_mmc_check+0x874>)
  400a86:	47a8      	blx	r5
  400a88:	2800      	cmp	r0, #0
  400a8a:	d04e      	beq.n	400b2a <sd_mmc_check+0x756>
			| SD_CMD6_GRP2_DEFAULT
			| SD_CMD6_GRP1_HIGH_SPEED,
			SD_SW_STATUS_BSIZE, 1, true)) {
		return false;
	}
	if (!driver_start_read_blocks(switch_status, 1)) {
  400a8c:	a804      	add	r0, sp, #16
  400a8e:	f04f 0101 	mov.w	r1, #1
  400a92:	4b69      	ldr	r3, [pc, #420]	; (400c38 <sd_mmc_check+0x864>)
  400a94:	4798      	blx	r3
  400a96:	2800      	cmp	r0, #0
  400a98:	d047      	beq.n	400b2a <sd_mmc_check+0x756>
		return false;
	}
	if (!driver_wait_end_of_read_blocks()) {
  400a9a:	4968      	ldr	r1, [pc, #416]	; (400c3c <sd_mmc_check+0x868>)
  400a9c:	4788      	blx	r1
  400a9e:	2800      	cmp	r0, #0
  400aa0:	d043      	beq.n	400b2a <sd_mmc_check+0x756>
		return false;
	}

	if (driver_get_response() & CARD_STATUS_SWITCH_ERROR) {
  400aa2:	4a6a      	ldr	r2, [pc, #424]	; (400c4c <sd_mmc_check+0x878>)
  400aa4:	4790      	blx	r2
  400aa6:	f010 0f80 	tst.w	r0, #128	; 0x80
  400aaa:	d13e      	bne.n	400b2a <sd_mmc_check+0x756>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
	}
	value &=  ((uint32_t)1 << size) - 1;
  400aac:	f89d 0020 	ldrb.w	r0, [sp, #32]
		sd_mmc_debug("%s: CMD6 CARD_STATUS_SWITCH_ERROR\n\r", __func__);
		return false;
	}
	if (SD_SW_STATUS_FUN_GRP1_RC(switch_status)
  400ab0:	f000 030f 	and.w	r3, r0, #15
  400ab4:	2b0f      	cmp	r3, #15
  400ab6:	d012      	beq.n	400ade <sd_mmc_check+0x70a>
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
  400ab8:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
  400abc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
			== SD_SW_STATUS_FUN_GRP_RC_ERROR) {
		// No supported, it is not a protocol error
		return true;
	}
	if (SD_SW_STATUS_FUN_GRP1_BUSY(switch_status)) {
  400ac0:	ea51 2202 	orrs.w	r2, r1, r2, lsl #8
  400ac4:	d131      	bne.n	400b2a <sd_mmc_check+0x756>
		sd_mmc_debug("%s: CMD6 SD_SW_STATUS_FUN_GRP1_BUSY\n\r", __func__);
		return false;
	}
	// CMD6 function switching period is within 8 clocks
	// after the end bit of status data.
	driver_send_clock();
  400ac6:	4862      	ldr	r0, [pc, #392]	; (400c50 <sd_mmc_check+0x87c>)
  400ac8:	4780      	blx	r0
	sd_mmc_card->high_speed = 1;
  400aca:	4b5d      	ldr	r3, [pc, #372]	; (400c40 <sd_mmc_check+0x86c>)
  400acc:	6819      	ldr	r1, [r3, #0]
  400ace:	f04f 0201 	mov.w	r2, #1
  400ad2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
	sd_mmc_card->clock *= 2;
  400ad6:	6808      	ldr	r0, [r1, #0]
  400ad8:	ea4f 0340 	mov.w	r3, r0, lsl #1
  400adc:	600b      	str	r3, [r1, #0]
					return false;
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
  400ade:	f240 119d 	movw	r1, #413	; 0x19d
  400ae2:	f2c0 0140 	movt	r1, #64	; 0x40
  400ae6:	4788      	blx	r1
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400ae8:	f640 1220 	movw	r2, #2336	; 0x920
  400aec:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400af0:	6810      	ldr	r0, [r2, #0]
  400af2:	7bc3      	ldrb	r3, [r0, #15]
  400af4:	f013 0f01 	tst.w	r3, #1
  400af8:	d009      	beq.n	400b0e <sd_mmc_check+0x73a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
  400afa:	f241 1010 	movw	r0, #4368	; 0x1110
  400afe:	f44f 7100 	mov.w	r1, #512	; 0x200
  400b02:	f242 32f9 	movw	r2, #9209	; 0x23f9
  400b06:	f2c0 0240 	movt	r2, #64	; 0x40
  400b0a:	4790      	blx	r2
		sd_mmc_deselect_slot();
		return sd_mmc_err;
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
  400b0c:	b168      	cbz	r0, 400b2a <sd_mmc_check+0x756>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
  400b0e:	f640 1020 	movw	r0, #2336	; 0x920
  400b12:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400b16:	6803      	ldr	r3, [r0, #0]
  400b18:	f04f 0100 	mov.w	r1, #0
  400b1c:	7399      	strb	r1, [r3, #14]
		sd_mmc_deselect_slot();
  400b1e:	f240 127d 	movw	r2, #381	; 0x17d
  400b22:	f2c0 0240 	movt	r2, #64	; 0x40
  400b26:	4790      	blx	r2
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
  400b28:	e05b      	b.n	400be2 <sd_mmc_check+0x80e>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
  400b2a:	f640 1420 	movw	r4, #2336	; 0x920
  400b2e:	f2c2 0400 	movt	r4, #8192	; 0x2000
  400b32:	6820      	ldr	r0, [r4, #0]
  400b34:	f04f 0403 	mov.w	r4, #3
  400b38:	7384      	strb	r4, [r0, #14]
	sd_mmc_deselect_slot();
  400b3a:	f240 137d 	movw	r3, #381	; 0x17d
  400b3e:	f2c0 0340 	movt	r3, #64	; 0x40
  400b42:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
  400b44:	e04d      	b.n	400be2 <sd_mmc_check+0x80e>
 */
static bool sd_cmd8(uint8_t * v2)
{
	uint32_t resp;

	*v2 = 0;
  400b46:	f04f 0600 	mov.w	r6, #0
  400b4a:	e001      	b.n	400b50 <sd_mmc_check+0x77c>
  400b4c:	f04f 0600 	mov.w	r6, #0
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
		return false;
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b50:	f640 1320 	movw	r3, #2336	; 0x920
  400b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400b58:	6818      	ldr	r0, [r3, #0]
  400b5a:	7bc1      	ldrb	r1, [r0, #15]
  400b5c:	f011 0f01 	tst.w	r1, #1
  400b60:	f43f ae5a 	beq.w	400818 <sd_mmc_check+0x444>
  400b64:	e483      	b.n	40046e <sd_mmc_check+0x9a>
		// Try to get the SD card's operating condition
		if (!sd_mci_op_cond(v2)) {
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
  400b66:	f640 1120 	movw	r1, #2336	; 0x920
  400b6a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400b6e:	6808      	ldr	r0, [r1, #0]
  400b70:	f04f 0302 	mov.w	r3, #2
  400b74:	73c3      	strb	r3, [r0, #15]
static bool sd_mmc_mci_install_mmc(void)
{
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
  400b76:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400b7a:	f04f 0100 	mov.w	r1, #0
  400b7e:	f242 32f9 	movw	r2, #9209	; 0x23f9
  400b82:	f2c0 0240 	movt	r2, #64	; 0x40
  400b86:	4790      	blx	r2
  400b88:	2800      	cmp	r0, #0
  400b8a:	f47f acb2 	bne.w	4004f2 <sd_mmc_check+0x11e>
  400b8e:	e7bd      	b.n	400b0c <sd_mmc_check+0x738>
			sd_mmc_card->type = CARD_TYPE_MMC;
			return sd_mmc_mci_install_mmc();
		}
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
  400b90:	f640 1220 	movw	r2, #2336	; 0x920
  400b94:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400b98:	6813      	ldr	r3, [r2, #0]
  400b9a:	7bd8      	ldrb	r0, [r3, #15]
  400b9c:	f010 0f01 	tst.w	r0, #1
  400ba0:	f47f ae2e 	bne.w	400800 <sd_mmc_check+0x42c>
  400ba4:	e638      	b.n	400818 <sd_mmc_check+0x444>
	if (!driver_send_cmd(SDMMC_MCI_CMD0_GO_IDLE_STATE, 0)) {
		return false;
	}

	if (!mmc_mci_op_cond()) {
		return false;
  400ba6:	f04f 0000 	mov.w	r0, #0
  400baa:	e7af      	b.n	400b0c <sd_mmc_check+0x738>
	}

	// Put the Card in Identify Mode
	// Note: The CID is not used in this stack
	if (!driver_send_cmd(SDMMC_CMD2_ALL_SEND_CID, 0)) {
  400bac:	f645 3002 	movw	r0, #23298	; 0x5b02
  400bb0:	f04f 0100 	mov.w	r1, #0
  400bb4:	4b23      	ldr	r3, [pc, #140]	; (400c44 <sd_mmc_check+0x870>)
  400bb6:	4798      	blx	r3
  400bb8:	2800      	cmp	r0, #0
  400bba:	f47f acce 	bne.w	40055a <sd_mmc_check+0x186>
  400bbe:	e7a5      	b.n	400b0c <sd_mmc_check+0x738>
	}
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
		// For MMC 4.0 Higher version
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
			return false;
  400bc0:	f04f 0000 	mov.w	r0, #0
  400bc4:	e7a2      	b.n	400b0c <sd_mmc_check+0x738>
		}
		if (4 <= driver_get_bus_width(sd_mmc_slot_sel)) {
  400bc6:	4923      	ldr	r1, [pc, #140]	; (400c54 <sd_mmc_check+0x880>)
  400bc8:	7808      	ldrb	r0, [r1, #0]
  400bca:	4b23      	ldr	r3, [pc, #140]	; (400c58 <sd_mmc_check+0x884>)
  400bcc:	4798      	blx	r3
  400bce:	2803      	cmp	r0, #3
  400bd0:	f63f ad8e 	bhi.w	4006f0 <sd_mmc_check+0x31c>
  400bd4:	e5b5      	b.n	400742 <sd_mmc_check+0x36e>
			// Enable more bus width
			if (!mmc_cmd6_set_bus_width(driver_get_bus_width(sd_mmc_slot_sel))) {
				return false;
  400bd6:	f04f 0000 	mov.w	r0, #0
  400bda:	e797      	b.n	400b0c <sd_mmc_check+0x738>
			sd_mmc_configure_slot();
		}
		if (driver_is_high_speed_capable() && b_authorize_high_speed) {
			// Enable HS
			if (!mmc_cmd6_set_high_speed()) {
				return false;
  400bdc:	f04f 0000 	mov.w	r0, #0
  400be0:	e794      	b.n	400b0c <sd_mmc_check+0x738>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
  400be2:	4620      	mov	r0, r4
  400be4:	b015      	add	sp, #84	; 0x54
  400be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400bea:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  400bec:	2800      	cmp	r0, #0
  400bee:	f6ff ac9e 	blt.w	40052e <sd_mmc_check+0x15a>
  400bf2:	f241 0869 	movw	r8, #4201	; 0x1069
  400bf6:	f108 38ff 	add.w	r8, r8, #4294967295
  400bfa:	e48f      	b.n	40051c <sd_mmc_check+0x148>
			sd_mmc_debug("%s: CMD1 MCI Fail - Busy retry %d\n\r",
					__func__, (int)(4200 - retry));
			return false;
		}
		// Check busy flag
		resp = driver_get_response();
  400bfc:	47c8      	blx	r9
		if (resp & OCR_POWER_UP_BUSY) {
  400bfe:	2800      	cmp	r0, #0
  400c00:	f6ff ac95 	blt.w	40052e <sd_mmc_check+0x15a>
					== OCR_ACCESS_MODE_SECTOR) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
  400c04:	f1b8 0801 	subs.w	r8, r8, #1
  400c08:	f47f ac88 	bne.w	40051c <sd_mmc_check+0x148>
  400c0c:	e7cb      	b.n	400ba6 <sd_mmc_check+0x7d2>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  400c0e:	4649      	mov	r1, r9
  400c10:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400c14:	f244 5029 	movw	r0, #17705	; 0x4529
  400c18:	2e00      	cmp	r6, #0
  400c1a:	bf08      	it	eq
  400c1c:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
  400c20:	47a8      	blx	r5
  400c22:	2800      	cmp	r0, #0
  400c24:	d09f      	beq.n	400b66 <sd_mmc_check+0x792>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400c26:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
  400c28:	2800      	cmp	r0, #0
  400c2a:	f6ff ac4b 	blt.w	4004c4 <sd_mmc_check+0xf0>
  400c2e:	f640 0b35 	movw	fp, #2101	; 0x835
  400c32:	f10b 3bff 	add.w	fp, fp, #4294967295
  400c36:	e42f      	b.n	400498 <sd_mmc_check+0xc4>
  400c38:	00402601 	.word	0x00402601
  400c3c:	00402671 	.word	0x00402671
  400c40:	20000920 	.word	0x20000920
  400c44:	004023f9 	.word	0x004023f9
  400c48:	00402491 	.word	0x00402491
  400c4c:	00402429 	.word	0x00402429
  400c50:	004023d5 	.word	0x004023d5
  400c54:	20000926 	.word	0x20000926
  400c58:	00402349 	.word	0x00402349
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
		}

		// (ACMD41) Sends host OCR register
		arg = SD_MMC_VOLTAGE_SUPPORT;
  400c5c:	4649      	mov	r1, r9
  400c5e:	f2c4 011f 	movt	r1, #16415	; 0x401f
		if (v2) {
			arg |= SD_ACMD41_HCS;
		}
		// Check response
		if (!driver_send_cmd(SD_MCI_ACMD41_SD_SEND_OP_COND, arg)) {
  400c62:	f244 5029 	movw	r0, #17705	; 0x4529
  400c66:	2e00      	cmp	r6, #0
  400c68:	bf08      	it	eq
  400c6a:	f44f 11fc 	moveq.w	r1, #2064384	; 0x1f8000
  400c6e:	47a8      	blx	r5
  400c70:	2800      	cmp	r0, #0
  400c72:	f43f af78 	beq.w	400b66 <sd_mmc_check+0x792>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
		}
		resp = driver_get_response();
  400c76:	47d0      	blx	sl
		if (resp & OCR_POWER_UP_BUSY) {
  400c78:	2800      	cmp	r0, #0
  400c7a:	f6ff ac23 	blt.w	4004c4 <sd_mmc_check+0xf0>
			if ((resp & OCR_CCS) != 0) {
				sd_mmc_card->type |= CARD_TYPE_HC;
			}
			break;
		}
		if (retry-- == 0) {
  400c7e:	f1bb 0b01 	subs.w	fp, fp, #1
  400c82:	f47f ac09 	bne.w	400498 <sd_mmc_check+0xc4>
  400c86:	e76e      	b.n	400b66 <sd_mmc_check+0x792>

00400c88 <sd_mmc_get_type>:
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
  400c88:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400c8a:	f240 2315 	movw	r3, #533	; 0x215
  400c8e:	f2c0 0340 	movt	r3, #64	; 0x40
  400c92:	4798      	blx	r3
  400c94:	b958      	cbnz	r0, 400cae <sd_mmc_get_type+0x26>
		return CARD_TYPE_UNKNOWN;
	}
	sd_mmc_deselect_slot();
  400c96:	f240 107d 	movw	r0, #381	; 0x17d
  400c9a:	f2c0 0040 	movt	r0, #64	; 0x40
  400c9e:	4780      	blx	r0
	return sd_mmc_card->type;
  400ca0:	f640 1120 	movw	r1, #2336	; 0x920
  400ca4:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400ca8:	680a      	ldr	r2, [r1, #0]
  400caa:	7bd0      	ldrb	r0, [r2, #15]
  400cac:	bd08      	pop	{r3, pc}
}

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return CARD_TYPE_UNKNOWN;
  400cae:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
  400cb2:	bd08      	pop	{r3, pc}

00400cb4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
  400cb4:	b508      	push	{r3, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
  400cb6:	f240 2315 	movw	r3, #533	; 0x215
  400cba:	f2c0 0340 	movt	r3, #64	; 0x40
  400cbe:	4798      	blx	r3
  400cc0:	b958      	cbnz	r0, 400cda <sd_mmc_get_capacity+0x26>
		return 0;
	}
	sd_mmc_deselect_slot();
  400cc2:	f240 107d 	movw	r0, #381	; 0x17d
  400cc6:	f2c0 0040 	movt	r0, #64	; 0x40
  400cca:	4780      	blx	r0
	return sd_mmc_card->capacity;
  400ccc:	f640 1120 	movw	r1, #2336	; 0x920
  400cd0:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400cd4:	680a      	ldr	r2, [r1, #0]
  400cd6:	6850      	ldr	r0, [r2, #4]
  400cd8:	bd08      	pop	{r3, pc}
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
		return 0;
  400cda:	f04f 0000 	mov.w	r0, #0
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
  400cde:	bd08      	pop	{r3, pc}

00400ce0 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
  400ce0:	f04f 0000 	mov.w	r0, #0
  400ce4:	4770      	bx	lr
  400ce6:	bf00      	nop

00400ce8 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cec:	b083      	sub	sp, #12
  400cee:	468b      	mov	fp, r1
  400cf0:	4692      	mov	sl, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400cf2:	f240 2315 	movw	r3, #533	; 0x215
  400cf6:	f2c0 0340 	movt	r3, #64	; 0x40
  400cfa:	4798      	blx	r3
	if (sd_mmc_err != SD_MMC_OK) {
  400cfc:	4681      	mov	r9, r0
  400cfe:	2800      	cmp	r0, #0
  400d00:	f040 8081 	bne.w	400e06 <sd_mmc_init_read_blocks+0x11e>
  400d04:	f640 5841 	movw	r8, #3393	; 0xd41
  400d08:	f2c0 0803 	movt	r8, #3
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400d0c:	f640 1620 	movw	r6, #2336	; 0x920
  400d10:	f2c2 0600 	movt	r6, #8192	; 0x2000
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400d14:	f241 150d 	movw	r5, #4365	; 0x110d
  400d18:	f242 34f9 	movw	r4, #9209	; 0x23f9
  400d1c:	f2c0 0440 	movt	r4, #64	; 0x40
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400d20:	f242 4729 	movw	r7, #9257	; 0x2429
  400d24:	f2c0 0740 	movt	r7, #64	; 0x40
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400d28:	6830      	ldr	r0, [r6, #0]
  400d2a:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400d2c:	4628      	mov	r0, r5
  400d2e:	ea4f 4101 	mov.w	r1, r1, lsl #16
  400d32:	47a0      	blx	r4
  400d34:	2800      	cmp	r0, #0
  400d36:	d046      	beq.n	400dc6 <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400d38:	47b8      	blx	r7
  400d3a:	f410 7f80 	tst.w	r0, #256	; 0x100
  400d3e:	d14a      	bne.n	400dd6 <sd_mmc_init_read_blocks+0xee>
  400d40:	f108 38ff 	add.w	r8, r8, #4294967295
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400d44:	6832      	ldr	r2, [r6, #0]
  400d46:	8993      	ldrh	r3, [r2, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400d48:	4628      	mov	r0, r5
  400d4a:	ea4f 4103 	mov.w	r1, r3, lsl #16
  400d4e:	47a0      	blx	r4
  400d50:	2800      	cmp	r0, #0
  400d52:	d15c      	bne.n	400e0e <sd_mmc_init_read_blocks+0x126>
  400d54:	e037      	b.n	400dc6 <sd_mmc_init_read_blocks+0xde>
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400d56:	ea4f 214b 	mov.w	r1, fp, lsl #9
  400d5a:	e000      	b.n	400d5e <sd_mmc_init_read_blocks+0x76>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
  400d5c:	4659      	mov	r1, fp
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400d5e:	f04f 0301 	mov.w	r3, #1
  400d62:	9300      	str	r3, [sp, #0]
  400d64:	f44f 7200 	mov.w	r2, #512	; 0x200
  400d68:	4653      	mov	r3, sl
  400d6a:	f242 4491 	movw	r4, #9361	; 0x2491
  400d6e:	f2c0 0440 	movt	r4, #64	; 0x40
  400d72:	47a0      	blx	r4
  400d74:	b938      	cbnz	r0, 400d86 <sd_mmc_init_read_blocks+0x9e>
		sd_mmc_deselect_slot();
  400d76:	f240 117d 	movw	r1, #381	; 0x17d
  400d7a:	f2c0 0140 	movt	r1, #64	; 0x40
  400d7e:	4788      	blx	r1
		return SD_MMC_ERR_COMM;
  400d80:	f04f 0905 	mov.w	r9, #5
  400d84:	e03f      	b.n	400e06 <sd_mmc_init_read_blocks+0x11e>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  400d86:	f242 4029 	movw	r0, #9257	; 0x2429
  400d8a:	f2c0 0040 	movt	r0, #64	; 0x40
  400d8e:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400d90:	f04f 0100 	mov.w	r1, #0
  400d94:	f2ce 4158 	movt	r1, #58456	; 0xe458
  400d98:	4001      	ands	r1, r0
  400d9a:	b139      	cbz	r1, 400dac <sd_mmc_init_read_blocks+0xc4>
			sd_mmc_debug("%s: Read blocks %02d resp32 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  400d9c:	f240 107d 	movw	r0, #381	; 0x17d
  400da0:	f2c0 0040 	movt	r0, #64	; 0x40
  400da4:	4780      	blx	r0
			return SD_MMC_ERR_COMM;
  400da6:	f04f 0905 	mov.w	r9, #5
  400daa:	e02c      	b.n	400e06 <sd_mmc_init_read_blocks+0x11e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400dac:	f640 1224 	movw	r2, #2340	; 0x924
  400db0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400db4:	f8a2 a000 	strh.w	sl, [r2]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400db8:	f640 131c 	movw	r3, #2332	; 0x91c
  400dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  400dc0:	f8a3 a000 	strh.w	sl, [r3]
	return SD_MMC_OK;
  400dc4:	e01f      	b.n	400e06 <sd_mmc_init_read_blocks+0x11e>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
		sd_mmc_deselect_slot();
  400dc6:	f240 127d 	movw	r2, #381	; 0x17d
  400dca:	f2c0 0240 	movt	r2, #64	; 0x40
  400dce:	4790      	blx	r2
		return SD_MMC_ERR_COMM;
  400dd0:	f04f 0905 	mov.w	r9, #5
  400dd4:	e017      	b.n	400e06 <sd_mmc_init_read_blocks+0x11e>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
  400dd6:	f241 1011 	movw	r0, #4369	; 0x1111
  400dda:	f2c0 0008 	movt	r0, #8
  400dde:	f241 1412 	movw	r4, #4370	; 0x1112
  400de2:	f2c0 0410 	movt	r4, #16
  400de6:	f1ba 0f01 	cmp.w	sl, #1
  400dea:	bf88      	it	hi
  400dec:	4620      	movhi	r0, r4
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400dee:	f640 1220 	movw	r2, #2336	; 0x920
  400df2:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400df6:	6813      	ldr	r3, [r2, #0]
  400df8:	7bd9      	ldrb	r1, [r3, #15]
  400dfa:	f001 0408 	and.w	r4, r1, #8
  400dfe:	b2e2      	uxtb	r2, r4
  400e00:	2a00      	cmp	r2, #0
  400e02:	d1ab      	bne.n	400d5c <sd_mmc_init_read_blocks+0x74>
  400e04:	e7a7      	b.n	400d56 <sd_mmc_init_read_blocks+0x6e>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
  400e06:	4648      	mov	r0, r9
  400e08:	b003      	add	sp, #12
  400e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400e0e:	47b8      	blx	r7
  400e10:	f410 7f80 	tst.w	r0, #256	; 0x100
  400e14:	d1df      	bne.n	400dd6 <sd_mmc_init_read_blocks+0xee>
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
					(uint32_t)sd_mmc_card->rca << 16)) {
  400e16:	6830      	ldr	r0, [r6, #0]
  400e18:	8981      	ldrh	r1, [r0, #12]
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
				break;
			}
		} else {
			if (!driver_send_cmd(SDMMC_MCI_CMD13_SEND_STATUS,
  400e1a:	4628      	mov	r0, r5
  400e1c:	ea4f 4101 	mov.w	r1, r1, lsl #16
  400e20:	47a0      	blx	r4
  400e22:	2800      	cmp	r0, #0
  400e24:	d0cf      	beq.n	400dc6 <sd_mmc_init_read_blocks+0xde>
					(uint32_t)sd_mmc_card->rca << 16)) {
				return false;
			}
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
  400e26:	47b8      	blx	r7
  400e28:	f410 7f80 	tst.w	r0, #256	; 0x100
  400e2c:	d1d3      	bne.n	400dd6 <sd_mmc_init_read_blocks+0xee>
				break;
			}
		}
		if (nec_timeout-- == 0) {
  400e2e:	f1b8 0802 	subs.w	r8, r8, #2
  400e32:	f47f af79 	bne.w	400d28 <sd_mmc_init_read_blocks+0x40>
  400e36:	e7c6      	b.n	400dc6 <sd_mmc_init_read_blocks+0xde>

00400e38 <sd_mmc_start_read_blocks>:
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
  400e38:	b510      	push	{r4, lr}
  400e3a:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
  400e3c:	f242 6301 	movw	r3, #9729	; 0x2601
  400e40:	f2c0 0340 	movt	r3, #64	; 0x40
  400e44:	4798      	blx	r3
  400e46:	b948      	cbnz	r0, 400e5c <sd_mmc_start_read_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
  400e48:	f640 1124 	movw	r1, #2340	; 0x924
  400e4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400e50:	f04f 0300 	mov.w	r3, #0
  400e54:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
  400e56:	f04f 0005 	mov.w	r0, #5
  400e5a:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400e5c:	f640 1024 	movw	r0, #2340	; 0x924
  400e60:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400e64:	8802      	ldrh	r2, [r0, #0]
  400e66:	1b14      	subs	r4, r2, r4
  400e68:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
  400e6a:	f04f 0000 	mov.w	r0, #0
}
  400e6e:	bd10      	pop	{r4, pc}

00400e70 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
  400e70:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_read_blocks()) {
  400e72:	f242 6371 	movw	r3, #9841	; 0x2671
  400e76:	f2c0 0340 	movt	r3, #64	; 0x40
  400e7a:	4798      	blx	r3
  400e7c:	2800      	cmp	r0, #0
  400e7e:	d030      	beq.n	400ee2 <sd_mmc_wait_end_of_read_blocks+0x72>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
  400e80:	f640 1024 	movw	r0, #2340	; 0x924
  400e84:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400e88:	8801      	ldrh	r1, [r0, #0]
  400e8a:	2900      	cmp	r1, #0
  400e8c:	d12c      	bne.n	400ee8 <sd_mmc_wait_end_of_read_blocks+0x78>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  400e8e:	f640 121c 	movw	r2, #2332	; 0x91c
  400e92:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400e96:	8813      	ldrh	r3, [r2, #0]
  400e98:	2b01      	cmp	r3, #1
  400e9a:	d107      	bne.n	400eac <sd_mmc_wait_end_of_read_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  400e9c:	f240 117d 	movw	r1, #381	; 0x17d
  400ea0:	f2c0 0140 	movt	r1, #64	; 0x40
  400ea4:	4788      	blx	r1
		return SD_MMC_OK;
  400ea6:	f04f 0000 	mov.w	r0, #0
  400eaa:	bd08      	pop	{r3, pc}
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  400eac:	f243 100c 	movw	r0, #12556	; 0x310c
  400eb0:	f04f 0100 	mov.w	r1, #0
  400eb4:	f242 32f9 	movw	r2, #9209	; 0x23f9
  400eb8:	f2c0 0240 	movt	r2, #64	; 0x40
  400ebc:	4790      	blx	r2
  400ebe:	b940      	cbnz	r0, 400ed2 <sd_mmc_wait_end_of_read_blocks+0x62>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
  400ec0:	f243 100c 	movw	r0, #12556	; 0x310c
  400ec4:	f04f 0100 	mov.w	r1, #0
  400ec8:	f242 33f9 	movw	r3, #9209	; 0x23f9
  400ecc:	f2c0 0340 	movt	r3, #64	; 0x40
  400ed0:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
  400ed2:	f240 107d 	movw	r0, #381	; 0x17d
  400ed6:	f2c0 0040 	movt	r0, #64	; 0x40
  400eda:	4780      	blx	r0
	return SD_MMC_OK;
  400edc:	f04f 0000 	mov.w	r0, #0
  400ee0:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(void)
{
	if (!driver_wait_end_of_read_blocks()) {
		return SD_MMC_ERR_COMM;
  400ee2:	f04f 0005 	mov.w	r0, #5
  400ee6:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  400ee8:	f04f 0000 	mov.w	r0, #0
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  400eec:	bd08      	pop	{r3, pc}
  400eee:	bf00      	nop

00400ef0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
  400ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ef2:	b083      	sub	sp, #12
  400ef4:	4606      	mov	r6, r0
  400ef6:	460f      	mov	r7, r1
  400ef8:	4615      	mov	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
  400efa:	f240 2415 	movw	r4, #533	; 0x215
  400efe:	f2c0 0440 	movt	r4, #64	; 0x40
  400f02:	47a0      	blx	r4
	if (sd_mmc_err != SD_MMC_OK) {
  400f04:	4604      	mov	r4, r0
  400f06:	2800      	cmp	r0, #0
  400f08:	d158      	bne.n	400fbc <sd_mmc_init_write_blocks+0xcc>
		return sd_mmc_err;
	}
	if (sd_mmc_is_write_protected(slot)) {
  400f0a:	4630      	mov	r0, r6
  400f0c:	f640 43e1 	movw	r3, #3297	; 0xce1
  400f10:	f2c0 0340 	movt	r3, #64	; 0x40
  400f14:	4798      	blx	r3
  400f16:	b138      	cbz	r0, 400f28 <sd_mmc_init_write_blocks+0x38>
		sd_mmc_deselect_slot();
  400f18:	f240 137d 	movw	r3, #381	; 0x17d
  400f1c:	f2c0 0340 	movt	r3, #64	; 0x40
  400f20:	4798      	blx	r3
		return SD_MMC_ERR_WP;
  400f22:	f04f 0407 	mov.w	r4, #7
  400f26:	e049      	b.n	400fbc <sd_mmc_init_write_blocks+0xcc>
	}

	if (nb_block > 1) {
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
  400f28:	f249 1018 	movw	r0, #37144	; 0x9118
  400f2c:	f2c0 0008 	movt	r0, #8
  400f30:	f249 1119 	movw	r1, #37145	; 0x9119
  400f34:	f2c0 0110 	movt	r1, #16
  400f38:	2d01      	cmp	r5, #1
  400f3a:	bf88      	it	hi
  400f3c:	4608      	movhi	r0, r1
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
  400f3e:	f640 1220 	movw	r2, #2336	; 0x920
  400f42:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400f46:	6816      	ldr	r6, [r2, #0]
  400f48:	7bf3      	ldrb	r3, [r6, #15]
  400f4a:	f003 0108 	and.w	r1, r3, #8
  400f4e:	b2ca      	uxtb	r2, r1
  400f50:	b912      	cbnz	r2, 400f58 <sd_mmc_init_write_blocks+0x68>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
  400f52:	ea4f 2147 	mov.w	r1, r7, lsl #9
  400f56:	e000      	b.n	400f5a <sd_mmc_init_write_blocks+0x6a>
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
		arg = start;
  400f58:	4639      	mov	r1, r7
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
  400f5a:	f04f 0601 	mov.w	r6, #1
  400f5e:	9600      	str	r6, [sp, #0]
  400f60:	f44f 7200 	mov.w	r2, #512	; 0x200
  400f64:	462b      	mov	r3, r5
  400f66:	f242 4691 	movw	r6, #9361	; 0x2491
  400f6a:	f2c0 0640 	movt	r6, #64	; 0x40
  400f6e:	47b0      	blx	r6
  400f70:	b938      	cbnz	r0, 400f82 <sd_mmc_init_write_blocks+0x92>
		sd_mmc_deselect_slot();
  400f72:	f240 107d 	movw	r0, #381	; 0x17d
  400f76:	f2c0 0040 	movt	r0, #64	; 0x40
  400f7a:	4780      	blx	r0
		return SD_MMC_ERR_COMM;
  400f7c:	f04f 0405 	mov.w	r4, #5
  400f80:	e01c      	b.n	400fbc <sd_mmc_init_write_blocks+0xcc>
	}
	// Check response
	if (sd_mmc_is_mci()) {
		resp = driver_get_response();
  400f82:	f242 4029 	movw	r0, #9257	; 0x2429
  400f86:	f2c0 0040 	movt	r0, #64	; 0x40
  400f8a:	4780      	blx	r0
		if (resp & CARD_STATUS_ERR_RD_WR) {
  400f8c:	f04f 0300 	mov.w	r3, #0
  400f90:	f2ce 4358 	movt	r3, #58456	; 0xe458
  400f94:	4003      	ands	r3, r0
  400f96:	b13b      	cbz	r3, 400fa8 <sd_mmc_init_write_blocks+0xb8>
			sd_mmc_debug("%s: Write blocks %02d r1 0x%08x CARD_STATUS_ERR_RD_WR\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
  400f98:	f240 147d 	movw	r4, #381	; 0x17d
  400f9c:	f2c0 0440 	movt	r4, #64	; 0x40
  400fa0:	47a0      	blx	r4
			return SD_MMC_ERR_COMM;
  400fa2:	f04f 0405 	mov.w	r4, #5
  400fa6:	e009      	b.n	400fbc <sd_mmc_init_write_blocks+0xcc>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
  400fa8:	f640 1124 	movw	r1, #2340	; 0x924
  400fac:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400fb0:	800d      	strh	r5, [r1, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
  400fb2:	f640 121c 	movw	r2, #2332	; 0x91c
  400fb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
  400fba:	8015      	strh	r5, [r2, #0]
	return SD_MMC_OK;
}
  400fbc:	4620      	mov	r0, r4
  400fbe:	b003      	add	sp, #12
  400fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400fc2:	bf00      	nop

00400fc4 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
  400fc4:	b510      	push	{r4, lr}
  400fc6:	460c      	mov	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
  400fc8:	f242 7301 	movw	r3, #9985	; 0x2701
  400fcc:	f2c0 0340 	movt	r3, #64	; 0x40
  400fd0:	4798      	blx	r3
  400fd2:	b948      	cbnz	r0, 400fe8 <sd_mmc_start_write_blocks+0x24>
		sd_mmc_nb_block_remaining = 0;
  400fd4:	f640 1124 	movw	r1, #2340	; 0x924
  400fd8:	f2c2 0100 	movt	r1, #8192	; 0x2000
  400fdc:	f04f 0300 	mov.w	r3, #0
  400fe0:	800b      	strh	r3, [r1, #0]
		return SD_MMC_ERR_COMM;
  400fe2:	f04f 0005 	mov.w	r0, #5
  400fe6:	bd10      	pop	{r4, pc}
	}
	sd_mmc_nb_block_remaining -= nb_block;
  400fe8:	f640 1024 	movw	r0, #2340	; 0x924
  400fec:	f2c2 0000 	movt	r0, #8192	; 0x2000
  400ff0:	8802      	ldrh	r2, [r0, #0]
  400ff2:	1b14      	subs	r4, r2, r4
  400ff4:	8004      	strh	r4, [r0, #0]
	return SD_MMC_OK;
  400ff6:	f04f 0000 	mov.w	r0, #0
}
  400ffa:	bd10      	pop	{r4, pc}

00400ffc <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
  400ffc:	b508      	push	{r3, lr}
	if (!driver_wait_end_of_write_blocks()) {
  400ffe:	f242 7375 	movw	r3, #10101	; 0x2775
  401002:	f2c0 0340 	movt	r3, #64	; 0x40
  401006:	4798      	blx	r3
  401008:	2800      	cmp	r0, #0
  40100a:	d02f      	beq.n	40106c <sd_mmc_wait_end_of_write_blocks+0x70>
		return SD_MMC_ERR_COMM;
	}
	if (sd_mmc_nb_block_remaining) {
  40100c:	f640 1024 	movw	r0, #2340	; 0x924
  401010:	f2c2 0000 	movt	r0, #8192	; 0x2000
  401014:	8801      	ldrh	r1, [r0, #0]
  401016:	2900      	cmp	r1, #0
  401018:	d12b      	bne.n	401072 <sd_mmc_wait_end_of_write_blocks+0x76>
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
  40101a:	f640 121c 	movw	r2, #2332	; 0x91c
  40101e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  401022:	8813      	ldrh	r3, [r2, #0]
  401024:	2b01      	cmp	r3, #1
  401026:	d107      	bne.n	401038 <sd_mmc_wait_end_of_write_blocks+0x3c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
  401028:	f240 137d 	movw	r3, #381	; 0x17d
  40102c:	f2c0 0340 	movt	r3, #64	; 0x40
  401030:	4798      	blx	r3
		return SD_MMC_OK;
  401032:	f04f 0000 	mov.w	r0, #0
  401036:	bd08      	pop	{r3, pc}
	}

	if (sd_mmc_is_mci()) {
		// Note: SPI multiblock writes terminate using a special
		// token, not a STOP_TRANSMISSION request.
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
  401038:	f243 100c 	movw	r0, #12556	; 0x310c
  40103c:	f04f 0100 	mov.w	r1, #0
  401040:	f242 32f9 	movw	r2, #9209	; 0x23f9
  401044:	f2c0 0240 	movt	r2, #64	; 0x40
  401048:	4790      	blx	r2
  40104a:	b938      	cbnz	r0, 40105c <sd_mmc_wait_end_of_write_blocks+0x60>
			sd_mmc_deselect_slot();
  40104c:	f240 117d 	movw	r1, #381	; 0x17d
  401050:	f2c0 0140 	movt	r1, #64	; 0x40
  401054:	4788      	blx	r1
			return SD_MMC_ERR_COMM;
  401056:	f04f 0005 	mov.w	r0, #5
  40105a:	bd08      	pop	{r3, pc}
		}
	}
	sd_mmc_deselect_slot();
  40105c:	f240 107d 	movw	r0, #381	; 0x17d
  401060:	f2c0 0040 	movt	r0, #64	; 0x40
  401064:	4780      	blx	r0
	return SD_MMC_OK;
  401066:	f04f 0000 	mov.w	r0, #0
  40106a:	bd08      	pop	{r3, pc}
}

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(void)
{
	if (!driver_wait_end_of_write_blocks()) {
		return SD_MMC_ERR_COMM;
  40106c:	f04f 0005 	mov.w	r0, #5
  401070:	bd08      	pop	{r3, pc}
	}
	if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
  401072:	f04f 0000 	mov.w	r0, #0
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
  401076:	bd08      	pop	{r3, pc}

00401078 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401078:	b510      	push	{r4, lr}
	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40107a:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  40107e:	f2c0 7027 	movt	r0, #1831	; 0x727
  401082:	f243 3339 	movw	r3, #13113	; 0x3339
  401086:	f2c0 0340 	movt	r3, #64	; 0x40
  40108a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40108c:	f04f 0000 	mov.w	r0, #0
  401090:	f04f 013e 	mov.w	r1, #62	; 0x3e
  401094:	f642 5241 	movw	r2, #11585	; 0x2d41
  401098:	f2c0 0240 	movt	r2, #64	; 0x40
  40109c:	4790      	blx	r2
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40109e:	f642 54b1 	movw	r4, #11697	; 0x2db1
  4010a2:	f2c0 0440 	movt	r4, #64	; 0x40
  4010a6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4010a8:	2800      	cmp	r0, #0
  4010aa:	d0fc      	beq.n	4010a6 <sysclk_init+0x2e>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4010ac:	f642 50c1 	movw	r0, #11713	; 0x2dc1
  4010b0:	f2c0 0040 	movt	r0, #64	; 0x40
  4010b4:	4780      	blx	r0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4010b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4010ba:	f2c4 010e 	movt	r1, #16398	; 0x400e
  4010be:	f643 7301 	movw	r3, #16129	; 0x3f01
  4010c2:	f2c2 0313 	movt	r3, #8211	; 0x2013
  4010c6:	628b      	str	r3, [r1, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4010c8:	f642 54d1 	movw	r4, #11729	; 0x2dd1
  4010cc:	f2c0 0440 	movt	r4, #64	; 0x40
  4010d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4010d2:	2800      	cmp	r0, #0
  4010d4:	d0fc      	beq.n	4010d0 <sysclk_init+0x58>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4010d6:	f04f 0010 	mov.w	r0, #16
  4010da:	f642 42a1 	movw	r2, #11425	; 0x2ca1
  4010de:	f2c0 0240 	movt	r2, #64	; 0x40
  4010e2:	4790      	blx	r2
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4010e4:	f243 1081 	movw	r0, #12673	; 0x3181
  4010e8:	f2c0 0040 	movt	r0, #64	; 0x40
  4010ec:	4780      	blx	r0
  4010ee:	bd10      	pop	{r4, pc}

004010f0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  4010f0:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  4010f2:	b928      	cbnz	r0, 401100 <mem_test_unit_ready+0x10>
  4010f4:	f645 7391 	movw	r3, #24465	; 0x5f91
  4010f8:	f2c0 0340 	movt	r3, #64	; 0x40
  4010fc:	4798      	blx	r3
  4010fe:	bd08      	pop	{r3, pc}
  401100:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
  401104:	bd08      	pop	{r3, pc}
  401106:	bf00      	nop

00401108 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  401108:	b508      	push	{r3, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
  40110a:	b930      	cbnz	r0, 40111a <mem_read_capacity+0x12>
  40110c:	4608      	mov	r0, r1
  40110e:	f645 73cd 	movw	r3, #24525	; 0x5fcd
  401112:	f2c0 0340 	movt	r3, #64	; 0x40
  401116:	4798      	blx	r3
  401118:	bd08      	pop	{r3, pc}
  40111a:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return status;
}
  40111e:	bd08      	pop	{r3, pc}

00401120 <mem_sector_size>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
  401120:	f1d0 0001 	rsbs	r0, r0, #1
  401124:	bf38      	it	cc
  401126:	2000      	movcc	r0, #0
  401128:	4770      	bx	lr
  40112a:	bf00      	nop

0040112c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
  40112c:	b508      	push	{r3, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  40112e:	b928      	cbnz	r0, 40113c <mem_wr_protect+0x10>
  401130:	f645 73f1 	movw	r3, #24561	; 0x5ff1
  401134:	f2c0 0340 	movt	r3, #64	; 0x40
  401138:	4798      	blx	r3
  40113a:	bd08      	pop	{r3, pc}
  40113c:	f04f 0001 	mov.w	r0, #1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
  401140:	bd08      	pop	{r3, pc}
  401142:	bf00      	nop

00401144 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
  401144:	b508      	push	{r3, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
  401146:	b938      	cbnz	r0, 401158 <memory_2_ram+0x14>
  401148:	4608      	mov	r0, r1
  40114a:	4611      	mov	r1, r2
  40114c:	f246 034d 	movw	r3, #24653	; 0x604d
  401150:	f2c0 0340 	movt	r3, #64	; 0x40
  401154:	4798      	blx	r3
  401156:	bd08      	pop	{r3, pc}
  401158:	f04f 0001 	mov.w	r0, #1
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
  40115c:	bd08      	pop	{r3, pc}
  40115e:	bf00      	nop

00401160 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
  401160:	b508      	push	{r3, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
  401162:	b938      	cbnz	r0, 401174 <ram_2_memory+0x14>
  401164:	4608      	mov	r0, r1
  401166:	4611      	mov	r1, r2
  401168:	f246 03ad 	movw	r3, #24749	; 0x60ad
  40116c:	f2c0 0340 	movt	r3, #64	; 0x40
  401170:	4798      	blx	r3
  401172:	bd08      	pop	{r3, pc}
  401174:	f04f 0001 	mov.w	r0, #1
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
  401178:	bd08      	pop	{r3, pc}
  40117a:	bf00      	nop

0040117c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40117c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401180:	460c      	mov	r4, r1
  401182:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
  401184:	bb48      	cbnz	r0, 4011da <_read+0x5e>
		return -1;
	}

	for (; len > 0; --len) {
  401186:	2a00      	cmp	r2, #0
  401188:	dd2b      	ble.n	4011e2 <_read+0x66>

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
  40118a:	188f      	adds	r7, r1, r2
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  40118c:	f640 56d0 	movw	r6, #3536	; 0xdd0
  401190:	f2c2 0600 	movt	r6, #8192	; 0x2000
  401194:	f640 55c8 	movw	r5, #3528	; 0xdc8
  401198:	f2c2 0500 	movt	r5, #8192	; 0x2000
  40119c:	ea6f 0901 	mvn.w	r9, r1
  4011a0:	eb07 0009 	add.w	r0, r7, r9
  4011a4:	f000 0901 	and.w	r9, r0, #1
  4011a8:	6830      	ldr	r0, [r6, #0]
  4011aa:	682b      	ldr	r3, [r5, #0]
  4011ac:	4798      	blx	r3
		ptr++;
  4011ae:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4011b2:	42bc      	cmp	r4, r7
  4011b4:	d119      	bne.n	4011ea <_read+0x6e>
  4011b6:	e00d      	b.n	4011d4 <_read+0x58>
		ptr_get(stdio_base, ptr);
  4011b8:	6830      	ldr	r0, [r6, #0]
  4011ba:	682b      	ldr	r3, [r5, #0]
  4011bc:	4621      	mov	r1, r4
  4011be:	4798      	blx	r3
		ptr++;
  4011c0:	f104 0401 	add.w	r4, r4, #1
  4011c4:	4621      	mov	r1, r4
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4011c6:	6830      	ldr	r0, [r6, #0]
  4011c8:	682a      	ldr	r2, [r5, #0]
  4011ca:	4790      	blx	r2
		ptr++;
  4011cc:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4011d0:	42bc      	cmp	r4, r7
  4011d2:	d1f1      	bne.n	4011b8 <_read+0x3c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4011d4:	4640      	mov	r0, r8
  4011d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4011da:	f04f 30ff 	mov.w	r0, #4294967295
  4011de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	for (; len > 0; --len) {
  4011e2:	f04f 0000 	mov.w	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4011e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4011ea:	f1b9 0f00 	cmp.w	r9, #0
  4011ee:	d0e3      	beq.n	4011b8 <_read+0x3c>
	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  4011f0:	6830      	ldr	r0, [r6, #0]
  4011f2:	682a      	ldr	r2, [r5, #0]
  4011f4:	4621      	mov	r1, r4
  4011f6:	4790      	blx	r2
		ptr++;
  4011f8:	f104 0401 	add.w	r4, r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4011fc:	42bc      	cmp	r4, r7
  4011fe:	d1db      	bne.n	4011b8 <_read+0x3c>
  401200:	e7e8      	b.n	4011d4 <_read+0x58>
  401202:	bf00      	nop

00401204 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  401204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401208:	460d      	mov	r5, r1
  40120a:	4690      	mov	r8, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40120c:	f100 30ff 	add.w	r0, r0, #4294967295
  401210:	2802      	cmp	r0, #2
  401212:	d824      	bhi.n	40125e <_write+0x5a>
		return -1;
	}

	for (; len != 0; --len) {
  401214:	b332      	cbz	r2, 401264 <_write+0x60>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401216:	f640 56d0 	movw	r6, #3536	; 0xdd0
  40121a:	f2c2 0600 	movt	r6, #8192	; 0x2000
  40121e:	f640 57cc 	movw	r7, #3532	; 0xdcc
  401222:	f2c2 0700 	movt	r7, #8192	; 0x2000
  401226:	f04f 0400 	mov.w	r4, #0
  40122a:	f102 39ff 	add.w	r9, r2, #4294967295
  40122e:	f009 0901 	and.w	r9, r9, #1
  401232:	6830      	ldr	r0, [r6, #0]
  401234:	683b      	ldr	r3, [r7, #0]
  401236:	5d09      	ldrb	r1, [r1, r4]
  401238:	4798      	blx	r3
  40123a:	42a0      	cmp	r0, r4
  40123c:	da1a      	bge.n	401274 <_write+0x70>
  40123e:	e014      	b.n	40126a <_write+0x66>
  401240:	6830      	ldr	r0, [r6, #0]
  401242:	683b      	ldr	r3, [r7, #0]
  401244:	5d29      	ldrb	r1, [r5, r4]
  401246:	4798      	blx	r3
  401248:	2800      	cmp	r0, #0
  40124a:	db0e      	blt.n	40126a <_write+0x66>
			return -1;
		}
		++nChars;
  40124c:	f104 0401 	add.w	r4, r4, #1
	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401250:	6830      	ldr	r0, [r6, #0]
  401252:	683a      	ldr	r2, [r7, #0]
  401254:	5d29      	ldrb	r1, [r5, r4]
  401256:	4790      	blx	r2
  401258:	2800      	cmp	r0, #0
  40125a:	da1d      	bge.n	401298 <_write+0x94>
  40125c:	e005      	b.n	40126a <_write+0x66>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40125e:	f04f 34ff 	mov.w	r4, #4294967295
  401262:	e004      	b.n	40126e <_write+0x6a>
	}

	for (; len != 0; --len) {
  401264:	f04f 0400 	mov.w	r4, #0
  401268:	e001      	b.n	40126e <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  40126a:	f04f 34ff 	mov.w	r4, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40126e:	4620      	mov	r0, r4
  401270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
  401274:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  401278:	45a0      	cmp	r8, r4
  40127a:	d0f8      	beq.n	40126e <_write+0x6a>
  40127c:	f1b9 0f00 	cmp.w	r9, #0
  401280:	d0de      	beq.n	401240 <_write+0x3c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  401282:	6830      	ldr	r0, [r6, #0]
  401284:	683a      	ldr	r2, [r7, #0]
  401286:	5d29      	ldrb	r1, [r5, r4]
  401288:	4790      	blx	r2
  40128a:	2800      	cmp	r0, #0
  40128c:	dbed      	blt.n	40126a <_write+0x66>
			return -1;
		}
		++nChars;
  40128e:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  401292:	45a0      	cmp	r8, r4
  401294:	d1d4      	bne.n	401240 <_write+0x3c>
  401296:	e7ea      	b.n	40126e <_write+0x6a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
  401298:	f104 0401 	add.w	r4, r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40129c:	45a0      	cmp	r8, r4
  40129e:	d1cf      	bne.n	401240 <_write+0x3c>
  4012a0:	e7e5      	b.n	40126e <_write+0x6a>
  4012a2:	bf00      	nop

004012a4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  4012a4:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4012a6:	f241 4350 	movw	r3, #5200	; 0x1450
  4012aa:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4012ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4012b2:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4012b4:	f04f 000b 	mov.w	r0, #11
  4012b8:	f642 54e1 	movw	r4, #11745	; 0x2de1
  4012bc:	f2c0 0440 	movt	r4, #64	; 0x40
  4012c0:	47a0      	blx	r4
  4012c2:	f04f 000c 	mov.w	r0, #12
  4012c6:	47a0      	blx	r4
  4012c8:	f04f 000d 	mov.w	r0, #13
  4012cc:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4012ce:	f04f 0013 	mov.w	r0, #19
  4012d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4012d6:	f642 143d 	movw	r4, #10557	; 0x293d
  4012da:	f2c0 0440 	movt	r4, #64	; 0x40
  4012de:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4012e0:	f04f 0014 	mov.w	r0, #20
  4012e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4012e8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4012ea:	f04f 0023 	mov.w	r0, #35	; 0x23
  4012ee:	f04f 0179 	mov.w	r1, #121	; 0x79
  4012f2:	f6c2 0100 	movt	r1, #10240	; 0x2800
  4012f6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  4012f8:	f04f 004c 	mov.w	r0, #76	; 0x4c
  4012fc:	f04f 0159 	mov.w	r1, #89	; 0x59
  401300:	f6c2 0100 	movt	r1, #10240	; 0x2800
  401304:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  401306:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  40130a:	f2c4 000e 	movt	r0, #16398	; 0x400e
  40130e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  401312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401316:	f642 25b5 	movw	r5, #10933	; 0x2ab5
  40131a:	f2c0 0540 	movt	r5, #64	; 0x40
  40131e:	47a8      	blx	r5
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  401320:	f04f 0501 	mov.w	r5, #1
  401324:	f6c0 0500 	movt	r5, #2048	; 0x800
  401328:	f04f 0040 	mov.w	r0, #64	; 0x40
  40132c:	4629      	mov	r1, r5
  40132e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  401330:	f04f 0041 	mov.w	r0, #65	; 0x41
  401334:	4629      	mov	r1, r5
  401336:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  401338:	f04f 0042 	mov.w	r0, #66	; 0x42
  40133c:	4629      	mov	r1, r5
  40133e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  401340:	f04f 0043 	mov.w	r0, #67	; 0x43
  401344:	4629      	mov	r1, r5
  401346:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  401348:	f04f 0044 	mov.w	r0, #68	; 0x44
  40134c:	4629      	mov	r1, r5
  40134e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  401350:	f04f 0045 	mov.w	r0, #69	; 0x45
  401354:	4629      	mov	r1, r5
  401356:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  401358:	f04f 0046 	mov.w	r0, #70	; 0x46
  40135c:	4629      	mov	r1, r5
  40135e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  401360:	f04f 0047 	mov.w	r0, #71	; 0x47
  401364:	4629      	mov	r1, r5
  401366:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  401368:	f04f 004b 	mov.w	r0, #75	; 0x4b
  40136c:	4629      	mov	r1, r5
  40136e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  401370:	f04f 0048 	mov.w	r0, #72	; 0x48
  401374:	4629      	mov	r1, r5
  401376:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  401378:	f04f 004f 	mov.w	r0, #79	; 0x4f
  40137c:	4629      	mov	r1, r5
  40137e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  401380:	f04f 0053 	mov.w	r0, #83	; 0x53
  401384:	4629      	mov	r1, r5
  401386:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  401388:	f04f 004d 	mov.w	r0, #77	; 0x4d
  40138c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401390:	47a0      	blx	r4
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif

#if defined (CONF_BOARD_SD_MMC_HSMCI)
	/* Configure HSMCI pins */
	gpio_configure_pin(PIN_HSMCI_MCCDA_GPIO, PIN_HSMCI_MCCDA_FLAGS);
  401392:	f04f 001c 	mov.w	r0, #28
  401396:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40139a:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCCK_GPIO, PIN_HSMCI_MCCK_FLAGS);
  40139c:	f04f 001d 	mov.w	r0, #29
  4013a0:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013a4:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA0_GPIO, PIN_HSMCI_MCDA0_FLAGS);
  4013a6:	f04f 001e 	mov.w	r0, #30
  4013aa:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013ae:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA1_GPIO, PIN_HSMCI_MCDA1_FLAGS);
  4013b0:	f04f 001f 	mov.w	r0, #31
  4013b4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013b8:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA2_GPIO, PIN_HSMCI_MCDA2_FLAGS);
  4013ba:	f04f 001a 	mov.w	r0, #26
  4013be:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013c2:	47a0      	blx	r4
	gpio_configure_pin(PIN_HSMCI_MCDA3_GPIO, PIN_HSMCI_MCDA3_FLAGS);
  4013c4:	f04f 001b 	mov.w	r0, #27
  4013c8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013cc:	47a0      	blx	r4

	/* Configure SD/MMC card detect pin */
	gpio_configure_pin(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
  4013ce:	f04f 0006 	mov.w	r0, #6
  4013d2:	f04f 0101 	mov.w	r1, #1
  4013d6:	f6c2 0100 	movt	r1, #10240	; 0x2800
  4013da:	47a0      	blx	r4
  4013dc:	bd38      	pop	{r3, r4, r5, pc}
  4013de:	bf00      	nop

004013e0 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  4013e0:	b470      	push	{r4, r5, r6}
  4013e2:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  4013e4:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  4013e8:	2810      	cmp	r0, #16
  4013ea:	bf34      	ite	cc
  4013ec:	4606      	movcc	r6, r0
  4013ee:	2610      	movcs	r6, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  4013f0:	2e00      	cmp	r6, #0
  4013f2:	bf08      	it	eq
  4013f4:	2601      	moveq	r6, #1

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  4013f6:	f04f 0100 	mov.w	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4013fa:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  4013fe:	f2c4 000e 	movt	r0, #16398	; 0x400e
  401402:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  401406:	f04f 0418 	mov.w	r4, #24
  40140a:	6345      	str	r5, [r0, #52]	; 0x34
  40140c:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40140e:	9b01      	ldr	r3, [sp, #4]
  401410:	f103 32ff 	add.w	r2, r3, #4294967295
  401414:	9201      	str	r2, [sp, #4]
  401416:	2b00      	cmp	r3, #0
  401418:	d1f9      	bne.n	40140e <aat31xx_set_backlight+0x2e>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40141a:	6305      	str	r5, [r0, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  40141c:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  40141e:	9b01      	ldr	r3, [sp, #4]
  401420:	f103 32ff 	add.w	r2, r3, #4294967295
  401424:	9201      	str	r2, [sp, #4]
  401426:	2b00      	cmp	r3, #0
  401428:	d1f9      	bne.n	40141e <aat31xx_set_backlight+0x3e>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  40142a:	f101 0101 	add.w	r1, r1, #1
  40142e:	42b1      	cmp	r1, r6
  401430:	d3eb      	bcc.n	40140a <aat31xx_set_backlight+0x2a>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  401432:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401436:	9101      	str	r1, [sp, #4]
	while (ul_delay--) {
  401438:	9801      	ldr	r0, [sp, #4]
  40143a:	f100 33ff 	add.w	r3, r0, #4294967295
  40143e:	9301      	str	r3, [sp, #4]
  401440:	2800      	cmp	r0, #0
  401442:	d1f9      	bne.n	401438 <aat31xx_set_backlight+0x58>
	}
}
  401444:	b003      	add	sp, #12
  401446:	bc70      	pop	{r4, r5, r6}
  401448:	4770      	bx	lr
  40144a:	bf00      	nop

0040144c <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  40144c:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40144e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  401452:	f2c4 030e 	movt	r3, #16398	; 0x400e
  401456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40145a:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  40145c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  401460:	9001      	str	r0, [sp, #4]
	while (ul_delay--) {
  401462:	9901      	ldr	r1, [sp, #4]
  401464:	f101 33ff 	add.w	r3, r1, #4294967295
  401468:	9301      	str	r3, [sp, #4]
  40146a:	2900      	cmp	r1, #0
  40146c:	d1f9      	bne.n	401462 <aat31xx_disable_backlight+0x16>
	}
}
  40146e:	b002      	add	sp, #8
  401470:	4770      	bx	lr
  401472:	bf00      	nop

00401474 <ili93xx_write_ram_prepare>:
/**
 * \brief Prepare to write GRAM data for ili93xx.
 */
static void ili93xx_write_ram_prepare(void)
{
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  401474:	f640 43e8 	movw	r3, #3304	; 0xce8
  401478:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40147c:	7818      	ldrb	r0, [r3, #0]
  40147e:	2801      	cmp	r0, #1
  401480:	d108      	bne.n	401494 <ili93xx_write_ram_prepare+0x20>
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI9325 index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  401482:	f04f 41c2 	mov.w	r1, #1627389952	; 0x61000000
  401486:	f04f 0200 	mov.w	r2, #0
  40148a:	700a      	strb	r2, [r1, #0]
  40148c:	f04f 0322 	mov.w	r3, #34	; 0x22
  401490:	700b      	strb	r3, [r1, #0]
  401492:	4770      	bx	lr
		/** Write Data to GRAM (R22h) */
		LCD_IR(0);
		LCD_IR(ILI9325_GRAM_DATA_REG);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  401494:	2802      	cmp	r0, #2
  401496:	d10a      	bne.n	4014ae <ili93xx_write_ram_prepare+0x3a>
  401498:	f04f 41c2 	mov.w	r1, #1627389952	; 0x61000000
  40149c:	f04f 022c 	mov.w	r2, #44	; 0x2c
  4014a0:	700a      	strb	r2, [r1, #0]
  4014a2:	f04f 0300 	mov.w	r3, #0
  4014a6:	700b      	strb	r3, [r1, #0]
  4014a8:	f04f 003c 	mov.w	r0, #60	; 0x3c
  4014ac:	7008      	strb	r0, [r1, #0]
  4014ae:	4770      	bx	lr

004014b0 <ili93xx_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili93xx_write_ram(ili93xx_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  4014b0:	f3c0 4207 	ubfx	r2, r0, #16, #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  4014b4:	f04f 0302 	mov.w	r3, #2
  4014b8:	f2c6 1300 	movt	r3, #24832	; 0x6100
  4014bc:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  4014be:	f3c0 2107 	ubfx	r1, r0, #8, #8
  4014c2:	7019      	strb	r1, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  4014c4:	b2c0      	uxtb	r0, r0
  4014c6:	7018      	strb	r0, [r3, #0]
  4014c8:	4770      	bx	lr
  4014ca:	bf00      	nop

004014cc <ili93xx_write_ram_buffer>:
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
  4014cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4014d0:	4681      	mov	r9, r0
  4014d2:	4688      	mov	r8, r1
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  4014d4:	f031 0a07 	bics.w	sl, r1, #7
  4014d8:	d04f      	beq.n	40157a <ili93xx_write_ram_buffer+0xae>
  4014da:	4605      	mov	r5, r0
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  4014dc:	f241 44b1 	movw	r4, #5297	; 0x14b1
  4014e0:	f2c0 0440 	movt	r4, #64	; 0x40
  4014e4:	f10a 33ff 	add.w	r3, sl, #4294967295
  4014e8:	f3c3 06c0 	ubfx	r6, r3, #3, #1
  4014ec:	6800      	ldr	r0, [r0, #0]
  4014ee:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
  4014f0:	f8d9 0004 	ldr.w	r0, [r9, #4]
  4014f4:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
  4014f6:	f8d9 0008 	ldr.w	r0, [r9, #8]
  4014fa:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
  4014fc:	f8d9 000c 	ldr.w	r0, [r9, #12]
  401500:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
  401502:	f8d9 0010 	ldr.w	r0, [r9, #16]
  401506:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
  401508:	f8d9 0014 	ldr.w	r0, [r9, #20]
  40150c:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
  40150e:	f8d9 0018 	ldr.w	r0, [r9, #24]
  401512:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
  401514:	f8d9 001c 	ldr.w	r0, [r9, #28]
  401518:	47a0      	blx	r4
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  40151a:	f04f 0708 	mov.w	r7, #8
  40151e:	f105 0520 	add.w	r5, r5, #32
  401522:	4557      	cmp	r7, sl
  401524:	d35d      	bcc.n	4015e2 <ili93xx_write_ram_buffer+0x116>
  401526:	e02a      	b.n	40157e <ili93xx_write_ram_buffer+0xb2>
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  401528:	6828      	ldr	r0, [r5, #0]
  40152a:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
  40152c:	6868      	ldr	r0, [r5, #4]
  40152e:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
  401530:	68a8      	ldr	r0, [r5, #8]
  401532:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
  401534:	68e8      	ldr	r0, [r5, #12]
  401536:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
  401538:	6928      	ldr	r0, [r5, #16]
  40153a:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
  40153c:	6968      	ldr	r0, [r5, #20]
  40153e:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
  401540:	69a8      	ldr	r0, [r5, #24]
  401542:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
  401544:	69e8      	ldr	r0, [r5, #28]
  401546:	47a0      	blx	r4
  401548:	f105 0620 	add.w	r6, r5, #32
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  40154c:	6a28      	ldr	r0, [r5, #32]
  40154e:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
  401550:	6a68      	ldr	r0, [r5, #36]	; 0x24
  401552:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
  401554:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  401556:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
  401558:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40155a:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
  40155c:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40155e:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
  401560:	6b68      	ldr	r0, [r5, #52]	; 0x34
  401562:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
  401564:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  401566:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
  401568:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  40156a:	47a0      	blx	r4
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  40156c:	f107 0710 	add.w	r7, r7, #16
  401570:	f105 0540 	add.w	r5, r5, #64	; 0x40
  401574:	4557      	cmp	r7, sl
  401576:	d3d7      	bcc.n	401528 <ili93xx_write_ram_buffer+0x5c>
  401578:	e001      	b.n	40157e <ili93xx_write_ram_buffer+0xb2>
  40157a:	f04f 0700 	mov.w	r7, #0
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  40157e:	45b8      	cmp	r8, r7
  401580:	d922      	bls.n	4015c8 <ili93xx_write_ram_buffer+0xfc>
 * \brief Write multiple data in buffer to LCD controller for ili93xx.
 *
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
  401582:	f107 34ff 	add.w	r4, r7, #4294967295
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  401586:	f241 46b1 	movw	r6, #5297	; 0x14b1
  40158a:	f2c0 0640 	movt	r6, #64	; 0x40
  40158e:	ea6f 0007 	mvn.w	r0, r7
  401592:	eb00 0108 	add.w	r1, r0, r8
  401596:	f001 0501 	and.w	r5, r1, #1
  40159a:	eb09 0484 	add.w	r4, r9, r4, lsl #2
  40159e:	f854 0f04 	ldr.w	r0, [r4, #4]!
  4015a2:	47b0      	blx	r6
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  4015a4:	f107 0701 	add.w	r7, r7, #1
  4015a8:	45b8      	cmp	r8, r7
  4015aa:	d80f      	bhi.n	4015cc <ili93xx_write_ram_buffer+0x100>
  4015ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015b0:	f104 0504 	add.w	r5, r4, #4
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  4015b4:	6860      	ldr	r0, [r4, #4]
  4015b6:	47b0      	blx	r6
  4015b8:	f104 0408 	add.w	r4, r4, #8
  4015bc:	6868      	ldr	r0, [r5, #4]
  4015be:	47b0      	blx	r6
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  4015c0:	f107 0702 	add.w	r7, r7, #2
  4015c4:	45b8      	cmp	r8, r7
  4015c6:	d8f3      	bhi.n	4015b0 <ili93xx_write_ram_buffer+0xe4>
  4015c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015cc:	2d00      	cmp	r5, #0
  4015ce:	d0ef      	beq.n	4015b0 <ili93xx_write_ram_buffer+0xe4>
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  4015d0:	f854 0f04 	ldr.w	r0, [r4, #4]!
  4015d4:	47b0      	blx	r6
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  4015d6:	f107 0701 	add.w	r7, r7, #1
  4015da:	45b8      	cmp	r8, r7
  4015dc:	d8e8      	bhi.n	4015b0 <ili93xx_write_ram_buffer+0xe4>
  4015de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015e2:	2e00      	cmp	r6, #0
  4015e4:	d0a0      	beq.n	401528 <ili93xx_write_ram_buffer+0x5c>
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  4015e6:	6828      	ldr	r0, [r5, #0]
  4015e8:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
  4015ea:	6868      	ldr	r0, [r5, #4]
  4015ec:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
  4015ee:	68a8      	ldr	r0, [r5, #8]
  4015f0:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
  4015f2:	68e8      	ldr	r0, [r5, #12]
  4015f4:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
  4015f6:	6928      	ldr	r0, [r5, #16]
  4015f8:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
  4015fa:	6968      	ldr	r0, [r5, #20]
  4015fc:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
  4015fe:	69a8      	ldr	r0, [r5, #24]
  401600:	47a0      	blx	r4
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
  401602:	69e8      	ldr	r0, [r5, #28]
  401604:	47a0      	blx	r4
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  401606:	f107 0708 	add.w	r7, r7, #8
  40160a:	f105 0520 	add.w	r5, r5, #32
  40160e:	4557      	cmp	r7, sl
  401610:	d38a      	bcc.n	401528 <ili93xx_write_ram_buffer+0x5c>
  401612:	e7b4      	b.n	40157e <ili93xx_write_ram_buffer+0xb2>

00401614 <ili93xx_write_register_word>:
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI9325 index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  401614:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  401618:	f04f 0200 	mov.w	r2, #0
  40161c:	701a      	strb	r2, [r3, #0]
  40161e:	7018      	strb	r0, [r3, #0]
 */
static void ili93xx_write_register_word(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  401620:	ea4f 2011 	mov.w	r0, r1, lsr #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  401624:	f04f 0302 	mov.w	r3, #2
  401628:	f2c6 1300 	movt	r3, #24832	; 0x6100
  40162c:	7018      	strb	r0, [r3, #0]
	LCD_WD(us_data & 0xFF);
  40162e:	b2c9      	uxtb	r1, r1
  401630:	7019      	strb	r1, [r3, #0]
  401632:	4770      	bx	lr

00401634 <ili93xx_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 */
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
  401634:	b430      	push	{r4, r5}
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI9325 index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  401636:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40163a:	f04f 0400 	mov.w	r4, #0
  40163e:	701c      	strb	r4, [r3, #0]
  401640:	7018      	strb	r0, [r3, #0]
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  401642:	4615      	mov	r5, r2
  401644:	b1d2      	cbz	r2, 40167c <ili93xx_write_register+0x48>
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  401646:	f04f 0002 	mov.w	r0, #2
  40164a:	f2c6 1000 	movt	r0, #24832	; 0x6100
  40164e:	4623      	mov	r3, r4
  401650:	f102 32ff 	add.w	r2, r2, #4294967295
  401654:	f002 0401 	and.w	r4, r2, #1
		LCD_WD(p_data[i]);
  401658:	5cca      	ldrb	r2, [r1, r3]
  40165a:	7002      	strb	r2, [r0, #0]
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  40165c:	f103 0301 	add.w	r3, r3, #1
  401660:	2d01      	cmp	r5, #1
  401662:	d80d      	bhi.n	401680 <ili93xx_write_register+0x4c>
  401664:	e00a      	b.n	40167c <ili93xx_write_register+0x48>
		LCD_WD(p_data[i]);
  401666:	5ccc      	ldrb	r4, [r1, r3]
  401668:	7004      	strb	r4, [r0, #0]
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  40166a:	f103 0301 	add.w	r3, r3, #1
		LCD_WD(p_data[i]);
  40166e:	5cca      	ldrb	r2, [r1, r3]
  401670:	7002      	strb	r2, [r0, #0]
  401672:	f103 0301 	add.w	r3, r3, #1
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  401676:	b2dc      	uxtb	r4, r3
  401678:	42a5      	cmp	r5, r4
  40167a:	d8f4      	bhi.n	401666 <ili93xx_write_register+0x32>
		LCD_WD(p_data[i]);
	}
}
  40167c:	bc30      	pop	{r4, r5}
  40167e:	4770      	bx	lr
  401680:	b264      	sxtb	r4, r4
  401682:	2c00      	cmp	r4, #0
  401684:	d0ef      	beq.n	401666 <ili93xx_write_register+0x32>
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
		LCD_WD(p_data[i]);
  401686:	5cca      	ldrb	r2, [r1, r3]
  401688:	7002      	strb	r2, [r0, #0]
  40168a:	f103 0301 	add.w	r3, r3, #1
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  40168e:	b2da      	uxtb	r2, r3
  401690:	4295      	cmp	r5, r2
  401692:	d8e8      	bhi.n	401666 <ili93xx_write_register+0x32>
  401694:	e7f2      	b.n	40167c <ili93xx_write_register+0x48>
  401696:	bf00      	nop

00401698 <ili93xx_read_register>:
 * \param p_data the pointer to the read data.
 * \param uc_datacnt the number of the read data
 */
static void ili93xx_read_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
  401698:	b430      	push	{r4, r5}
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI9325 index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  40169a:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40169e:	f04f 0400 	mov.w	r4, #0
  4016a2:	701c      	strb	r4, [r3, #0]
  4016a4:	7018      	strb	r0, [r3, #0]
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
  4016a6:	4615      	mov	r5, r2
  4016a8:	b1d2      	cbz	r2, 4016e0 <ili93xx_read_register+0x48>
																lcd_data;
}

static inline uint8_t LCD_RD(void)
{
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  4016aa:	f04f 0002 	mov.w	r0, #2
  4016ae:	f2c6 1000 	movt	r0, #24832	; 0x6100
  4016b2:	4623      	mov	r3, r4
  4016b4:	f102 32ff 	add.w	r2, r2, #4294967295
  4016b8:	f002 0401 	and.w	r4, r2, #1
  4016bc:	7802      	ldrb	r2, [r0, #0]
		p_data[i] = LCD_RD();
  4016be:	54ca      	strb	r2, [r1, r3]
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
  4016c0:	f103 0301 	add.w	r3, r3, #1
  4016c4:	2d01      	cmp	r5, #1
  4016c6:	d80d      	bhi.n	4016e4 <ili93xx_read_register+0x4c>
  4016c8:	e00a      	b.n	4016e0 <ili93xx_read_register+0x48>
  4016ca:	7804      	ldrb	r4, [r0, #0]
		p_data[i] = LCD_RD();
  4016cc:	54cc      	strb	r4, [r1, r3]
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
  4016ce:	f103 0301 	add.w	r3, r3, #1
  4016d2:	7802      	ldrb	r2, [r0, #0]
		p_data[i] = LCD_RD();
  4016d4:	54ca      	strb	r2, [r1, r3]
  4016d6:	f103 0301 	add.w	r3, r3, #1
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
  4016da:	b2dc      	uxtb	r4, r3
  4016dc:	42a5      	cmp	r5, r4
  4016de:	d8f4      	bhi.n	4016ca <ili93xx_read_register+0x32>
		p_data[i] = LCD_RD();
	}
}
  4016e0:	bc30      	pop	{r4, r5}
  4016e2:	4770      	bx	lr
  4016e4:	b264      	sxtb	r4, r4
  4016e6:	2c00      	cmp	r4, #0
  4016e8:	d0ef      	beq.n	4016ca <ili93xx_read_register+0x32>
  4016ea:	7802      	ldrb	r2, [r0, #0]
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
		p_data[i] = LCD_RD();
  4016ec:	54ca      	strb	r2, [r1, r3]
  4016ee:	f103 0301 	add.w	r3, r3, #1
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
  4016f2:	b2da      	uxtb	r2, r3
  4016f4:	4295      	cmp	r5, r2
  4016f6:	d8e8      	bhi.n	4016ca <ili93xx_read_register+0x32>
  4016f8:	e7f2      	b.n	4016e0 <ili93xx_read_register+0x48>
  4016fa:	bf00      	nop

004016fc <ili93xx_delay>:

/**
 * \brief Delay function.
 */
static void ili93xx_delay(uint32_t ul_ms)
{
  4016fc:	b082      	sub	sp, #8
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  4016fe:	f04f 0300 	mov.w	r3, #0
  401702:	9301      	str	r3, [sp, #4]
  401704:	9901      	ldr	r1, [sp, #4]
  401706:	4288      	cmp	r0, r1
  401708:	d917      	bls.n	40173a <ili93xx_delay+0x3e>
		for (i = 0; i < 100000; i++) {
  40170a:	f04f 0100 	mov.w	r1, #0
  40170e:	f248 629f 	movw	r2, #34463	; 0x869f
  401712:	f2c0 0201 	movt	r2, #1
  401716:	9101      	str	r1, [sp, #4]
  401718:	9b01      	ldr	r3, [sp, #4]
  40171a:	4293      	cmp	r3, r2
  40171c:	d806      	bhi.n	40172c <ili93xx_delay+0x30>
  40171e:	9b01      	ldr	r3, [sp, #4]
  401720:	f103 0301 	add.w	r3, r3, #1
  401724:	9301      	str	r3, [sp, #4]
  401726:	9b01      	ldr	r3, [sp, #4]
  401728:	4293      	cmp	r3, r2
  40172a:	d9f8      	bls.n	40171e <ili93xx_delay+0x22>
 */
static void ili93xx_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  40172c:	9b01      	ldr	r3, [sp, #4]
  40172e:	f103 0301 	add.w	r3, r3, #1
  401732:	9301      	str	r3, [sp, #4]
  401734:	9b01      	ldr	r3, [sp, #4]
  401736:	4283      	cmp	r3, r0
  401738:	d3ed      	bcc.n	401716 <ili93xx_delay+0x1a>
		for (i = 0; i < 100000; i++) {
		}
	}
}
  40173a:	b002      	add	sp, #8
  40173c:	4770      	bx	lr
  40173e:	bf00      	nop

00401740 <ili93xx_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili93xx_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  401740:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= g_ul_lcd_x_length) {
  401742:	f240 0434 	movw	r4, #52	; 0x34
  401746:	f2c2 0400 	movt	r4, #8192	; 0x2000
  40174a:	6824      	ldr	r4, [r4, #0]
  40174c:	6805      	ldr	r5, [r0, #0]
  40174e:	42a5      	cmp	r5, r4
		*p_ul_x1 = g_ul_lcd_x_length - 1;
  401750:	bf24      	itt	cs
  401752:	f104 35ff 	addcs.w	r5, r4, #4294967295
  401756:	6005      	strcs	r5, [r0, #0]
	}

	if (*p_ul_x2 >= g_ul_lcd_x_length) {
  401758:	6815      	ldr	r5, [r2, #0]
  40175a:	42ac      	cmp	r4, r5
		*p_ul_x2 = g_ul_lcd_x_length - 1;
  40175c:	bf9c      	itt	ls
  40175e:	f104 34ff 	addls.w	r4, r4, #4294967295
  401762:	6014      	strls	r4, [r2, #0]
	}

	if (*p_ul_y1 >= g_ul_lcd_y_length) {
  401764:	f240 0438 	movw	r4, #56	; 0x38
  401768:	f2c2 0400 	movt	r4, #8192	; 0x2000
  40176c:	6824      	ldr	r4, [r4, #0]
  40176e:	680d      	ldr	r5, [r1, #0]
  401770:	42a5      	cmp	r5, r4
		*p_ul_y1 = g_ul_lcd_y_length - 1;
  401772:	bf24      	itt	cs
  401774:	f104 35ff 	addcs.w	r5, r4, #4294967295
  401778:	600d      	strcs	r5, [r1, #0]
	}

	if (*p_ul_y2 >= g_ul_lcd_y_length) {
  40177a:	681d      	ldr	r5, [r3, #0]
  40177c:	42ac      	cmp	r4, r5
		*p_ul_y2 = g_ul_lcd_y_length - 1;
  40177e:	bf9c      	itt	ls
  401780:	f104 34ff 	addls.w	r4, r4, #4294967295
  401784:	601c      	strls	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  401786:	6804      	ldr	r4, [r0, #0]
  401788:	6815      	ldr	r5, [r2, #0]
  40178a:	42ac      	cmp	r4, r5
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  40178c:	bf84      	itt	hi
  40178e:	6005      	strhi	r5, [r0, #0]
		*p_ul_x2 = dw;
  401790:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  401792:	680a      	ldr	r2, [r1, #0]
  401794:	6818      	ldr	r0, [r3, #0]
  401796:	4282      	cmp	r2, r0
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  401798:	bf84      	itt	hi
  40179a:	6008      	strhi	r0, [r1, #0]
		*p_ul_y2 = dw;
  40179c:	601a      	strhi	r2, [r3, #0]
	}
}
  40179e:	bc30      	pop	{r4, r5}
  4017a0:	4770      	bx	lr
  4017a2:	bf00      	nop

004017a4 <ili93xx_device_type_identify>:
 *        ILI9341 device ID locates in Read ID4 (RD3h) register.
 *
 * \return 0 if secceed in identifying device; otherwise fails.
 */
uint8_t ili93xx_device_type_identify(void)
{
  4017a4:	b500      	push	{lr}
  4017a6:	b083      	sub	sp, #12
	uint8_t paratable[6];
	uint16_t chipid;

	/** Read ID4 (RD4h) register to get device code for ILI9341*/
	ili93xx_read_register(ILI9341_CMD_READ_ID4, paratable, 4);
  4017a8:	f04f 00d3 	mov.w	r0, #211	; 0xd3
  4017ac:	4669      	mov	r1, sp
  4017ae:	f04f 0204 	mov.w	r2, #4
  4017b2:	f241 6399 	movw	r3, #5785	; 0x1699
  4017b6:	f2c0 0340 	movt	r3, #64	; 0x40
  4017ba:	4798      	blx	r3
	chipid = ((uint16_t)paratable[2] << 8) + paratable[3];
  4017bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
  4017c0:	f89d 0003 	ldrb.w	r0, [sp, #3]
  4017c4:	eb00 2102 	add.w	r1, r0, r2, lsl #8

	if (chipid == ILI9341_DEVICE_CODE) {
  4017c8:	b28a      	uxth	r2, r1
  4017ca:	f249 3341 	movw	r3, #37697	; 0x9341
  4017ce:	429a      	cmp	r2, r3
  4017d0:	d109      	bne.n	4017e6 <ili93xx_device_type_identify+0x42>
		g_uc_device_type = DEVICE_TYPE_ILI9341;
  4017d2:	f640 40e8 	movw	r0, #3304	; 0xce8
  4017d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4017da:	f04f 0302 	mov.w	r3, #2
  4017de:	7003      	strb	r3, [r0, #0]
		return 0;
  4017e0:	f04f 0000 	mov.w	r0, #0
  4017e4:	e020      	b.n	401828 <ili93xx_device_type_identify+0x84>
	}

	/** Driver Code Read (R00h) for ILI9325*/
	ili93xx_read_register(ILI9325_DEVICE_CODE_REG, paratable, 2);
  4017e6:	f04f 0000 	mov.w	r0, #0
  4017ea:	4669      	mov	r1, sp
  4017ec:	f04f 0202 	mov.w	r2, #2
  4017f0:	f241 6399 	movw	r3, #5785	; 0x1699
  4017f4:	f2c0 0340 	movt	r3, #64	; 0x40
  4017f8:	4798      	blx	r3
	chipid = ((uint16_t)paratable[0] << 8) + paratable[1];
  4017fa:	f89d 0000 	ldrb.w	r0, [sp]
  4017fe:	f89d 1001 	ldrb.w	r1, [sp, #1]
  401802:	eb01 2200 	add.w	r2, r1, r0, lsl #8
	if (chipid == ILI9325_DEVICE_CODE) {
  401806:	b290      	uxth	r0, r2
  401808:	f249 3325 	movw	r3, #37669	; 0x9325
  40180c:	4298      	cmp	r0, r3
  40180e:	d109      	bne.n	401824 <ili93xx_device_type_identify+0x80>
		g_uc_device_type = DEVICE_TYPE_ILI9325;
  401810:	f640 41e8 	movw	r1, #3304	; 0xce8
  401814:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401818:	f04f 0201 	mov.w	r2, #1
  40181c:	700a      	strb	r2, [r1, #0]
		return 0;
  40181e:	f04f 0000 	mov.w	r0, #0
  401822:	e001      	b.n	401828 <ili93xx_device_type_identify+0x84>
	}

	return 1;
  401824:	f04f 0001 	mov.w	r0, #1
}
  401828:	b003      	add	sp, #12
  40182a:	bd00      	pop	{pc}

0040182c <ili93xx_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili93xx_display_on(void)
{
  40182c:	b508      	push	{r3, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  40182e:	f640 43e8 	movw	r3, #3304	; 0xce8
  401832:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401836:	7818      	ldrb	r0, [r3, #0]
  401838:	2801      	cmp	r0, #1
  40183a:	d109      	bne.n	401850 <ili93xx_display_on+0x24>
		ili93xx_write_register_word(ILI9325_DISP_CTRL1,
  40183c:	f04f 0007 	mov.w	r0, #7
  401840:	f240 1133 	movw	r1, #307	; 0x133
  401844:	f241 6215 	movw	r2, #5653	; 0x1615
  401848:	f2c0 0240 	movt	r2, #64	; 0x40
  40184c:	4790      	blx	r2
  40184e:	bd08      	pop	{r3, pc}
				ILI9325_DISP_CTRL1_BASEE |
				ILI9325_DISP_CTRL1_GON |
				ILI9325_DISP_CTRL1_DTE |
				ILI9325_DISP_CTRL1_D(0x03));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  401850:	2802      	cmp	r0, #2
  401852:	d109      	bne.n	401868 <ili93xx_display_on+0x3c>
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, NULL, 0);
  401854:	f04f 0029 	mov.w	r0, #41	; 0x29
  401858:	f04f 0100 	mov.w	r1, #0
  40185c:	460a      	mov	r2, r1
  40185e:	f241 6335 	movw	r3, #5685	; 0x1635
  401862:	f2c0 0340 	movt	r3, #64	; 0x40
  401866:	4798      	blx	r3
  401868:	bd08      	pop	{r3, pc}
  40186a:	bf00      	nop

0040186c <ili93xx_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
  40186c:	f640 1128 	movw	r1, #2344	; 0x928
  401870:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401874:	f1a1 0304 	sub.w	r3, r1, #4
/**
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
  401878:	f501 716f 	add.w	r1, r1, #956	; 0x3bc
  40187c:	f103 0204 	add.w	r2, r3, #4
{
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  401880:	6058      	str	r0, [r3, #4]
  401882:	f103 0308 	add.w	r3, r3, #8
  401886:	6050      	str	r0, [r2, #4]
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  401888:	428b      	cmp	r3, r1
  40188a:	d1f7      	bne.n	40187c <ili93xx_set_foreground_color+0x10>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  40188c:	4770      	bx	lr
  40188e:	bf00      	nop

00401890 <ili93xx_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili93xx_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  401890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401894:	b082      	sub	sp, #8
  401896:	460d      	mov	r5, r1
  401898:	4617      	mov	r7, r2
  40189a:	461e      	mov	r6, r3
	Assert(ul_x <= (g_ul_lcd_x_length - 1));
	Assert(ul_y <= (g_ul_lcd_y_length - 1));
	Assert(ul_width <= (g_ul_lcd_x_length - ul_x));
	Assert(ul_height <= (g_ul_lcd_y_length - ul_y));
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  40189c:	f640 44e8 	movw	r4, #3304	; 0xce8
  4018a0:	f2c2 0400 	movt	r4, #8192	; 0x2000
  4018a4:	7824      	ldrb	r4, [r4, #0]
  4018a6:	2c01      	cmp	r4, #1
  4018a8:	d11e      	bne.n	4018e8 <ili93xx_set_window+0x58>
		/** Set Horizontal Address Start Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_START,
  4018aa:	fa1f f880 	uxth.w	r8, r0
  4018ae:	f04f 0050 	mov.w	r0, #80	; 0x50
  4018b2:	4641      	mov	r1, r8
  4018b4:	f241 6415 	movw	r4, #5653	; 0x1615
  4018b8:	f2c0 0440 	movt	r4, #64	; 0x40
  4018bc:	47a0      	blx	r4
				(uint16_t)ul_x);

		/** Set Horizontal Address End Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_END,
  4018be:	f108 38ff 	add.w	r8, r8, #4294967295
  4018c2:	eb08 0107 	add.w	r1, r8, r7
  4018c6:	f04f 0051 	mov.w	r0, #81	; 0x51
  4018ca:	b289      	uxth	r1, r1
  4018cc:	47a0      	blx	r4
				(uint16_t)(ul_x + ul_width - 1));

		/** Set Vertical Address Start Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_START,
  4018ce:	b2ad      	uxth	r5, r5
  4018d0:	f04f 0052 	mov.w	r0, #82	; 0x52
  4018d4:	4629      	mov	r1, r5
  4018d6:	47a0      	blx	r4
				(uint16_t)ul_y);

		/** Set Vertical Address End Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_END,
  4018d8:	f105 35ff 	add.w	r5, r5, #4294967295
  4018dc:	19aa      	adds	r2, r5, r6
  4018de:	f04f 0053 	mov.w	r0, #83	; 0x53
  4018e2:	b291      	uxth	r1, r2
  4018e4:	47a0      	blx	r4
  4018e6:	e037      	b.n	401958 <ili93xx_set_window+0xc8>
				(uint16_t)(ul_y + ul_height - 1));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4018e8:	2c02      	cmp	r4, #2
  4018ea:	d135      	bne.n	401958 <ili93xx_set_window+0xc8>
		uint8_t paratable[4];

		/** Set Column Address Position */
		paratable[0] = (ul_x >> 8) & 0xFF;
  4018ec:	ea4f 2310 	mov.w	r3, r0, lsr #8
  4018f0:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_x & 0xFF;
  4018f4:	b2c1      	uxtb	r1, r0
  4018f6:	f88d 1005 	strb.w	r1, [sp, #5]
		paratable[2] = ((ul_x + ul_width - 1) >> 8) & 0xFF;
  4018fa:	f100 30ff 	add.w	r0, r0, #4294967295
  4018fe:	1882      	adds	r2, r0, r2
  401900:	ea4f 2412 	mov.w	r4, r2, lsr #8
  401904:	f88d 4006 	strb.w	r4, [sp, #6]
		paratable[3] = (ul_x + ul_width - 1) & 0xFF;
  401908:	f101 33ff 	add.w	r3, r1, #4294967295
  40190c:	19df      	adds	r7, r3, r7
  40190e:	f88d 7007 	strb.w	r7, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_COLUMN_ADDRESS_SET,
  401912:	f04f 002a 	mov.w	r0, #42	; 0x2a
  401916:	a901      	add	r1, sp, #4
  401918:	f04f 0204 	mov.w	r2, #4
  40191c:	f241 6435 	movw	r4, #5685	; 0x1635
  401920:	f2c0 0440 	movt	r4, #64	; 0x40
  401924:	47a0      	blx	r4
				paratable, 4);

		/** Set Page Address Position */
		paratable[0] = (ul_y >> 8) & 0xFF;
  401926:	ea4f 2115 	mov.w	r1, r5, lsr #8
  40192a:	f88d 1004 	strb.w	r1, [sp, #4]
		paratable[1] = ul_y & 0xFF;
  40192e:	b2e8      	uxtb	r0, r5
  401930:	f88d 0005 	strb.w	r0, [sp, #5]
		paratable[2] = ((ul_y + ul_height - 1) >> 8) & 0xFF;
  401934:	f105 35ff 	add.w	r5, r5, #4294967295
  401938:	19aa      	adds	r2, r5, r6
  40193a:	ea4f 2512 	mov.w	r5, r2, lsr #8
  40193e:	f88d 5006 	strb.w	r5, [sp, #6]
		paratable[3] = (ul_y + ul_height - 1) & 0xFF;
  401942:	f100 33ff 	add.w	r3, r0, #4294967295
  401946:	199e      	adds	r6, r3, r6
  401948:	f88d 6007 	strb.w	r6, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_PAGE_ADDRESS_SET,
  40194c:	f04f 002b 	mov.w	r0, #43	; 0x2b
  401950:	a901      	add	r1, sp, #4
  401952:	f04f 0204 	mov.w	r2, #4
  401956:	47a0      	blx	r4
				       paratable, 4);
	}
}
  401958:	b002      	add	sp, #8
  40195a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40195e:	bf00      	nop

00401960 <ili93xx_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili93xx_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  401960:	b538      	push	{r3, r4, r5, lr}
  401962:	4602      	mov	r2, r0
  401964:	460c      	mov	r4, r1
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  401966:	f640 43e8 	movw	r3, #3304	; 0xce8
  40196a:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40196e:	7818      	ldrb	r0, [r3, #0]
  401970:	2801      	cmp	r0, #1
  401972:	d10b      	bne.n	40198c <ili93xx_set_cursor_position+0x2c>
		/** GRAM Horizontal/Vertical Address Set (R20h, R21h) */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x);
  401974:	f04f 0020 	mov.w	r0, #32
  401978:	4611      	mov	r1, r2
  40197a:	f241 6515 	movw	r5, #5653	; 0x1615
  40197e:	f2c0 0540 	movt	r5, #64	; 0x40
  401982:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y);
  401984:	f04f 0021 	mov.w	r0, #33	; 0x21
  401988:	4621      	mov	r1, r4
  40198a:	47a8      	blx	r5
  40198c:	bd38      	pop	{r3, r4, r5, pc}
  40198e:	bf00      	nop

00401990 <ili93xx_init>:
 * \param p_opt pointer to ILI93xx option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili93xx_init(struct ili93xx_opt_t *p_opt)
{
  401990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401994:	b085      	sub	sp, #20
  401996:	4606      	mov	r6, r0
	uint8_t paratable[15];

	/** Identify the LCD driver device*/
	if (ili93xx_device_type_identify() != 0) {
  401998:	f241 73a5 	movw	r3, #6053	; 0x17a5
  40199c:	f2c0 0340 	movt	r3, #64	; 0x40
  4019a0:	4798      	blx	r3
  4019a2:	2800      	cmp	r0, #0
  4019a4:	f040 8268 	bne.w	401e78 <ili93xx_init+0x4e8>
		return 1;
	}

	g_ul_lcd_x_length = ILI93XX_LCD_WIDTH;
  4019a8:	f240 0034 	movw	r0, #52	; 0x34
  4019ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4019b0:	f04f 02f0 	mov.w	r2, #240	; 0xf0
  4019b4:	6002      	str	r2, [r0, #0]
	g_ul_lcd_y_length = ILI93XX_LCD_HEIGHT;
  4019b6:	f240 0138 	movw	r1, #56	; 0x38
  4019ba:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4019be:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4019c2:	600b      	str	r3, [r1, #0]

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4019c4:	f640 40e8 	movw	r0, #3304	; 0xce8
  4019c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4019cc:	7802      	ldrb	r2, [r0, #0]
  4019ce:	2a01      	cmp	r2, #1
  4019d0:	f040 8110 	bne.w	401bf4 <ili93xx_init+0x264>
		/** Turn off LCD */
		ili93xx_write_register_word(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  4019d4:	f04f 0007 	mov.w	r0, #7
  4019d8:	f04f 0133 	mov.w	r1, #51	; 0x33
  4019dc:	f241 6415 	movw	r4, #5653	; 0x1615
  4019e0:	f2c0 0440 	movt	r4, #64	; 0x40
  4019e4:	47a0      	blx	r4
				ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

		/** Start initial sequence */
		/** Disable sleep and standby mode*/
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  4019e6:	f04f 0010 	mov.w	r0, #16
  4019ea:	f04f 0100 	mov.w	r1, #0
  4019ee:	47a0      	blx	r4
		/** Start internal OSC */
		ili93xx_write_register_word(ILI9325_START_OSC_CTRL,
  4019f0:	f04f 0000 	mov.w	r0, #0
  4019f4:	f04f 0101 	mov.w	r1, #1
  4019f8:	47a0      	blx	r4
				ILI9325_START_OSC_CTRL_EN);
		/** Set SS bit and direction output from S720 to S1 */
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL1,
  4019fa:	f04f 0001 	mov.w	r0, #1
  4019fe:	f44f 7180 	mov.w	r1, #256	; 0x100
  401a02:	47a0      	blx	r4
				ILI9325_DRIVER_OUTPUT_CTRL1_SS);
		/** Set 1 line inversion */
		ili93xx_write_register_word(ILI9325_LCD_DRIVING_CTRL,
  401a04:	f04f 0002 	mov.w	r0, #2
  401a08:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  401a0c:	47a0      	blx	r4
				ILI9325_LCD_DRIVING_CTRL_BIT10 | ILI9325_LCD_DRIVING_CTRL_EOR
				| ILI9325_LCD_DRIVING_CTRL_BC0);
		/** Disable resizing feature */
		ili93xx_write_register_word(ILI9325_RESIZE_CTRL, 0x0000);
  401a0e:	f04f 0004 	mov.w	r0, #4
  401a12:	f04f 0100 	mov.w	r1, #0
  401a16:	47a0      	blx	r4
		/** Set the back porch and front porch */
		ili93xx_write_register_word(ILI9325_DISP_CTRL2,
  401a18:	f04f 0008 	mov.w	r0, #8
  401a1c:	f240 2107 	movw	r1, #519	; 0x207
  401a20:	47a0      	blx	r4
				ILI9325_DISP_CTRL2_BP(
				0x07) | ILI9325_DISP_CTRL2_FP(0x02));
		/** Set non-display area refresh cycle ISC[3:0] */
		ili93xx_write_register_word(ILI9325_DISP_CTRL3, 0x0000);
  401a22:	f04f 0009 	mov.w	r0, #9
  401a26:	f04f 0100 	mov.w	r1, #0
  401a2a:	47a0      	blx	r4
		/** Disable FMARK function */
		ili93xx_write_register_word(ILI9325_DISP_CTRL4, 0x0000);
  401a2c:	f04f 000a 	mov.w	r0, #10
  401a30:	f04f 0100 	mov.w	r1, #0
  401a34:	47a0      	blx	r4
		/** 18-bit RGB interface and writing display data by system
		 *interface */
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL1,
  401a36:	f04f 000c 	mov.w	r0, #12
  401a3a:	f04f 0100 	mov.w	r1, #0
  401a3e:	47a0      	blx	r4
				0x0000);
		/** Set the output position of frame cycle */
		ili93xx_write_register_word(ILI9325_FRAME_MAKER_POS, 0x0000);
  401a40:	f04f 000d 	mov.w	r0, #13
  401a44:	f04f 0100 	mov.w	r1, #0
  401a48:	47a0      	blx	r4
		/** RGB interface polarity */
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL2,
  401a4a:	f04f 000f 	mov.w	r0, #15
  401a4e:	f04f 0100 	mov.w	r1, #0
  401a52:	47a0      	blx	r4
				0x0000);

		/** Power on sequence */
		/** Disable sleep and standby mode */
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  401a54:	f04f 0010 	mov.w	r0, #16
  401a58:	f04f 0100 	mov.w	r1, #0
  401a5c:	47a0      	blx	r4

		/**
		 * Selects the operating frequency of the step-up circuit 1,2
		 * and Sets the ratio factor of Vci.
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL2, 0x0000);
  401a5e:	f04f 0011 	mov.w	r0, #17
  401a62:	f04f 0100 	mov.w	r1, #0
  401a66:	47a0      	blx	r4
		/** Set VREG1OUT voltage */
		ili93xx_write_register_word(ILI9325_POWER_CTRL3, 0x0000);
  401a68:	f04f 0012 	mov.w	r0, #18
  401a6c:	f04f 0100 	mov.w	r1, #0
  401a70:	47a0      	blx	r4
		/** Set VCOM amplitude */
		ili93xx_write_register_word(ILI9325_POWER_CTRL4, 0x0000);
  401a72:	f04f 0013 	mov.w	r0, #19
  401a76:	f04f 0100 	mov.w	r1, #0
  401a7a:	47a0      	blx	r4
		ili93xx_delay(200);
  401a7c:	f04f 00c8 	mov.w	r0, #200	; 0xc8
  401a80:	f241 65fd 	movw	r5, #5885	; 0x16fd
  401a84:	f2c0 0540 	movt	r5, #64	; 0x40
  401a88:	47a8      	blx	r5

		/**
		 * Adjusts the constant current and Sets the factor used
		 * in the step-up circuits.
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL1,
  401a8a:	f04f 0010 	mov.w	r0, #16
  401a8e:	f241 2190 	movw	r1, #4752	; 0x1290
  401a92:	47a0      	blx	r4

		/**
		 * Select the operating frequency of the step-up circuit 1,2 and
		 * Sets the ratio factor of Vci
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL2,
  401a94:	f04f 0011 	mov.w	r0, #17
  401a98:	f240 2127 	movw	r1, #551	; 0x227
  401a9c:	47a0      	blx	r4
				ILI9325_POWER_CTRL2_DC1(0x02) |
				ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
		ili93xx_delay(50);
  401a9e:	f04f 0032 	mov.w	r0, #50	; 0x32
  401aa2:	47a8      	blx	r5
		/** Internal reference voltage= Vci */
		ili93xx_write_register_word(ILI9325_POWER_CTRL3,
  401aa4:	f04f 0012 	mov.w	r0, #18
  401aa8:	f04f 011b 	mov.w	r1, #27
  401aac:	47a0      	blx	r4
				ILI9325_POWER_CTRL3_PON | ILI9325_POWER_CTRL3_VRH(0x0B));
		ili93xx_delay(50);
  401aae:	f04f 0032 	mov.w	r0, #50	; 0x32
  401ab2:	47a8      	blx	r5
		/** Set VDV[4:0] for VCOM amplitude */
		ili93xx_write_register_word(ILI9325_POWER_CTRL4,
  401ab4:	f04f 0013 	mov.w	r0, #19
  401ab8:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  401abc:	47a0      	blx	r4
				ILI9325_POWER_CTRL4_VDV(0x11));
		/** Set VCM[5:0] for VCOMH */
		ili93xx_write_register_word(ILI9325_POWER_CTRL7,
  401abe:	f04f 0029 	mov.w	r0, #41	; 0x29
  401ac2:	f04f 0119 	mov.w	r1, #25
  401ac6:	47a0      	blx	r4
				ILI9325_POWER_CTRL7_VCM(0x19));
		/** Set Frame Rate */
		ili93xx_write_register_word(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  401ac8:	f04f 002b 	mov.w	r0, #43	; 0x2b
  401acc:	f04f 010d 	mov.w	r1, #13
  401ad0:	47a0      	blx	r4
				ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
		ili93xx_delay(50);
  401ad2:	f04f 0032 	mov.w	r0, #50	; 0x32
  401ad6:	47a8      	blx	r5

		/** Adjust the Gamma Curve */
		ili93xx_write_register_word(ILI9325_GAMMA_CTL1, 0x0000);
  401ad8:	f04f 0030 	mov.w	r0, #48	; 0x30
  401adc:	f04f 0100 	mov.w	r1, #0
  401ae0:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL2,
  401ae2:	f04f 0031 	mov.w	r0, #49	; 0x31
  401ae6:	f44f 7101 	mov.w	r1, #516	; 0x204
  401aea:	47a0      	blx	r4
				ILI9325_GAMMA_CTL2_KP3(0x02) |
				ILI9325_GAMMA_CTL2_KP2(0x04));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL3,
  401aec:	f04f 0032 	mov.w	r0, #50	; 0x32
  401af0:	f44f 7100 	mov.w	r1, #512	; 0x200
  401af4:	47a0      	blx	r4
				ILI9325_GAMMA_CTL3_KP5(0x02) |
				ILI9325_GAMMA_CTL3_KP4(0x00));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL4,
  401af6:	f04f 0035 	mov.w	r0, #53	; 0x35
  401afa:	f04f 0107 	mov.w	r1, #7
  401afe:	47a0      	blx	r4
				ILI9325_GAMMA_CTL4_RP1(0x00) |
				ILI9325_GAMMA_CTL4_RP0(0x07));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL5,
  401b00:	f04f 0036 	mov.w	r0, #54	; 0x36
  401b04:	f241 4104 	movw	r1, #5124	; 0x1404
  401b08:	47a0      	blx	r4
				ILI9325_GAMMA_CTL5_VRP1(0x14) |
				ILI9325_GAMMA_CTL5_VRP0(0x04));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL6,
  401b0a:	f04f 0037 	mov.w	r0, #55	; 0x37
  401b0e:	f240 7105 	movw	r1, #1797	; 0x705
  401b12:	47a0      	blx	r4
				ILI9325_GAMMA_CTL6_KN1(0x07) |
				ILI9325_GAMMA_CTL6_KN0(0x05));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL7,
  401b14:	f04f 0038 	mov.w	r0, #56	; 0x38
  401b18:	f240 3105 	movw	r1, #773	; 0x305
  401b1c:	47a0      	blx	r4
				ILI9325_GAMMA_CTL7_KN3(0x03) |
				ILI9325_GAMMA_CTL7_KN2(0x05));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL8,
  401b1e:	f04f 0039 	mov.w	r0, #57	; 0x39
  401b22:	f240 7107 	movw	r1, #1799	; 0x707
  401b26:	47a0      	blx	r4
				ILI9325_GAMMA_CTL8_KN5(0x07) |
				ILI9325_GAMMA_CTL8_KN4(0x07));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL9,
  401b28:	f04f 003c 	mov.w	r0, #60	; 0x3c
  401b2c:	f240 7101 	movw	r1, #1793	; 0x701
  401b30:	47a0      	blx	r4
				ILI9325_GAMMA_CTL9_RN1(0x07) |
				ILI9325_GAMMA_CTL9_RN0(0x01));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL10,
  401b32:	f04f 003d 	mov.w	r0, #61	; 0x3d
  401b36:	f04f 010e 	mov.w	r1, #14
  401b3a:	47a0      	blx	r4
		 * DFM Set the mode of transferring data to the internal RAM
		 * when TRI = 1.
		 * I/D[1:0] = 11 Horizontal : increment Vertical : increment,
		 * AM=0:Horizontal
		 */
		ili93xx_write_register_word(ILI9325_ENTRY_MODE,
  401b3c:	f04f 0003 	mov.w	r0, #3
  401b40:	f24d 0110 	movw	r1, #53264	; 0xd010
  401b44:	47a0      	blx	r4
				ILI9325_ENTRY_MODE_ID(0x01) | ILI9325_ENTRY_MODE_BGR);
		/**
		 * Sets the number of lines to drive the LCD at an interval of 8
		 * lines. The scan direction is from G320 to G1
		 */
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL2,
  401b46:	f04f 0060 	mov.w	r0, #96	; 0x60
  401b4a:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  401b4e:	47a0      	blx	r4
				ILI9325_DRIVER_OUTPUT_CTRL2_GS |
				ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

		/** Vertical Scrolling */
		/** Disable scrolling and enable the grayscale inversion */
		ili93xx_write_register_word(ILI9325_BASE_IMG_DISP_CTRL,
  401b50:	f04f 0061 	mov.w	r0, #97	; 0x61
  401b54:	f04f 0101 	mov.w	r1, #1
  401b58:	47a0      	blx	r4
				ILI9325_BASE_IMG_DISP_CTRL_REV);
		ili93xx_write_register_word(ILI9325_VERTICAL_SCROLL_CTRL,
  401b5a:	f04f 006a 	mov.w	r0, #106	; 0x6a
  401b5e:	f04f 0100 	mov.w	r1, #0
  401b62:	47a0      	blx	r4
				0x0000);

		/** Disable Partial Display */
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_DISP_POS,
  401b64:	f04f 0080 	mov.w	r0, #128	; 0x80
  401b68:	f04f 0100 	mov.w	r1, #0
  401b6c:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(
  401b6e:	f04f 0081 	mov.w	r0, #129	; 0x81
  401b72:	f04f 0100 	mov.w	r1, #0
  401b76:	47a0      	blx	r4
				ILI9325_PARTIAL_IMG1_AREA_START_LINE,
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_AREA_END_LINE,
  401b78:	f04f 0082 	mov.w	r0, #130	; 0x82
  401b7c:	f04f 0100 	mov.w	r1, #0
  401b80:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_DISP_POS,
  401b82:	f04f 0083 	mov.w	r0, #131	; 0x83
  401b86:	f04f 0100 	mov.w	r1, #0
  401b8a:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(
  401b8c:	f04f 0084 	mov.w	r0, #132	; 0x84
  401b90:	f04f 0100 	mov.w	r1, #0
  401b94:	47a0      	blx	r4
				ILI9325_PARTIAL_IMG2_AREA_START_LINE,
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_AREA_END_LINE,
  401b96:	f04f 0085 	mov.w	r0, #133	; 0x85
  401b9a:	f04f 0100 	mov.w	r1, #0
  401b9e:	47a0      	blx	r4
				0x0000);

		/** Panel Control */
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL1,
  401ba0:	f04f 0090 	mov.w	r0, #144	; 0x90
  401ba4:	f04f 0110 	mov.w	r1, #16
  401ba8:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL2,
  401baa:	f04f 0092 	mov.w	r0, #146	; 0x92
  401bae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  401bb2:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL4,
  401bb4:	f04f 0095 	mov.w	r0, #149	; 0x95
  401bb8:	f44f 7188 	mov.w	r1, #272	; 0x110
  401bbc:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
				ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  401bbe:	f04f 0000 	mov.w	r0, #0
  401bc2:	4601      	mov	r1, r0
  401bc4:	6832      	ldr	r2, [r6, #0]
  401bc6:	6873      	ldr	r3, [r6, #4]
  401bc8:	f641 0491 	movw	r4, #6289	; 0x1891
  401bcc:	f2c0 0440 	movt	r4, #64	; 0x40
  401bd0:	47a0      	blx	r4
		ili93xx_set_foreground_color(p_opt->foreground_color);
  401bd2:	68b0      	ldr	r0, [r6, #8]
  401bd4:	f641 026d 	movw	r2, #6253	; 0x186d
  401bd8:	f2c0 0240 	movt	r2, #64	; 0x40
  401bdc:	4790      	blx	r2
		ili93xx_set_cursor_position(0, 0);
  401bde:	f04f 0000 	mov.w	r0, #0
  401be2:	4601      	mov	r1, r0
  401be4:	f641 1361 	movw	r3, #6497	; 0x1961
  401be8:	f2c0 0340 	movt	r3, #64	; 0x40
  401bec:	4798      	blx	r3
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
	}

	return 0;
  401bee:	f04f 0000 	mov.w	r0, #0
  401bf2:	e146      	b.n	401e82 <ili93xx_init+0x4f2>
				ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
		ili93xx_set_foreground_color(p_opt->foreground_color);
		ili93xx_set_cursor_position(0, 0);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  401bf4:	2a02      	cmp	r2, #2
  401bf6:	f040 8142 	bne.w	401e7e <ili93xx_init+0x4ee>
		/** init for ILI9341 **/
		/** power control A configuration*/
		paratable[0] = 0x39;
  401bfa:	f04f 0439 	mov.w	r4, #57	; 0x39
  401bfe:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0x2C;
  401c02:	f04f 052c 	mov.w	r5, #44	; 0x2c
  401c06:	f88d 5001 	strb.w	r5, [sp, #1]
		paratable[2] = 0x00;
  401c0a:	f04f 0500 	mov.w	r5, #0
  401c0e:	f88d 5002 	strb.w	r5, [sp, #2]
		paratable[3] = 0x34;
  401c12:	f04f 0734 	mov.w	r7, #52	; 0x34
  401c16:	f88d 7003 	strb.w	r7, [sp, #3]
		paratable[4] = 0x02;
  401c1a:	f04f 0902 	mov.w	r9, #2
  401c1e:	f88d 9004 	strb.w	r9, [sp, #4]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_A, paratable, 5);
  401c22:	f04f 00cb 	mov.w	r0, #203	; 0xcb
  401c26:	4669      	mov	r1, sp
  401c28:	f04f 0205 	mov.w	r2, #5
  401c2c:	f241 6435 	movw	r4, #5685	; 0x1635
  401c30:	f2c0 0440 	movt	r4, #64	; 0x40
  401c34:	47a0      	blx	r4

		/** power control B configuration */
		paratable[0] = 0;
  401c36:	f88d 5000 	strb.w	r5, [sp]
		paratable[1] = 0xAA;
  401c3a:	f04f 01aa 	mov.w	r1, #170	; 0xaa
  401c3e:	f88d 1001 	strb.w	r1, [sp, #1]
		paratable[2] = 0xB0;
  401c42:	f04f 03b0 	mov.w	r3, #176	; 0xb0
  401c46:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_B, paratable, 3);
  401c4a:	f04f 00cf 	mov.w	r0, #207	; 0xcf
  401c4e:	4669      	mov	r1, sp
  401c50:	f04f 0203 	mov.w	r2, #3
  401c54:	47a0      	blx	r4

		/** Pump Ratio Control configuration */
		paratable[0] = 0x30;
  401c56:	f04f 0030 	mov.w	r0, #48	; 0x30
  401c5a:	f88d 0000 	strb.w	r0, [sp]
		ili93xx_write_register(ILI9341_CMD_PUMP_RATIO_CONTROL,
  401c5e:	f04f 00f7 	mov.w	r0, #247	; 0xf7
  401c62:	4669      	mov	r1, sp
  401c64:	f04f 0201 	mov.w	r2, #1
  401c68:	47a0      	blx	r4
				paratable, 1);

		/** Power Control 1 configuration*/
		paratable[0] = 0x25;
  401c6a:	f04f 0225 	mov.w	r2, #37	; 0x25
  401c6e:	f88d 2000 	strb.w	r2, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_1, paratable, 1);
  401c72:	f04f 00c0 	mov.w	r0, #192	; 0xc0
  401c76:	4669      	mov	r1, sp
  401c78:	f04f 0201 	mov.w	r2, #1
  401c7c:	47a0      	blx	r4

		/** Power Control 2 configuration*/
		paratable[0] = 0x11;
  401c7e:	f04f 0811 	mov.w	r8, #17
  401c82:	f88d 8000 	strb.w	r8, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_2, paratable, 1);
  401c86:	f04f 00c1 	mov.w	r0, #193	; 0xc1
  401c8a:	4669      	mov	r1, sp
  401c8c:	f04f 0201 	mov.w	r2, #1
  401c90:	47a0      	blx	r4

		/** VOM Control 1 configuration*/
		paratable[0] = 0x5C;
  401c92:	f04f 075c 	mov.w	r7, #92	; 0x5c
  401c96:	f88d 7000 	strb.w	r7, [sp]
		paratable[1] = 0x4C;
  401c9a:	f04f 014c 	mov.w	r1, #76	; 0x4c
  401c9e:	f88d 1001 	strb.w	r1, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_1, paratable, 2);
  401ca2:	f04f 00c5 	mov.w	r0, #197	; 0xc5
  401ca6:	4669      	mov	r1, sp
  401ca8:	464a      	mov	r2, r9
  401caa:	47a0      	blx	r4

		/** VOM control 2 configuration*/
		paratable[0] = 0x94;
  401cac:	f04f 0394 	mov.w	r3, #148	; 0x94
  401cb0:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_2, paratable, 1);
  401cb4:	f04f 00c7 	mov.w	r0, #199	; 0xc7
  401cb8:	4669      	mov	r1, sp
  401cba:	f04f 0201 	mov.w	r2, #1
  401cbe:	47a0      	blx	r4

		/** Driver Timing Control A configuration*/
		paratable[0] = 0x85;
  401cc0:	f04f 0085 	mov.w	r0, #133	; 0x85
  401cc4:	f88d 0000 	strb.w	r0, [sp]
		paratable[1] = 0x01;
  401cc8:	f04f 0701 	mov.w	r7, #1
  401ccc:	f88d 7001 	strb.w	r7, [sp, #1]
		paratable[2] = 0x78;
  401cd0:	f04f 0278 	mov.w	r2, #120	; 0x78
  401cd4:	f88d 2002 	strb.w	r2, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_A, paratable, 3);
  401cd8:	f04f 00e8 	mov.w	r0, #232	; 0xe8
  401cdc:	4669      	mov	r1, sp
  401cde:	f04f 0203 	mov.w	r2, #3
  401ce2:	47a0      	blx	r4

		/** Driver Timing Control B configuration*/
		paratable[0] = 0x00;
  401ce4:	f88d 5000 	strb.w	r5, [sp]
		paratable[1] = 0x00;
  401ce8:	f88d 5001 	strb.w	r5, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_B, paratable, 2);
  401cec:	f04f 00ea 	mov.w	r0, #234	; 0xea
  401cf0:	4669      	mov	r1, sp
  401cf2:	464a      	mov	r2, r9
  401cf4:	47a0      	blx	r4

		/** Memory Access Control configuration*/
		paratable[0] = ILI9341_CMD_MEMORY_ACCESS_CONTROL_MX |
  401cf6:	f04f 0148 	mov.w	r1, #72	; 0x48
  401cfa:	f88d 1000 	strb.w	r1, [sp]
				ILI9341_CMD_MEMORY_ACCESS_CONTROL_BGR;
		ili93xx_write_register(ILI9341_CMD_MEMORY_ACCESS_CONTROL,
  401cfe:	f04f 0036 	mov.w	r0, #54	; 0x36
  401d02:	4669      	mov	r1, sp
  401d04:	463a      	mov	r2, r7
  401d06:	47a0      	blx	r4
				paratable, 1);

		/** Colmod Pixel Format Set configuation*/
		paratable[0] = 0x06;
  401d08:	f04f 0306 	mov.w	r3, #6
  401d0c:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PIXEL_FORMAT_SET, paratable, 1);
  401d10:	f04f 003a 	mov.w	r0, #58	; 0x3a
  401d14:	4669      	mov	r1, sp
  401d16:	463a      	mov	r2, r7
  401d18:	47a0      	blx	r4

		/** Display Function Control */
		paratable[0] = 0x02;
  401d1a:	f88d 9000 	strb.w	r9, [sp]
		paratable[1] = 0x82;
  401d1e:	f04f 0082 	mov.w	r0, #130	; 0x82
  401d22:	f88d 0001 	strb.w	r0, [sp, #1]
		paratable[2] = 0x27;
  401d26:	f04f 0227 	mov.w	r2, #39	; 0x27
  401d2a:	f88d 2002 	strb.w	r2, [sp, #2]
		paratable[3] = 0x00;
  401d2e:	f88d 5003 	strb.w	r5, [sp, #3]
		ili93xx_write_register(ILI9341_CMD_DISPLAY_FUNCTION_CTL,
  401d32:	f04f 00b6 	mov.w	r0, #182	; 0xb6
  401d36:	4669      	mov	r1, sp
  401d38:	f04f 0204 	mov.w	r2, #4
  401d3c:	47a0      	blx	r4
				      paratable, 4);
				
		paratable[0] = 0x00;
  401d3e:	f88d 5000 	strb.w	r5, [sp]
		ili93xx_write_register(ILI9341_CMD_ENABLE_3_GAMMA_CONTROL,
  401d42:	f04f 00f2 	mov.w	r0, #242	; 0xf2
  401d46:	4669      	mov	r1, sp
  401d48:	463a      	mov	r2, r7
  401d4a:	47a0      	blx	r4
				      paratable,1);
		
		paratable[0] = 0x01;
  401d4c:	f88d 7000 	strb.w	r7, [sp]
		ili93xx_write_register(ILI9341_CMD_GAMMA_SET, paratable,1);
  401d50:	f04f 0026 	mov.w	r0, #38	; 0x26
  401d54:	4669      	mov	r1, sp
  401d56:	463a      	mov	r2, r7
  401d58:	47a0      	blx	r4
		
		/** set gamma curve parameters*/
		paratable[0]=0x0F;
  401d5a:	f04f 070f 	mov.w	r7, #15
  401d5e:	f88d 7000 	strb.w	r7, [sp]
		paratable[1]=0x31;
  401d62:	f04f 0931 	mov.w	r9, #49	; 0x31
  401d66:	f88d 9001 	strb.w	r9, [sp, #1]
		paratable[2]=0x2B;
  401d6a:	f04f 012b 	mov.w	r1, #43	; 0x2b
  401d6e:	f88d 1002 	strb.w	r1, [sp, #2]
		paratable[3]=0x0C;
  401d72:	f04f 030c 	mov.w	r3, #12
  401d76:	f88d 3003 	strb.w	r3, [sp, #3]
		paratable[4]=0x0E;
  401d7a:	f04f 0a0e 	mov.w	sl, #14
  401d7e:	f88d a004 	strb.w	sl, [sp, #4]
		paratable[5]=0x08;
  401d82:	f04f 0008 	mov.w	r0, #8
  401d86:	f88d 0005 	strb.w	r0, [sp, #5]
		paratable[6]=0x4E;
  401d8a:	f04f 024e 	mov.w	r2, #78	; 0x4e
  401d8e:	f88d 2006 	strb.w	r2, [sp, #6]
		paratable[7]=0xF1;
  401d92:	f04f 01f1 	mov.w	r1, #241	; 0xf1
  401d96:	f88d 1007 	strb.w	r1, [sp, #7]
		paratable[8]=0x37;
  401d9a:	f04f 0337 	mov.w	r3, #55	; 0x37
  401d9e:	f88d 3008 	strb.w	r3, [sp, #8]
		paratable[9]=0x07;
  401da2:	f04f 0007 	mov.w	r0, #7
  401da6:	f88d 0009 	strb.w	r0, [sp, #9]
		paratable[10]=0x10;
  401daa:	f04f 0210 	mov.w	r2, #16
  401dae:	f88d 200a 	strb.w	r2, [sp, #10]
		paratable[11]=0x03;
  401db2:	f04f 0b03 	mov.w	fp, #3
  401db6:	f88d b00b 	strb.w	fp, [sp, #11]
		paratable[12]=0x0E;
  401dba:	f88d a00c 	strb.w	sl, [sp, #12]
		paratable[13]=0x09;
  401dbe:	f04f 0109 	mov.w	r1, #9
  401dc2:	f88d 100d 	strb.w	r1, [sp, #13]
		paratable[14]=0x00;
  401dc6:	f88d 500e 	strb.w	r5, [sp, #14]
		ili93xx_write_register(ILI9341_CMD_POSITIVE_GAMMA_CORRECTION,
  401dca:	f04f 00e0 	mov.w	r0, #224	; 0xe0
  401dce:	4669      	mov	r1, sp
  401dd0:	463a      	mov	r2, r7
  401dd2:	47a0      	blx	r4
				      paratable, 15);
		paratable[0]=0x00;
  401dd4:	f88d 5000 	strb.w	r5, [sp]
		paratable[1]=0x0E;
  401dd8:	f88d a001 	strb.w	sl, [sp, #1]
		paratable[2]=0x14;
  401ddc:	f04f 0314 	mov.w	r3, #20
  401de0:	f88d 3002 	strb.w	r3, [sp, #2]
		paratable[3]=0x03;
  401de4:	f88d b003 	strb.w	fp, [sp, #3]
		paratable[4]=0x11;
  401de8:	f88d 8004 	strb.w	r8, [sp, #4]
		paratable[5]=0x07;
  401dec:	f04f 0007 	mov.w	r0, #7
  401df0:	f88d 0005 	strb.w	r0, [sp, #5]
		paratable[6]=0x31;
  401df4:	f88d 9006 	strb.w	r9, [sp, #6]
		paratable[7]=0xC1;
  401df8:	f04f 02c1 	mov.w	r2, #193	; 0xc1
  401dfc:	f88d 2007 	strb.w	r2, [sp, #7]
		paratable[8]=0x48;
  401e00:	f04f 0148 	mov.w	r1, #72	; 0x48
  401e04:	f88d 1008 	strb.w	r1, [sp, #8]
		paratable[9]=0x08;
  401e08:	f04f 0308 	mov.w	r3, #8
  401e0c:	f88d 3009 	strb.w	r3, [sp, #9]
		paratable[10]=0x0F;
  401e10:	f88d 700a 	strb.w	r7, [sp, #10]
		paratable[11]=0x0C;
  401e14:	f04f 000c 	mov.w	r0, #12
  401e18:	f88d 000b 	strb.w	r0, [sp, #11]
		paratable[12]=0x31;
  401e1c:	f88d 900c 	strb.w	r9, [sp, #12]
		paratable[13]=0x36;
  401e20:	f04f 0236 	mov.w	r2, #54	; 0x36
  401e24:	f88d 200d 	strb.w	r2, [sp, #13]
		paratable[14]=0x0F;
  401e28:	f88d 700e 	strb.w	r7, [sp, #14]
		ili93xx_write_register(ILI9341_CMD_NEGATIVE_GAMMA_CORRECTION,
  401e2c:	f04f 00e1 	mov.w	r0, #225	; 0xe1
  401e30:	4669      	mov	r1, sp
  401e32:	463a      	mov	r2, r7
  401e34:	47a0      	blx	r4
				      paratable, 15);
		
		/** set window area*/
		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  401e36:	4628      	mov	r0, r5
  401e38:	4629      	mov	r1, r5
  401e3a:	6832      	ldr	r2, [r6, #0]
  401e3c:	6873      	ldr	r3, [r6, #4]
  401e3e:	f641 0791 	movw	r7, #6289	; 0x1891
  401e42:	f2c0 0740 	movt	r7, #64	; 0x40
  401e46:	47b8      	blx	r7
		ili93xx_set_foreground_color(p_opt->foreground_color);
  401e48:	68b0      	ldr	r0, [r6, #8]
  401e4a:	f641 016d 	movw	r1, #6253	; 0x186d
  401e4e:	f2c0 0140 	movt	r1, #64	; 0x40
  401e52:	4788      	blx	r1
		/** Leave sleep mode*/
		ili93xx_write_register(ILI9341_CMD_SLEEP_OUT, paratable, 0);
  401e54:	4640      	mov	r0, r8
  401e56:	4669      	mov	r1, sp
  401e58:	462a      	mov	r2, r5
  401e5a:	47a0      	blx	r4
		ili93xx_delay(10);
  401e5c:	f04f 000a 	mov.w	r0, #10
  401e60:	f241 63fd 	movw	r3, #5885	; 0x16fd
  401e64:	f2c0 0340 	movt	r3, #64	; 0x40
  401e68:	4798      	blx	r3
		/** Display on*/
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
  401e6a:	f04f 0029 	mov.w	r0, #41	; 0x29
  401e6e:	4669      	mov	r1, sp
  401e70:	462a      	mov	r2, r5
  401e72:	47a0      	blx	r4
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
	}

	return 0;
  401e74:	4628      	mov	r0, r5
  401e76:	e004      	b.n	401e82 <ili93xx_init+0x4f2>
{
	uint8_t paratable[15];

	/** Identify the LCD driver device*/
	if (ili93xx_device_type_identify() != 0) {
		return 1;
  401e78:	f04f 0001 	mov.w	r0, #1
  401e7c:	e001      	b.n	401e82 <ili93xx_init+0x4f2>
		ili93xx_delay(10);
		/** Display on*/
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
  401e7e:	f04f 0001 	mov.w	r0, #1
	}

	return 0;
}
  401e82:	b005      	add	sp, #20
  401e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00401e88 <ili93xx_draw_pixel>:
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  401e88:	b510      	push	{r4, lr}
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
  401e8a:	f240 0334 	movw	r3, #52	; 0x34
  401e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401e92:	681a      	ldr	r2, [r3, #0]
  401e94:	4282      	cmp	r2, r0
  401e96:	d942      	bls.n	401f1e <ili93xx_draw_pixel+0x96>
  401e98:	f240 0338 	movw	r3, #56	; 0x38
  401e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401ea0:	681a      	ldr	r2, [r3, #0]
  401ea2:	428a      	cmp	r2, r1
  401ea4:	d93e      	bls.n	401f24 <ili93xx_draw_pixel+0x9c>
		return 1;
	}

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  401ea6:	f640 43e8 	movw	r3, #3304	; 0xce8
  401eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
  401eae:	781a      	ldrb	r2, [r3, #0]
  401eb0:	2a01      	cmp	r2, #1
  401eb2:	d118      	bne.n	401ee6 <ili93xx_draw_pixel+0x5e>
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
  401eb4:	b280      	uxth	r0, r0
  401eb6:	b289      	uxth	r1, r1
  401eb8:	f641 1261 	movw	r2, #6497	; 0x1961
  401ebc:	f2c0 0240 	movt	r2, #64	; 0x40
  401ec0:	4790      	blx	r2
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
  401ec2:	f241 4075 	movw	r0, #5237	; 0x1475
  401ec6:	f2c0 0040 	movt	r0, #64	; 0x40
  401eca:	4780      	blx	r0
		ili93xx_write_ram(*g_ul_pixel_cache);
  401ecc:	f640 1128 	movw	r1, #2344	; 0x928
  401ed0:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401ed4:	6808      	ldr	r0, [r1, #0]
  401ed6:	f241 43b1 	movw	r3, #5297	; 0x14b1
  401eda:	f2c0 0340 	movt	r3, #64	; 0x40
  401ede:	4798      	blx	r3
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  401ee0:	f04f 0000 	mov.w	r0, #0
  401ee4:	bd10      	pop	{r4, pc}
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  401ee6:	2a02      	cmp	r2, #2
  401ee8:	d11f      	bne.n	401f2a <ili93xx_draw_pixel+0xa2>
		ili93xx_set_window(ul_x, ul_y, 0, 0);
  401eea:	f04f 0200 	mov.w	r2, #0
  401eee:	4613      	mov	r3, r2
  401ef0:	f641 0491 	movw	r4, #6289	; 0x1891
  401ef4:	f2c0 0440 	movt	r4, #64	; 0x40
  401ef8:	47a0      	blx	r4
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
  401efa:	f241 4075 	movw	r0, #5237	; 0x1475
  401efe:	f2c0 0040 	movt	r0, #64	; 0x40
  401f02:	4780      	blx	r0
		ili93xx_write_ram(*g_ul_pixel_cache);
  401f04:	f640 1128 	movw	r1, #2344	; 0x928
  401f08:	f2c2 0100 	movt	r1, #8192	; 0x2000
  401f0c:	6808      	ldr	r0, [r1, #0]
  401f0e:	f241 43b1 	movw	r3, #5297	; 0x14b1
  401f12:	f2c0 0340 	movt	r3, #64	; 0x40
  401f16:	4798      	blx	r3
	}

	return 0;
  401f18:	f04f 0000 	mov.w	r0, #0
  401f1c:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
		return 1;
  401f1e:	f04f 0001 	mov.w	r0, #1
  401f22:	bd10      	pop	{r4, pc}
  401f24:	f04f 0001 	mov.w	r0, #1
  401f28:	bd10      	pop	{r4, pc}
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  401f2a:	f04f 0000 	mov.w	r0, #0
}
  401f2e:	bd10      	pop	{r4, pc}

00401f30 <ili93xx_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili93xx_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401f34:	b085      	sub	sp, #20
  401f36:	9003      	str	r0, [sp, #12]
  401f38:	9102      	str	r1, [sp, #8]
  401f3a:	9201      	str	r2, [sp, #4]
  401f3c:	9300      	str	r3, [sp, #0]
	uint32_t size, blocks;

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  401f3e:	a803      	add	r0, sp, #12
  401f40:	a902      	add	r1, sp, #8
  401f42:	aa01      	add	r2, sp, #4
  401f44:	466b      	mov	r3, sp
  401f46:	f241 7441 	movw	r4, #5953	; 0x1741
  401f4a:	f2c0 0440 	movt	r4, #64	; 0x40
  401f4e:	47a0      	blx	r4

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  401f50:	9a03      	ldr	r2, [sp, #12]
			(ul_y2 - ul_y1) + 1);
  401f52:	9b02      	ldr	r3, [sp, #8]

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  401f54:	9901      	ldr	r1, [sp, #4]
  401f56:	f101 0501 	add.w	r5, r1, #1
			(ul_y2 - ul_y1) + 1);
  401f5a:	9800      	ldr	r0, [sp, #0]
  401f5c:	f100 0401 	add.w	r4, r0, #1

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  401f60:	4610      	mov	r0, r2
  401f62:	4619      	mov	r1, r3
  401f64:	1aaa      	subs	r2, r5, r2
  401f66:	1ae3      	subs	r3, r4, r3
  401f68:	f641 0491 	movw	r4, #6289	; 0x1891
  401f6c:	f2c0 0440 	movt	r4, #64	; 0x40
  401f70:	47a0      	blx	r4
			(ul_y2 - ul_y1) + 1);

	/** Set cursor */
	ili93xx_set_cursor_position(ul_x1, ul_y1);
  401f72:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401f76:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  401f7a:	f641 1261 	movw	r2, #6497	; 0x1961
  401f7e:	f2c0 0240 	movt	r2, #64	; 0x40
  401f82:	4790      	blx	r2

	/** Prepare to write in Graphic RAM */
	ili93xx_write_ram_prepare();
  401f84:	f241 4375 	movw	r3, #5237	; 0x1475
  401f88:	f2c0 0340 	movt	r3, #64	; 0x40
  401f8c:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401f8e:	9902      	ldr	r1, [sp, #8]
  401f90:	9800      	ldr	r0, [sp, #0]
  401f92:	1a44      	subs	r4, r0, r1
  401f94:	9a01      	ldr	r2, [sp, #4]
  401f96:	f102 0801 	add.w	r8, r2, #1
  401f9a:	9b03      	ldr	r3, [sp, #12]
  401f9c:	ebc3 0108 	rsb	r1, r3, r8
  401fa0:	fb04 1801 	mla	r8, r4, r1, r1

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401fa4:	f648 0089 	movw	r0, #34953	; 0x8889
  401fa8:	f6c8 0088 	movt	r0, #34952	; 0x8888
  401fac:	fba0 2408 	umull	r2, r4, r0, r8
	while (blocks--) {
  401fb0:	09e4      	lsrs	r4, r4, #7
  401fb2:	d01d      	beq.n	401ff0 <ili93xx_draw_filled_rectangle+0xc0>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
  401fb4:	f640 1728 	movw	r7, #2344	; 0x928
  401fb8:	f2c2 0700 	movt	r7, #8192	; 0x2000
  401fbc:	f04f 06f0 	mov.w	r6, #240	; 0xf0
  401fc0:	f241 45cd 	movw	r5, #5325	; 0x14cd
  401fc4:	f2c0 0540 	movt	r5, #64	; 0x40
  401fc8:	f104 32ff 	add.w	r2, r4, #4294967295
  401fcc:	f002 0901 	and.w	r9, r2, #1
  401fd0:	4638      	mov	r0, r7
  401fd2:	4631      	mov	r1, r6
  401fd4:	47a8      	blx	r5

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
	while (blocks--) {
  401fd6:	3c01      	subs	r4, #1
  401fd8:	d134      	bne.n	402044 <ili93xx_draw_filled_rectangle+0x114>
  401fda:	e009      	b.n	401ff0 <ili93xx_draw_filled_rectangle+0xc0>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
  401fdc:	4638      	mov	r0, r7
  401fde:	4631      	mov	r1, r6
  401fe0:	47a8      	blx	r5
  401fe2:	f104 34ff 	add.w	r4, r4, #4294967295
  401fe6:	4638      	mov	r0, r7
  401fe8:	4631      	mov	r1, r6
  401fea:	47a8      	blx	r5

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
	while (blocks--) {
  401fec:	3c01      	subs	r4, #1
  401fee:	d1f5      	bne.n	401fdc <ili93xx_draw_filled_rectangle+0xac>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
								LCD_DATA_CACHE_SIZE);
	}

	/** Send remaining pixels */
	ili93xx_write_ram_buffer(g_ul_pixel_cache,
  401ff0:	f648 0389 	movw	r3, #34953	; 0x8889
  401ff4:	f6c8 0388 	movt	r3, #34952	; 0x8888
  401ff8:	fba3 2108 	umull	r2, r1, r3, r8
  401ffc:	ea4f 10d1 	mov.w	r0, r1, lsr #7
  402000:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
  402004:	f640 1028 	movw	r0, #2344	; 0x928
  402008:	f2c2 0000 	movt	r0, #8192	; 0x2000
  40200c:	eba8 1102 	sub.w	r1, r8, r2, lsl #4
  402010:	f241 44cd 	movw	r4, #5325	; 0x14cd
  402014:	f2c0 0440 	movt	r4, #64	; 0x40
  402018:	47a0      	blx	r4
					size % LCD_DATA_CACHE_SIZE);

	/** Reset the refresh window area */
	ili93xx_set_window(0, 0, g_ul_lcd_x_length, g_ul_lcd_y_length);
  40201a:	f04f 0000 	mov.w	r0, #0
  40201e:	4601      	mov	r1, r0
  402020:	f240 0334 	movw	r3, #52	; 0x34
  402024:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402028:	681a      	ldr	r2, [r3, #0]
  40202a:	f240 0438 	movw	r4, #56	; 0x38
  40202e:	f2c2 0400 	movt	r4, #8192	; 0x2000
  402032:	6823      	ldr	r3, [r4, #0]
  402034:	f641 0491 	movw	r4, #6289	; 0x1891
  402038:	f2c0 0440 	movt	r4, #64	; 0x40
  40203c:	47a0      	blx	r4
}
  40203e:	b005      	add	sp, #20
  402040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402044:	f1b9 0f00 	cmp.w	r9, #0
  402048:	d0c8      	beq.n	401fdc <ili93xx_draw_filled_rectangle+0xac>
	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
	while (blocks--) {
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
  40204a:	4638      	mov	r0, r7
  40204c:	4631      	mov	r1, r6
  40204e:	47a8      	blx	r5

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
	while (blocks--) {
  402050:	3c01      	subs	r4, #1
  402052:	d1c3      	bne.n	401fdc <ili93xx_draw_filled_rectangle+0xac>
  402054:	e7cc      	b.n	401ff0 <ili93xx_draw_filled_rectangle+0xc0>
  402056:	bf00      	nop

00402058 <ili93xx_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  402058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40205c:	b089      	sub	sp, #36	; 0x24
  40205e:	9006      	str	r0, [sp, #24]
  402060:	468b      	mov	fp, r1
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  402062:	7813      	ldrb	r3, [r2, #0]
  402064:	2b00      	cmp	r3, #0
  402066:	f000 80c7 	beq.w	4021f8 <ili93xx_draw_string+0x1a0>
  40206a:	9200      	str	r2, [sp, #0]
  40206c:	4682      	mov	sl, r0
 *
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
  40206e:	f648 02e8 	movw	r2, #35048	; 0x88e8
  402072:	f2c0 0240 	movt	r2, #64	; 0x40
  402076:	9205      	str	r2, [sp, #20]
  402078:	f2a2 206b 	subw	r0, r2, #619	; 0x26b
  40207c:	9007      	str	r0, [sp, #28]
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  40207e:	f641 6189 	movw	r1, #7817	; 0x1e89
  402082:	4689      	mov	r9, r1
  402084:	f2c0 0940 	movt	r9, #64	; 0x40
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/** If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  402088:	2b0a      	cmp	r3, #10
  40208a:	d104      	bne.n	402096 <ili93xx_draw_string+0x3e>
			ul_y += gfont.height + 2;
  40208c:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  402090:	f8dd a018 	ldr.w	sl, [sp, #24]
  402094:	e0a9      	b.n	4021ea <ili93xx_draw_string+0x192>

	/**
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  402096:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40209a:	ea4f 0883 	mov.w	r8, r3, lsl #2
  40209e:	f5a8 7720 	sub.w	r7, r8, #640	; 0x280
 *
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
  4020a2:	9c05      	ldr	r4, [sp, #20]
  4020a4:	19e0      	adds	r0, r4, r7
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  4020a6:	f2a8 267f 	subw	r6, r8, #639	; 0x27f
 *
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
  4020aa:	19a6      	adds	r6, r4, r6
  4020ac:	9d07      	ldr	r5, [sp, #28]
  4020ae:	44a8      	add	r8, r5
  4020b0:	4655      	mov	r5, sl
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  4020b2:	f10b 0201 	add.w	r2, fp, #1
  4020b6:	9201      	str	r2, [sp, #4]
  4020b8:	f10b 0102 	add.w	r1, fp, #2
  4020bc:	9102      	str	r1, [sp, #8]
  4020be:	f10b 0303 	add.w	r3, fp, #3
  4020c2:	9303      	str	r3, [sp, #12]
  4020c4:	f10b 0704 	add.w	r7, fp, #4
  4020c8:	9704      	str	r7, [sp, #16]
  4020ca:	464c      	mov	r4, r9
  4020cc:	4681      	mov	r9, r0
  4020ce:	4627      	mov	r7, r4
 *
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
  4020d0:	4634      	mov	r4, r6
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  4020d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
  4020d6:	f010 0f80 	tst.w	r0, #128	; 0x80
  4020da:	d002      	beq.n	4020e2 <ili93xx_draw_string+0x8a>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  4020dc:	4628      	mov	r0, r5
  4020de:	4659      	mov	r1, fp
  4020e0:	47b8      	blx	r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  4020e2:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  4020e6:	f002 0140 	and.w	r1, r2, #64	; 0x40
  4020ea:	b2cb      	uxtb	r3, r1
  4020ec:	b113      	cbz	r3, 4020f4 <ili93xx_draw_string+0x9c>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  4020ee:	4628      	mov	r0, r5
  4020f0:	9901      	ldr	r1, [sp, #4]
  4020f2:	47b8      	blx	r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  4020f4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
  4020f8:	f000 0220 	and.w	r2, r0, #32
  4020fc:	b2d1      	uxtb	r1, r2
  4020fe:	b111      	cbz	r1, 402106 <ili93xx_draw_string+0xae>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  402100:	4628      	mov	r0, r5
  402102:	9902      	ldr	r1, [sp, #8]
  402104:	47b8      	blx	r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  402106:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40210a:	f003 0010 	and.w	r0, r3, #16
  40210e:	b2c2      	uxtb	r2, r0
  402110:	b112      	cbz	r2, 402118 <ili93xx_draw_string+0xc0>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  402112:	4628      	mov	r0, r5
  402114:	9903      	ldr	r1, [sp, #12]
  402116:	47b8      	blx	r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  402118:	f814 1c01 	ldrb.w	r1, [r4, #-1]
  40211c:	f001 0308 	and.w	r3, r1, #8
  402120:	b2d8      	uxtb	r0, r3
  402122:	b110      	cbz	r0, 40212a <ili93xx_draw_string+0xd2>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  402124:	4628      	mov	r0, r5
  402126:	9904      	ldr	r1, [sp, #16]
  402128:	47b8      	blx	r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  40212a:	f814 2c01 	ldrb.w	r2, [r4, #-1]
  40212e:	f002 0104 	and.w	r1, r2, #4
  402132:	b2cb      	uxtb	r3, r1
  402134:	b11b      	cbz	r3, 40213e <ili93xx_draw_string+0xe6>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  402136:	4628      	mov	r0, r5
  402138:	f10b 0105 	add.w	r1, fp, #5
  40213c:	47b8      	blx	r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  40213e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
  402142:	f000 0202 	and.w	r2, r0, #2
  402146:	b2d1      	uxtb	r1, r2
  402148:	b119      	cbz	r1, 402152 <ili93xx_draw_string+0xfa>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  40214a:	4628      	mov	r0, r5
  40214c:	f10b 0106 	add.w	r1, fp, #6
  402150:	47b8      	blx	r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  402152:	f814 4c01 	ldrb.w	r4, [r4, #-1]
  402156:	f014 0f01 	tst.w	r4, #1
  40215a:	d003      	beq.n	402164 <ili93xx_draw_string+0x10c>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  40215c:	4628      	mov	r0, r5
  40215e:	f10b 0107 	add.w	r1, fp, #7
  402162:	47b8      	blx	r7
 *
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
  402164:	464c      	mov	r4, r9
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  402166:	f899 3001 	ldrb.w	r3, [r9, #1]
  40216a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40216e:	d003      	beq.n	402178 <ili93xx_draw_string+0x120>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  402170:	4628      	mov	r0, r5
  402172:	f10b 0108 	add.w	r1, fp, #8
  402176:	47b8      	blx	r7
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  402178:	7860      	ldrb	r0, [r4, #1]
  40217a:	f000 0240 	and.w	r2, r0, #64	; 0x40
  40217e:	b2d1      	uxtb	r1, r2
  402180:	b119      	cbz	r1, 40218a <ili93xx_draw_string+0x132>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  402182:	4628      	mov	r0, r5
  402184:	f10b 0109 	add.w	r1, fp, #9
  402188:	47b8      	blx	r7
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  40218a:	7863      	ldrb	r3, [r4, #1]
  40218c:	f003 0020 	and.w	r0, r3, #32
  402190:	b2c2      	uxtb	r2, r0
  402192:	b11a      	cbz	r2, 40219c <ili93xx_draw_string+0x144>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  402194:	4628      	mov	r0, r5
  402196:	f10b 010a 	add.w	r1, fp, #10
  40219a:	47b8      	blx	r7
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  40219c:	7861      	ldrb	r1, [r4, #1]
  40219e:	f001 0310 	and.w	r3, r1, #16
  4021a2:	b2d8      	uxtb	r0, r3
  4021a4:	b118      	cbz	r0, 4021ae <ili93xx_draw_string+0x156>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  4021a6:	4628      	mov	r0, r5
  4021a8:	f10b 010b 	add.w	r1, fp, #11
  4021ac:	47b8      	blx	r7
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  4021ae:	7862      	ldrb	r2, [r4, #1]
  4021b0:	f002 0108 	and.w	r1, r2, #8
  4021b4:	b2cb      	uxtb	r3, r1
  4021b6:	b11b      	cbz	r3, 4021c0 <ili93xx_draw_string+0x168>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  4021b8:	4628      	mov	r0, r5
  4021ba:	f10b 010c 	add.w	r1, fp, #12
  4021be:	47b8      	blx	r7
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  4021c0:	7860      	ldrb	r0, [r4, #1]
  4021c2:	f000 0204 	and.w	r2, r0, #4
  4021c6:	b2d1      	uxtb	r1, r2
  4021c8:	b119      	cbz	r1, 4021d2 <ili93xx_draw_string+0x17a>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  4021ca:	4628      	mov	r0, r5
  4021cc:	f10b 010d 	add.w	r1, fp, #13
  4021d0:	47b8      	blx	r7
  4021d2:	f109 0902 	add.w	r9, r9, #2
  4021d6:	f106 0602 	add.w	r6, r6, #2
  4021da:	f105 0501 	add.w	r5, r5, #1
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  4021de:	4546      	cmp	r6, r8
  4021e0:	f47f af76 	bne.w	4020d0 <ili93xx_draw_string+0x78>
  4021e4:	46b9      	mov	r9, r7
			/**
			 * Draw the character and place cursor right after (font
			 * width + 2)
			 */
			ili93xx_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  4021e6:	f10a 0a0c 	add.w	sl, sl, #12
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  4021ea:	9800      	ldr	r0, [sp, #0]
  4021ec:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4021f0:	9000      	str	r0, [sp, #0]
  4021f2:	2b00      	cmp	r3, #0
  4021f4:	f47f af48 	bne.w	402088 <ili93xx_draw_string+0x30>
			ul_x += gfont.width + 2;
		}

		p_str++;
	}
}
  4021f8:	b009      	add	sp, #36	; 0x24
  4021fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021fe:	bf00      	nop

00402200 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  402200:	ea4f 1101 	mov.w	r1, r1, lsl #4
  402204:	5042      	str	r2, [r0, r1]
  402206:	4770      	bx	lr

00402208 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  402208:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40220c:	604a      	str	r2, [r1, #4]
  40220e:	4770      	bx	lr

00402210 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  402210:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  402214:	608a      	str	r2, [r1, #8]
  402216:	4770      	bx	lr

00402218 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  402218:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  40221c:	60ca      	str	r2, [r1, #12]
  40221e:	4770      	bx	lr

00402220 <hsmci_reset>:

/**
 * \brief Reset the HSMCI interface
 */
static void hsmci_reset(void)
{
  402220:	b470      	push	{r4, r5, r6}
	uint32_t mr = HSMCI->HSMCI_MR;
  402222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402226:	685d      	ldr	r5, [r3, #4]
	uint32_t dtor = HSMCI->HSMCI_DTOR;
  402228:	689c      	ldr	r4, [r3, #8]
	uint32_t sdcr = HSMCI->HSMCI_SDCR;
  40222a:	68d8      	ldr	r0, [r3, #12]
	uint32_t cstor = HSMCI->HSMCI_CSTOR;
  40222c:	69d9      	ldr	r1, [r3, #28]
	uint32_t cfg = HSMCI->HSMCI_CFG;
  40222e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
	HSMCI->HSMCI_CR = HSMCI_CR_SWRST;
  402230:	f04f 0680 	mov.w	r6, #128	; 0x80
  402234:	601e      	str	r6, [r3, #0]
	HSMCI->HSMCI_MR = mr;
  402236:	605d      	str	r5, [r3, #4]
	HSMCI->HSMCI_DTOR = dtor;
  402238:	609c      	str	r4, [r3, #8]
	HSMCI->HSMCI_SDCR = sdcr;
  40223a:	60d8      	str	r0, [r3, #12]
	HSMCI->HSMCI_CSTOR = cstor;
  40223c:	61d9      	str	r1, [r3, #28]
	HSMCI->HSMCI_CFG = cfg;
  40223e:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef HSMCI_SR_DMADONE
	HSMCI->HSMCI_DMA = 0;
#endif
	// Enable the HSMCI
	HSMCI->HSMCI_CR = HSMCI_CR_PWSEN | HSMCI_CR_MCIEN;
  402240:	f04f 0005 	mov.w	r0, #5
  402244:	6018      	str	r0, [r3, #0]
}
  402246:	bc70      	pop	{r4, r5, r6}
  402248:	4770      	bx	lr
  40224a:	bf00      	nop

0040224c <hsmci_send_cmd_execute>:
 *
 * \return true if success, otherwise false
 */
static bool hsmci_send_cmd_execute(uint32_t cmdr, sdmmc_cmd_def_t cmd,
		uint32_t arg)
{
  40224c:	b508      	push	{r3, lr}
	uint32_t sr;

	cmdr |= HSMCI_CMDR_CMDNB(cmd) | HSMCI_CMDR_SPCMD_STD;
  40224e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
  402252:	4318      	orrs	r0, r3
	if (cmd & SDMMC_RESP_PRESENT) {
  402254:	f411 7f80 	tst.w	r1, #256	; 0x100
  402258:	d00c      	beq.n	402274 <hsmci_send_cmd_execute+0x28>
		cmdr |= HSMCI_CMDR_MAXLAT;
		if (cmd & SDMMC_RESP_136) {
  40225a:	f411 6f00 	tst.w	r1, #2048	; 0x800
  40225e:	d002      	beq.n	402266 <hsmci_send_cmd_execute+0x1a>
			cmdr |= HSMCI_CMDR_RSPTYP_136_BIT;
  402260:	f440 5084 	orr.w	r0, r0, #4224	; 0x1080
  402264:	e006      	b.n	402274 <hsmci_send_cmd_execute+0x28>
		} else if (cmd & SDMMC_RESP_BUSY) {
  402266:	f411 5f00 	tst.w	r1, #8192	; 0x2000
			cmdr |= HSMCI_CMDR_RSPTYP_R1B;
  40226a:	bf14      	ite	ne
  40226c:	f440 5086 	orrne.w	r0, r0, #4288	; 0x10c0
		} else {
			cmdr |= HSMCI_CMDR_RSPTYP_48_BIT;
  402270:	f440 5082 	orreq.w	r0, r0, #4160	; 0x1040
		}
	}
	if (cmd & SDMMC_CMD_OPENDRAIN) {
  402274:	f411 4f80 	tst.w	r1, #16384	; 0x4000
		cmdr |= HSMCI_CMDR_OPDCMD_OPENDRAIN;
  402278:	bf18      	it	ne
  40227a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	}

	// Write argument
	HSMCI->HSMCI_ARGR = arg;
  40227e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402282:	611a      	str	r2, [r3, #16]
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;
  402284:	6158      	str	r0, [r3, #20]

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  402286:	4618      	mov	r0, r3
		if (cmd & SDMMC_RESP_CRC) {
  402288:	f401 5280 	and.w	r2, r1, #4096	; 0x1000
	// Write and start command
	HSMCI->HSMCI_CMDR = cmdr;

	// Wait end of command
	do {
		sr = HSMCI->HSMCI_SR;
  40228c:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (cmd & SDMMC_RESP_CRC) {
  40228e:	b152      	cbz	r2, 4022a6 <hsmci_send_cmd_execute+0x5a>
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  402290:	f413 0f1f 	tst.w	r3, #10420224	; 0x9f0000
  402294:	d012      	beq.n	4022bc <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE | HSMCI_SR_RCRCE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  402296:	f242 2221 	movw	r2, #8737	; 0x2221
  40229a:	f2c0 0240 	movt	r2, #64	; 0x40
  40229e:	4790      	blx	r2
				return false;
  4022a0:	f04f 0000 	mov.w	r0, #0
  4022a4:	bd08      	pop	{r3, pc}
			}
		} else {
			if (sr & (HSMCI_SR_CSTOE | HSMCI_SR_RTOE
  4022a6:	f413 0f1b 	tst.w	r3, #10158080	; 0x9b0000
  4022aa:	d007      	beq.n	4022bc <hsmci_send_cmd_execute+0x70>
					| HSMCI_SR_RENDE
					| HSMCI_SR_RDIRE | HSMCI_SR_RINDE)) {
				hsmci_debug("%s: CMD 0x%08x sr 0x%08x error\n\r",
						__func__, cmd, sr);
				hsmci_reset();
  4022ac:	f242 2121 	movw	r1, #8737	; 0x2221
  4022b0:	f2c0 0140 	movt	r1, #64	; 0x40
  4022b4:	4788      	blx	r1
				return false;
  4022b6:	f04f 0000 	mov.w	r0, #0
  4022ba:	bd08      	pop	{r3, pc}
			}
		}
	} while (!(sr & HSMCI_SR_CMDRDY));
  4022bc:	f013 0f01 	tst.w	r3, #1
  4022c0:	d0e4      	beq.n	40228c <hsmci_send_cmd_execute+0x40>

	if (cmd & SDMMC_RESP_BUSY) {
  4022c2:	f411 5f00 	tst.w	r1, #8192	; 0x2000
  4022c6:	d119      	bne.n	4022fc <hsmci_send_cmd_execute+0xb0>
		if (!hsmci_wait_busy()) {
			return false;
		}
	}
	return true;
  4022c8:	f04f 0001 	mov.w	r0, #1
  4022cc:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  4022ce:	6c08      	ldr	r0, [r1, #64]	; 0x40
  4022d0:	f103 33ff 	add.w	r3, r3, #4294967295
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
			return false;
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4022d4:	f000 0230 	and.w	r2, r0, #48	; 0x30
  4022d8:	2a20      	cmp	r2, #32
  4022da:	d119      	bne.n	402310 <hsmci_send_cmd_execute+0xc4>
  4022dc:	e00b      	b.n	4022f6 <hsmci_send_cmd_execute+0xaa>

	do {
		sr = HSMCI->HSMCI_SR;
		if (busy_wait-- == 0) {
			hsmci_debug("%s: timeout\n\r", __func__);
			hsmci_reset();
  4022de:	f242 2121 	movw	r1, #8737	; 0x2221
  4022e2:	f2c0 0140 	movt	r1, #64	; 0x40
  4022e6:	4788      	blx	r1
			return false;
  4022e8:	f04f 0000 	mov.w	r0, #0
  4022ec:	bd08      	pop	{r3, pc}
		}
	} while (!((sr & HSMCI_SR_NOTBUSY) && ((sr & HSMCI_SR_DTIP) == 0)));
  4022ee:	f000 0230 	and.w	r2, r0, #48	; 0x30
  4022f2:	2a20      	cmp	r2, #32
  4022f4:	d1eb      	bne.n	4022ce <hsmci_send_cmd_execute+0x82>
	return true;
  4022f6:	f04f 0001 	mov.w	r0, #1
  4022fa:	bd08      	pop	{r3, pc}
{
	uint32_t busy_wait = 1000000;
	uint32_t sr;

	do {
		sr = HSMCI->HSMCI_SR;
  4022fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  402300:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402302:	f244 2340 	movw	r3, #16960	; 0x4240
  402306:	f2c0 030f 	movt	r3, #15
  40230a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40230e:	e7ee      	b.n	4022ee <hsmci_send_cmd_execute+0xa2>
  402310:	6c08      	ldr	r0, [r1, #64]	; 0x40
		if (busy_wait-- == 0) {
  402312:	3b01      	subs	r3, #1
  402314:	d1eb      	bne.n	4022ee <hsmci_send_cmd_execute+0xa2>
  402316:	e7e2      	b.n	4022de <hsmci_send_cmd_execute+0x92>

00402318 <hsmci_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void hsmci_init(void)
{
  402318:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_HSMCI);
  40231a:	f04f 0012 	mov.w	r0, #18
  40231e:	f642 53e1 	movw	r3, #11745	; 0x2de1
  402322:	f2c0 0340 	movt	r3, #64	; 0x40
  402326:	4798      	blx	r3
	// Enable clock for DMA controller
	pmc_enable_periph_clk(ID_DMAC);
#endif

	// Set the Data Timeout Register to 2 Mega Cycles
	HSMCI->HSMCI_DTOR = HSMCI_DTOR_DTOMUL_1048576 | HSMCI_DTOR_DTOCYC(2);
  402328:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  40232c:	f04f 0272 	mov.w	r2, #114	; 0x72
  402330:	6082      	str	r2, [r0, #8]
	// Set Completion Signal Timeout to 2 Mega Cycles
	HSMCI->HSMCI_CSTOR = HSMCI_CSTOR_CSTOMUL_1048576 | HSMCI_CSTOR_CSTOCYC(2);
  402332:	61c2      	str	r2, [r0, #28]
	// Set Configuration Register
	HSMCI->HSMCI_CFG = HSMCI_CFG_FIFOMODE | HSMCI_CFG_FERRCTRL;
  402334:	f04f 0111 	mov.w	r1, #17
  402338:	6541      	str	r1, [r0, #84]	; 0x54
	// Set power saving to maximum value
	HSMCI->HSMCI_MR = HSMCI_MR_PWSDIV_Msk;
  40233a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  40233e:	6043      	str	r3, [r0, #4]

	// Enable the HSMCI and the Power Saving
	HSMCI->HSMCI_CR = HSMCI_CR_MCIEN | HSMCI_CR_PWSEN;
  402340:	f04f 0205 	mov.w	r2, #5
  402344:	6002      	str	r2, [r0, #0]
  402346:	bd08      	pop	{r3, pc}

00402348 <hsmci_get_bus_width>:
		return SD_MMC_HSMCI_SLOT_1_SIZE;
#endif
	default:
		return 0; // Slot number wrong
	}
}
  402348:	2800      	cmp	r0, #0
  40234a:	bf0c      	ite	eq
  40234c:	2004      	moveq	r0, #4
  40234e:	2000      	movne	r0, #0
  402350:	4770      	bx	lr
  402352:	bf00      	nop

00402354 <hsmci_is_high_speed_capable>:

bool hsmci_is_high_speed_capable(void)
{
	return true;
}
  402354:	f04f 0001 	mov.w	r0, #1
  402358:	4770      	bx	lr
  40235a:	bf00      	nop

0040235c <hsmci_select_device>:
void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;

	if (high_speed) {
  40235c:	b133      	cbz	r3, 40236c <hsmci_select_device+0x10>
		HSMCI->HSMCI_CFG |= HSMCI_CFG_HSMODE;
  40235e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402362:	6d58      	ldr	r0, [r3, #84]	; 0x54
  402364:	f440 7080 	orr.w	r0, r0, #256	; 0x100
  402368:	6558      	str	r0, [r3, #84]	; 0x54
  40236a:	e005      	b.n	402378 <hsmci_select_device+0x1c>
	} else {
		HSMCI->HSMCI_CFG &= ~HSMCI_CFG_HSMODE;
  40236c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402370:	6d58      	ldr	r0, [r3, #84]	; 0x54
  402372:	f420 7080 	bic.w	r0, r0, #256	; 0x100
  402376:	6558      	str	r0, [r3, #84]	; 0x54
{
	uint32_t clkdiv;
	uint32_t rest;

	// Speed = MCK clock / (2 * (CLKDIV + 1))
	if (speed > 0) {
  402378:	b181      	cbz	r1, 40239c <hsmci_select_device+0x40>
		clkdiv = mck / (2 * speed);
  40237a:	ea4f 0141 	mov.w	r1, r1, lsl #1
  40237e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
  402382:	f2c0 7327 	movt	r3, #1831	; 0x727
  402386:	fbb3 f0f1 	udiv	r0, r3, r1
		rest = mck % (2 * speed);
  40238a:	fb01 3110 	mls	r1, r1, r0, r3
		if (rest > 0) {
  40238e:	b109      	cbz	r1, 402394 <hsmci_select_device+0x38>
			// Ensure that the card speed not be higher than expected.
			clkdiv++;
  402390:	f100 0001 	add.w	r0, r0, #1
		}
		if (clkdiv > 0) {
  402394:	b120      	cbz	r0, 4023a0 <hsmci_select_device+0x44>
			clkdiv -= 1;
  402396:	f100 30ff 	add.w	r0, r0, #4294967295
  40239a:	e001      	b.n	4023a0 <hsmci_select_device+0x44>
		}
	} else {
		clkdiv = 0;
  40239c:	f04f 0000 	mov.w	r0, #0
	}
	HSMCI->HSMCI_MR &= ~HSMCI_MR_CLKDIV_Msk;
  4023a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4023a4:	6859      	ldr	r1, [r3, #4]
  4023a6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  4023aa:	6059      	str	r1, [r3, #4]
	HSMCI->HSMCI_MR |= HSMCI_MR_CLKDIV(clkdiv);
  4023ac:	6859      	ldr	r1, [r3, #4]
  4023ae:	b2c0      	uxtb	r0, r0
  4023b0:	4308      	orrs	r0, r1
  4023b2:	6058      	str	r0, [r3, #4]
#endif
	default:
		Assert(false); // Slot number wrong
	}

	switch (bus_width) {
  4023b4:	2a04      	cmp	r2, #4
  4023b6:	d004      	beq.n	4023c2 <hsmci_select_device+0x66>
}

void hsmci_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width, bool high_speed)
{
	uint32_t hsmci_slot = HSMCI_SDCR_SDCSEL_SLOTA;
	uint32_t hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
  4023b8:	2a08      	cmp	r2, #8
  4023ba:	bf0c      	ite	eq
  4023bc:	22c0      	moveq	r2, #192	; 0xc0
  4023be:	2200      	movne	r2, #0
  4023c0:	e001      	b.n	4023c6 <hsmci_select_device+0x6a>
	case 1:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_1;
		break;

	case 4:
		hsmci_bus_width = HSMCI_SDCR_SDCBUS_4;
  4023c2:	f04f 0280 	mov.w	r2, #128	; 0x80
		break;

	default:
		Assert(false); // Bus width wrong
	}
	HSMCI->HSMCI_SDCR = hsmci_slot | hsmci_bus_width;
  4023c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4023ca:	60da      	str	r2, [r3, #12]
  4023cc:	4770      	bx	lr
  4023ce:	bf00      	nop

004023d0 <hsmci_deselect_device>:
}

void hsmci_deselect_device(uint8_t slot)
{
  4023d0:	4770      	bx	lr
  4023d2:	bf00      	nop

004023d4 <hsmci_send_clock>:
}

void hsmci_send_clock(void)
{
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4023d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4023d8:	685a      	ldr	r2, [r3, #4]
  4023da:	f422 5060 	bic.w	r0, r2, #14336	; 0x3800
  4023de:	6058      	str	r0, [r3, #4]
	// Write argument
	HSMCI->HSMCI_ARGR = 0;
  4023e0:	f04f 0100 	mov.w	r1, #0
  4023e4:	6119      	str	r1, [r3, #16]
	// Write and start initialization command
	HSMCI->HSMCI_CMDR = HSMCI_CMDR_RSPTYP_NORESP
  4023e6:	f44f 6210 	mov.w	r2, #2304	; 0x900
  4023ea:	615a      	str	r2, [r3, #20]
			| HSMCI_CMDR_SPCMD_INIT
			| HSMCI_CMDR_OPDCMD_OPENDRAIN;
	// Wait end of initialization command
	while (!(HSMCI->HSMCI_SR & HSMCI_SR_CMDRDY));
  4023ec:	4618      	mov	r0, r3
  4023ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4023f0:	f013 0f01 	tst.w	r3, #1
  4023f4:	d0fb      	beq.n	4023ee <hsmci_send_clock+0x1a>
}
  4023f6:	4770      	bx	lr

004023f8 <hsmci_send_cmd>:

bool hsmci_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
  4023f8:	b510      	push	{r4, lr}
  4023fa:	4604      	mov	r4, r0
  4023fc:	460a      	mov	r2, r1
	// Configure command
	HSMCI->HSMCI_MR &= ~(HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF | HSMCI_MR_FBYTE);
  4023fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402402:	6859      	ldr	r1, [r3, #4]
  402404:	f421 5060 	bic.w	r0, r1, #14336	; 0x3800
  402408:	6058      	str	r0, [r3, #4]
	// Disable DMA for HSMCI
	HSMCI->HSMCI_DMA = 0;
#endif
#ifdef HSMCI_MR_PDCMODE
	// Disable PDC for HSMCI
	HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  40240a:	6859      	ldr	r1, [r3, #4]
  40240c:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
  402410:	6058      	str	r0, [r3, #4]
#endif
	HSMCI->HSMCI_BLKR = 0;
  402412:	f04f 0000 	mov.w	r0, #0
  402416:	6198      	str	r0, [r3, #24]
	return hsmci_send_cmd_execute(0, cmd, arg);
  402418:	4621      	mov	r1, r4
  40241a:	f242 234d 	movw	r3, #8781	; 0x224d
  40241e:	f2c0 0340 	movt	r3, #64	; 0x40
  402422:	4798      	blx	r3
}
  402424:	bd10      	pop	{r4, pc}
  402426:	bf00      	nop

00402428 <hsmci_get_response>:

uint32_t hsmci_get_response(void)
{
	return HSMCI->HSMCI_RSPR[0];
  402428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40242c:	6a18      	ldr	r0, [r3, #32]
}
  40242e:	4770      	bx	lr

00402430 <hsmci_get_response_128>:
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  402430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402434:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
  402436:	ea4f 6112 	mov.w	r1, r2, lsr #24
  40243a:	7001      	strb	r1, [r0, #0]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40243c:	ea4f 4112 	mov.w	r1, r2, lsr #16
  402440:	7041      	strb	r1, [r0, #1]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  402442:	ea4f 2112 	mov.w	r1, r2, lsr #8
  402446:	7081      	strb	r1, [r0, #2]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  402448:	70c2      	strb	r2, [r0, #3]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  40244a:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
  40244c:	ea4f 6112 	mov.w	r1, r2, lsr #24
  402450:	7101      	strb	r1, [r0, #4]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  402452:	ea4f 4112 	mov.w	r1, r2, lsr #16
  402456:	7141      	strb	r1, [r0, #5]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  402458:	ea4f 2112 	mov.w	r1, r2, lsr #8
  40245c:	7181      	strb	r1, [r0, #6]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  40245e:	71c2      	strb	r2, [r0, #7]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  402460:	6a1a      	ldr	r2, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
  402462:	ea4f 6112 	mov.w	r1, r2, lsr #24
  402466:	7201      	strb	r1, [r0, #8]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  402468:	ea4f 4112 	mov.w	r1, r2, lsr #16
  40246c:	7241      	strb	r1, [r0, #9]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  40246e:	ea4f 2112 	mov.w	r1, r2, lsr #8
  402472:	7281      	strb	r1, [r0, #10]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  402474:	72c2      	strb	r2, [r0, #11]
void hsmci_get_response_128(uint8_t* response)
{
	uint32_t response_32;

	for (uint8_t i = 0; i < 4; i++) {
		response_32 = HSMCI->HSMCI_RSPR[0];
  402476:	6a1b      	ldr	r3, [r3, #32]
		*response = (response_32 >> 24) & 0xFF;
  402478:	ea4f 6213 	mov.w	r2, r3, lsr #24
  40247c:	7302      	strb	r2, [r0, #12]
		response++;
		*response = (response_32 >> 16) & 0xFF;
  40247e:	ea4f 4113 	mov.w	r1, r3, lsr #16
  402482:	7341      	strb	r1, [r0, #13]
		response++;
		*response = (response_32 >>  8) & 0xFF;
  402484:	ea4f 2213 	mov.w	r2, r3, lsr #8
  402488:	7382      	strb	r2, [r0, #14]
		response++;
		*response = (response_32 >>  0) & 0xFF;
  40248a:	73c3      	strb	r3, [r0, #15]
  40248c:	4770      	bx	lr
  40248e:	bf00      	nop

00402490 <hsmci_adtc_start>:
		response++;
	}
}

bool hsmci_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg, uint16_t block_size, uint16_t nb_block, bool access_block)
{
  402490:	b570      	push	{r4, r5, r6, lr}
  402492:	4604      	mov	r4, r0
  402494:	460d      	mov	r5, r1
		HSMCI->HSMCI_DMA = 0;
	}
#endif

#ifdef HSMCI_MR_PDCMODE
	if (access_block) {
  402496:	f89d 1010 	ldrb.w	r1, [sp, #16]
  40249a:	b131      	cbz	r1, 4024aa <hsmci_adtc_start+0x1a>
		// Enable PDC for HSMCI
		HSMCI->HSMCI_MR |= HSMCI_MR_PDCMODE;
  40249c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4024a0:	6870      	ldr	r0, [r6, #4]
  4024a2:	f440 4100 	orr.w	r1, r0, #32768	; 0x8000
  4024a6:	6071      	str	r1, [r6, #4]
  4024a8:	e005      	b.n	4024b6 <hsmci_adtc_start+0x26>
	} else {
		// Disable PDC for HSMCI
		HSMCI->HSMCI_MR &= ~HSMCI_MR_PDCMODE;
  4024aa:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4024ae:	6870      	ldr	r0, [r6, #4]
  4024b0:	f420 4100 	bic.w	r1, r0, #32768	; 0x8000
  4024b4:	6071      	str	r1, [r6, #4]
#endif

	// Enabling Read/Write Proof allows to stop the HSMCI Clock during
	// read/write  access if the internal FIFO is full.
	// This will guarantee data integrity, not bandwidth.
	HSMCI->HSMCI_MR |= HSMCI_MR_WRPROOF | HSMCI_MR_RDPROOF;
  4024b6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4024ba:	6870      	ldr	r0, [r6, #4]
  4024bc:	f440 51c0 	orr.w	r1, r0, #6144	; 0x1800
  4024c0:	6071      	str	r1, [r6, #4]
	// Force byte transfer if needed
	if (block_size & 0x3) {
  4024c2:	f012 0f03 	tst.w	r2, #3
  4024c6:	d004      	beq.n	4024d2 <hsmci_adtc_start+0x42>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  4024c8:	6870      	ldr	r0, [r6, #4]
  4024ca:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4024ce:	6071      	str	r1, [r6, #4]
  4024d0:	e005      	b.n	4024de <hsmci_adtc_start+0x4e>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  4024d2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  4024d6:	6870      	ldr	r0, [r6, #4]
  4024d8:	f420 5100 	bic.w	r1, r0, #8192	; 0x2000
  4024dc:	6071      	str	r1, [r6, #4]
	}

	if (cmd & SDMMC_CMD_WRITE) {
  4024de:	f404 4600 	and.w	r6, r4, #32768	; 0x8000
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_WRITE;
  4024e2:	2e00      	cmp	r6, #0
  4024e4:	bf0c      	ite	eq
  4024e6:	f44f 20a0 	moveq.w	r0, #327680	; 0x50000
  4024ea:	f44f 3080 	movne.w	r0, #65536	; 0x10000
	} else {
		cmdr = HSMCI_CMDR_TRCMD_START_DATA | HSMCI_CMDR_TRDIR_READ;
	}

	if (cmd & SDMMC_CMD_SDIO_BYTE) {
  4024ee:	f414 3f80 	tst.w	r4, #65536	; 0x10000
  4024f2:	d009      	beq.n	402508 <hsmci_adtc_start+0x78>
			cmdr |= HSMCI_CMDR_TRTYP_BYTE;
  4024f4:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
			// Value 0 corresponds to a 512-byte transfer
			HSMCI->HSMCI_BLKR = ((block_size % 512) << HSMCI_BLKR_BCNT_Pos);
  4024f8:	ea4f 56c2 	mov.w	r6, r2, lsl #23
  4024fc:	ea4f 51d6 	mov.w	r1, r6, lsr #23
  402500:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  402504:	61b1      	str	r1, [r6, #24]
  402506:	e018      	b.n	40253a <hsmci_adtc_start+0xaa>
	} else {
		HSMCI->HSMCI_BLKR = (block_size << HSMCI_BLKR_BLKLEN_Pos) |
  402508:	ea43 4602 	orr.w	r6, r3, r2, lsl #16
  40250c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402510:	618e      	str	r6, [r1, #24]
				(nb_block << HSMCI_BLKR_BCNT_Pos);
		if (cmd & SDMMC_CMD_SDIO_BLOCK) {
  402512:	f414 3f00 	tst.w	r4, #131072	; 0x20000
  402516:	d002      	beq.n	40251e <hsmci_adtc_start+0x8e>
			cmdr |= HSMCI_CMDR_TRTYP_BLOCK;
  402518:	f440 1020 	orr.w	r0, r0, #2621440	; 0x280000
  40251c:	e00d      	b.n	40253a <hsmci_adtc_start+0xaa>
		} else if (cmd & SDMMC_CMD_STREAM) {
  40251e:	f414 2f80 	tst.w	r4, #262144	; 0x40000
  402522:	d002      	beq.n	40252a <hsmci_adtc_start+0x9a>
			cmdr |= HSMCI_CMDR_TRTYP_STREAM;
  402524:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
  402528:	e007      	b.n	40253a <hsmci_adtc_start+0xaa>
		} else if (cmd & SDMMC_CMD_SINGLE_BLOCK) {
  40252a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
  40252e:	d104      	bne.n	40253a <hsmci_adtc_start+0xaa>
			cmdr |= HSMCI_CMDR_TRTYP_SINGLE;
		} else if (cmd & SDMMC_CMD_MULTI_BLOCK) {
  402530:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
			cmdr |= HSMCI_CMDR_TRTYP_MULTIPLE;
  402534:	bf18      	it	ne
  402536:	f440 2000 	orrne.w	r0, r0, #524288	; 0x80000
		} else {
			Assert(false); // Incorrect flags
		}
	}
	hsmci_transfert_pos = 0;
  40253a:	f640 41f0 	movw	r1, #3312	; 0xcf0
  40253e:	f2c2 0100 	movt	r1, #8192	; 0x2000
  402542:	f04f 0600 	mov.w	r6, #0
  402546:	600e      	str	r6, [r1, #0]
	hsmci_block_size = block_size;
  402548:	f640 41ea 	movw	r1, #3306	; 0xcea
  40254c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  402550:	800a      	strh	r2, [r1, #0]
	hsmci_nb_block = nb_block;
  402552:	f640 42ec 	movw	r2, #3308	; 0xcec
  402556:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40255a:	8013      	strh	r3, [r2, #0]

	return hsmci_send_cmd_execute(cmdr, cmd, arg);
  40255c:	4621      	mov	r1, r4
  40255e:	462a      	mov	r2, r5
  402560:	f242 234d 	movw	r3, #8781	; 0x224d
  402564:	f2c0 0340 	movt	r3, #64	; 0x40
  402568:	4798      	blx	r3
}
  40256a:	bd70      	pop	{r4, r5, r6, pc}

0040256c <hsmci_read_word>:
{
	return hsmci_send_cmd_execute(HSMCI_CMDR_TRCMD_STOP_DATA, cmd, arg);
}

bool hsmci_read_word(uint32_t* value)
{
  40256c:	b508      	push	{r3, lr}

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  40256e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402572:	f04f 0200 	mov.w	r2, #0
  402576:	f2cc 0260 	movt	r2, #49248	; 0xc060

	Assert(((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos);

	// Wait data available
	do {
		sr = HSMCI->HSMCI_SR;
  40257a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  40257c:	4213      	tst	r3, r2
  40257e:	d007      	beq.n	402590 <hsmci_read_word+0x24>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  402580:	f242 2021 	movw	r0, #8737	; 0x2221
  402584:	f2c0 0040 	movt	r0, #64	; 0x40
  402588:	4780      	blx	r0
			return false;
  40258a:	f04f 0000 	mov.w	r0, #0
  40258e:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_RXRDY));
  402590:	f013 0f02 	tst.w	r3, #2
  402594:	d0f1      	beq.n	40257a <hsmci_read_word+0xe>

	// Read data
	*value = HSMCI->HSMCI_RDR;
  402596:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40259a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40259c:	6002      	str	r2, [r0, #0]
	hsmci_transfert_pos += 4;
  40259e:	f640 40f0 	movw	r0, #3312	; 0xcf0
  4025a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4025a6:	6803      	ldr	r3, [r0, #0]
  4025a8:	f103 0304 	add.w	r3, r3, #4
  4025ac:	6003      	str	r3, [r0, #0]
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
  4025ae:	f640 41ec 	movw	r1, #3308	; 0xcec
  4025b2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4025b6:	880a      	ldrh	r2, [r1, #0]
  4025b8:	f640 40ea 	movw	r0, #3306	; 0xcea
  4025bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4025c0:	8801      	ldrh	r1, [r0, #0]
  4025c2:	fb01 f202 	mul.w	r2, r1, r2
  4025c6:	4293      	cmp	r3, r2
  4025c8:	d316      	bcc.n	4025f8 <hsmci_read_word+0x8c>
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4025ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4025ce:	f04f 0200 	mov.w	r2, #0
  4025d2:	f2cc 0260 	movt	r2, #49248	; 0xc060
	}

	// Wait end of transfer
	// Note: no need of timeout, because it is include in HSMCI
	do {
		sr = HSMCI->HSMCI_SR;
  4025d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4025d8:	4213      	tst	r3, r2
  4025da:	d007      	beq.n	4025ec <hsmci_read_word+0x80>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: DMA sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  4025dc:	f242 2121 	movw	r1, #8737	; 0x2221
  4025e0:	f2c0 0140 	movt	r1, #64	; 0x40
  4025e4:	4788      	blx	r1
			return false;
  4025e6:	f04f 0000 	mov.w	r0, #0
  4025ea:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4025ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4025f0:	d0f1      	beq.n	4025d6 <hsmci_read_word+0x6a>
	return true;
  4025f2:	f04f 0001 	mov.w	r0, #1
  4025f6:	bd08      	pop	{r3, pc}

	// Read data
	*value = HSMCI->HSMCI_RDR;
	hsmci_transfert_pos += 4;
	if (((uint32_t)hsmci_block_size * hsmci_nb_block) > hsmci_transfert_pos) {
		return true;
  4025f8:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  4025fc:	bd08      	pop	{r3, pc}
  4025fe:	bf00      	nop

00402600 <hsmci_start_read_blocks>:
#ifdef HSMCI_MR_PDCMODE
bool hsmci_start_read_blocks(void *dest, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  402600:	f640 43ea 	movw	r3, #3306	; 0xcea
  402604:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402608:	881a      	ldrh	r2, [r3, #0]
  40260a:	fb02 f101 	mul.w	r1, r2, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_RCR_RXCTR_Msk >> PERIPH_RCR_RXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)dest & 0x3) || (hsmci_block_size & 0x3)) {
  40260e:	f010 0f03 	tst.w	r0, #3
  402612:	d102      	bne.n	40261a <hsmci_start_read_blocks+0x1a>
  402614:	f012 0f03 	tst.w	r2, #3
  402618:	d006      	beq.n	402628 <hsmci_start_read_blocks+0x28>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40261a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40261e:	685a      	ldr	r2, [r3, #4]
  402620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402624:	605a      	str	r2, [r3, #4]
  402626:	e005      	b.n	402634 <hsmci_start_read_blocks+0x34>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  402628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40262c:	685a      	ldr	r2, [r3, #4]
  40262e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402632:	605a      	str	r2, [r3, #4]
	}

	// Configure PDC transfert
	HSMCI->HSMCI_RPR = (uint32_t)dest;
  402634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402638:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40263c:	6858      	ldr	r0, [r3, #4]
			nb_data : nb_data / 4;
  40263e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  402642:	bf0c      	ite	eq
  402644:	088a      	lsreq	r2, r1, #2
  402646:	460a      	movne	r2, r1
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfert
	HSMCI->HSMCI_RPR = (uint32_t)dest;
	HSMCI->HSMCI_RCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  402648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40264c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			nb_data : nb_data / 4;
	HSMCI->HSMCI_RNCR = 0;
  402650:	f04f 0200 	mov.w	r2, #0
  402654:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	// Start transfert
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTEN;
  402658:	f04f 0001 	mov.w	r0, #1
  40265c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  402660:	f640 43f0 	movw	r3, #3312	; 0xcf0
  402664:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402668:	681a      	ldr	r2, [r3, #0]
  40266a:	1889      	adds	r1, r1, r2
  40266c:	6019      	str	r1, [r3, #0]
	return true;
}
  40266e:	4770      	bx	lr

00402670 <hsmci_wait_end_of_read_blocks>:

bool hsmci_wait_end_of_read_blocks(void)
{
  402670:	b508      	push	{r3, lr}
	uint32_t sr;
	// Wait end of transfert
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  402672:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402676:	f04f 0200 	mov.w	r2, #0
  40267a:	f2cc 0260 	movt	r2, #49248	; 0xc060
{
	uint32_t sr;
	// Wait end of transfert
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  40267e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  402680:	4213      	tst	r3, r2
  402682:	d00d      	beq.n	4026a0 <hsmci_wait_end_of_read_blocks+0x30>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  402684:	f240 2002 	movw	r0, #514	; 0x202
  402688:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40268c:	f8c1 0120 	str.w	r0, [r1, #288]	; 0x120
			hsmci_reset();
  402690:	f242 2321 	movw	r3, #8737	; 0x2221
  402694:	f2c0 0340 	movt	r3, #64	; 0x40
  402698:	4798      	blx	r3
			return false;
  40269a:	f04f 0000 	mov.w	r0, #0
  40269e:	bd08      	pop	{r3, pc}
		}

	} while (!(sr & HSMCI_SR_RXBUFF));
  4026a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4026a4:	d0eb      	beq.n	40267e <hsmci_wait_end_of_read_blocks+0xe>

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4026a6:	f640 40ec 	movw	r0, #3308	; 0xcec
  4026aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4026ae:	8801      	ldrh	r1, [r0, #0]
  4026b0:	f640 42ea 	movw	r2, #3306	; 0xcea
  4026b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4026b8:	8813      	ldrh	r3, [r2, #0]
  4026ba:	fb03 f001 	mul.w	r0, r3, r1
  4026be:	f640 41f0 	movw	r1, #3312	; 0xcf0
  4026c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4026c6:	680a      	ldr	r2, [r1, #0]
  4026c8:	4290      	cmp	r0, r2
  4026ca:	d816      	bhi.n	4026fa <hsmci_wait_end_of_read_blocks+0x8a>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4026cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4026d0:	f04f 0100 	mov.w	r1, #0
  4026d4:	f2cc 0160 	movt	r1, #49248	; 0xc060
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4026d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4026da:	420b      	tst	r3, r1
  4026dc:	d007      	beq.n	4026ee <hsmci_wait_end_of_read_blocks+0x7e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  4026de:	f242 2221 	movw	r2, #8737	; 0x2221
  4026e2:	f2c0 0240 	movt	r2, #64	; 0x40
  4026e6:	4790      	blx	r2
			return false;
  4026e8:	f04f 0000 	mov.w	r0, #0
  4026ec:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
  4026ee:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  4026f2:	d0f1      	beq.n	4026d8 <hsmci_wait_end_of_read_blocks+0x68>
	return true;
  4026f4:	f04f 0001 	mov.w	r0, #1
  4026f8:	bd08      	pop	{r3, pc}
		}

	} while (!(sr & HSMCI_SR_RXBUFF));

	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
		return true;
  4026fa:	f04f 0001 	mov.w	r0, #1
			hsmci_reset();
			return false;
		}
	} while (!(sr & HSMCI_SR_XFRDONE));
	return true;
}
  4026fe:	bd08      	pop	{r3, pc}

00402700 <hsmci_start_write_blocks>:

bool hsmci_start_write_blocks(const void *src, uint16_t nb_block)
{
	uint32_t nb_data;

	nb_data = nb_block * hsmci_block_size;
  402700:	f640 43ea 	movw	r3, #3306	; 0xcea
  402704:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402708:	881a      	ldrh	r2, [r3, #0]
  40270a:	fb02 f101 	mul.w	r1, r2, r1
	Assert(nb_data <= (((uint32_t)hsmci_block_size * hsmci_nb_block) - hsmci_transfert_pos));
	Assert(nb_data <= (PERIPH_TCR_TXCTR_Msk >> PERIPH_TCR_TXCTR_Pos));

	// Handle unaligned memory address
	if (((uint32_t)src & 0x3) || (hsmci_block_size & 0x3)) {
  40270e:	f010 0f03 	tst.w	r0, #3
  402712:	d102      	bne.n	40271a <hsmci_start_write_blocks+0x1a>
  402714:	f012 0f03 	tst.w	r2, #3
  402718:	d006      	beq.n	402728 <hsmci_start_write_blocks+0x28>
		HSMCI->HSMCI_MR |= HSMCI_MR_FBYTE;
  40271a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40271e:	685a      	ldr	r2, [r3, #4]
  402720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402724:	605a      	str	r2, [r3, #4]
  402726:	e005      	b.n	402734 <hsmci_start_write_blocks+0x34>
	} else {
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
  402728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40272c:	685a      	ldr	r2, [r3, #4]
  40272e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  402732:	605a      	str	r2, [r3, #4]
	}

	// Configure PDC transfert
	HSMCI->HSMCI_TPR = (uint32_t)src;
  402734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402738:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  40273c:	6858      	ldr	r0, [r3, #4]
			nb_data : nb_data / 4;
  40273e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
  402742:	bf0c      	ite	eq
  402744:	088a      	lsreq	r2, r1, #2
  402746:	460a      	movne	r2, r1
		HSMCI->HSMCI_MR &= ~HSMCI_MR_FBYTE;
	}

	// Configure PDC transfert
	HSMCI->HSMCI_TPR = (uint32_t)src;
	HSMCI->HSMCI_TCR = (HSMCI->HSMCI_MR & HSMCI_MR_FBYTE) ?
  402748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40274c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			nb_data : nb_data / 4;
	HSMCI->HSMCI_TNCR = 0;
  402750:	f04f 0200 	mov.w	r2, #0
  402754:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	// Start transfert
	HSMCI->HSMCI_PTCR = HSMCI_PTCR_TXTEN;
  402758:	f44f 7080 	mov.w	r0, #256	; 0x100
  40275c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
	hsmci_transfert_pos += nb_data;
  402760:	f640 43f0 	movw	r3, #3312	; 0xcf0
  402764:	f2c2 0300 	movt	r3, #8192	; 0x2000
  402768:	681a      	ldr	r2, [r3, #0]
  40276a:	1889      	adds	r1, r1, r2
  40276c:	6019      	str	r1, [r3, #0]
	return true;
}
  40276e:	f04f 0001 	mov.w	r0, #1
  402772:	4770      	bx	lr

00402774 <hsmci_wait_end_of_write_blocks>:

bool hsmci_wait_end_of_write_blocks(void)
{
  402774:	b508      	push	{r3, lr}
	uint32_t sr;

	// Wait end of transfert
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  402776:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		if (sr &
  40277a:	f04f 0200 	mov.w	r2, #0
  40277e:	f2cc 0260 	movt	r2, #49248	; 0xc060
	uint32_t sr;

	// Wait end of transfert
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  402782:	6c0b      	ldr	r3, [r1, #64]	; 0x40
		if (sr &
  402784:	4213      	tst	r3, r2
  402786:	d00d      	beq.n	4027a4 <hsmci_wait_end_of_write_blocks+0x30>
				(HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x error\n\r",
					__func__, sr);
			hsmci_reset();
  402788:	f242 2021 	movw	r0, #8737	; 0x2221
  40278c:	f2c0 0040 	movt	r0, #64	; 0x40
  402790:	4780      	blx	r0
			HSMCI->HSMCI_PTCR = HSMCI_PTCR_RXTDIS | HSMCI_PTCR_TXTDIS;
  402792:	f240 2102 	movw	r1, #514	; 0x202
  402796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40279a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
			return false;
  40279e:	f04f 0000 	mov.w	r0, #0
  4027a2:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_TXBUFE));
  4027a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4027a8:	d0eb      	beq.n	402782 <hsmci_wait_end_of_write_blocks+0xe>


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
  4027aa:	f640 40ec 	movw	r0, #3308	; 0xcec
  4027ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
  4027b2:	8801      	ldrh	r1, [r0, #0]
  4027b4:	f640 42ea 	movw	r2, #3306	; 0xcea
  4027b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4027bc:	8813      	ldrh	r3, [r2, #0]
  4027be:	fb03 f001 	mul.w	r0, r3, r1
  4027c2:	f640 41f0 	movw	r1, #3312	; 0xcf0
  4027c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
  4027ca:	680a      	ldr	r2, [r1, #0]
  4027cc:	4290      	cmp	r0, r2
  4027ce:	d816      	bhi.n	4027fe <hsmci_wait_end_of_write_blocks+0x8a>
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4027d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4027d4:	f04f 0100 	mov.w	r1, #0
  4027d8:	f2cc 0160 	movt	r1, #49248	; 0xc060
		return true;
	}
	// It is the last transfer, then wait command completed
	// Note: no need of timeout, because it is include in HSMCI, see DTOE bit.
	do {
		sr = HSMCI->HSMCI_SR;
  4027dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (sr & (HSMCI_SR_UNRE | HSMCI_SR_OVRE | \
  4027de:	420b      	tst	r3, r1
  4027e0:	d007      	beq.n	4027f2 <hsmci_wait_end_of_write_blocks+0x7e>
				HSMCI_SR_DTOE | HSMCI_SR_DCRCE)) {
			hsmci_debug("%s: PDC sr 0x%08x last transfer error\n\r",
					__func__, sr);
			hsmci_reset();
  4027e2:	f242 2221 	movw	r2, #8737	; 0x2221
  4027e6:	f2c0 0240 	movt	r2, #64	; 0x40
  4027ea:	4790      	blx	r2
			return false;
  4027ec:	f04f 0000 	mov.w	r0, #0
  4027f0:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
  4027f2:	f013 0f20 	tst.w	r3, #32
  4027f6:	d0f1      	beq.n	4027dc <hsmci_wait_end_of_write_blocks+0x68>
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
  4027f8:	f04f 0001 	mov.w	r0, #1
  4027fc:	bd08      	pop	{r3, pc}
		}
	} while (!(sr & HSMCI_SR_TXBUFE));


	if (hsmci_transfert_pos < ((uint32_t)hsmci_block_size * hsmci_nb_block)) {
		return true;
  4027fe:	f04f 0001 	mov.w	r0, #1
			return false;
		}
	} while (!(sr & HSMCI_SR_NOTBUSY));
	Assert(HSMCI->HSMCI_SR & HSMCI_SR_FIFOEMPTY);
	return true;
}
  402802:	bd08      	pop	{r3, pc}

00402804 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402804:	b10a      	cbz	r2, 40280a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
  402806:	6641      	str	r1, [r0, #100]	; 0x64
  402808:	4770      	bx	lr
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40280a:	6601      	str	r1, [r0, #96]	; 0x60
  40280c:	4770      	bx	lr
  40280e:	bf00      	nop

00402810 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402810:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402812:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP)
	switch (ul_type) {
  402814:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402818:	d030      	beq.n	40287c <pio_set_peripheral+0x6c>
  40281a:	d808      	bhi.n	40282e <pio_set_peripheral+0x1e>
  40281c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402820:	d014      	beq.n	40284c <pio_set_peripheral+0x3c>
  402822:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402826:	d01e      	beq.n	402866 <pio_set_peripheral+0x56>
  402828:	2900      	cmp	r1, #0
  40282a:	d03b      	beq.n	4028a4 <pio_set_peripheral+0x94>
  40282c:	e039      	b.n	4028a2 <pio_set_peripheral+0x92>
  40282e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402832:	d037      	beq.n	4028a4 <pio_set_peripheral+0x94>
  402834:	d803      	bhi.n	40283e <pio_set_peripheral+0x2e>
  402836:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40283a:	d132      	bne.n	4028a2 <pio_set_peripheral+0x92>
  40283c:	e029      	b.n	402892 <pio_set_peripheral+0x82>
  40283e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402842:	d02f      	beq.n	4028a4 <pio_set_peripheral+0x94>
  402844:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402848:	d12b      	bne.n	4028a2 <pio_set_peripheral+0x92>
  40284a:	e02b      	b.n	4028a4 <pio_set_peripheral+0x94>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40284c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40284e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402850:	ea6f 0302 	mvn.w	r3, r2
  402854:	4021      	ands	r1, r4
  402856:	4019      	ands	r1, r3
  402858:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40285a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40285c:	6f44      	ldr	r4, [r0, #116]	; 0x74
  40285e:	4021      	ands	r1, r4
  402860:	400b      	ands	r3, r1
  402862:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402864:	e01d      	b.n	4028a2 <pio_set_peripheral+0x92>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402866:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402868:	ea42 0103 	orr.w	r1, r2, r3
  40286c:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40286e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402870:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402872:	400b      	ands	r3, r1
  402874:	ea23 0302 	bic.w	r3, r3, r2
  402878:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40287a:	e012      	b.n	4028a2 <pio_set_peripheral+0x92>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40287c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40287e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402880:	400b      	ands	r3, r1
  402882:	ea23 0302 	bic.w	r3, r3, r2
  402886:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402888:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40288a:	ea42 0103 	orr.w	r1, r2, r3
  40288e:	6741      	str	r1, [r0, #116]	; 0x74
		break;
  402890:	e007      	b.n	4028a2 <pio_set_peripheral+0x92>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402892:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402894:	ea42 0103 	orr.w	r1, r2, r3
  402898:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40289a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40289c:	ea42 0103 	orr.w	r1, r2, r3
  4028a0:	6741      	str	r1, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4028a2:	6042      	str	r2, [r0, #4]
}
  4028a4:	bc10      	pop	{r4}
  4028a6:	4770      	bx	lr

004028a8 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4028a8:	6441      	str	r1, [r0, #68]	; 0x44
  4028aa:	4770      	bx	lr

004028ac <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4028ae:	4604      	mov	r4, r0
  4028b0:	460d      	mov	r5, r1
  4028b2:	4616      	mov	r6, r2
  4028b4:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  4028b6:	f642 03a9 	movw	r3, #10409	; 0x28a9
  4028ba:	f2c0 0340 	movt	r3, #64	; 0x40
  4028be:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4028c0:	4620      	mov	r0, r4
  4028c2:	4629      	mov	r1, r5
  4028c4:	9a06      	ldr	r2, [sp, #24]
  4028c6:	f642 0305 	movw	r3, #10245	; 0x2805
  4028ca:	f2c0 0340 	movt	r3, #64	; 0x40
  4028ce:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4028d0:	b10f      	cbz	r7, 4028d6 <pio_set_output+0x2a>
		p_pio->PIO_MDER = ul_mask;
  4028d2:	6525      	str	r5, [r4, #80]	; 0x50
  4028d4:	e000      	b.n	4028d8 <pio_set_output+0x2c>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4028d6:	6565      	str	r5, [r4, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4028d8:	b10e      	cbz	r6, 4028de <pio_set_output+0x32>
		p_pio->PIO_SODR = ul_mask;
  4028da:	6325      	str	r5, [r4, #48]	; 0x30
  4028dc:	e000      	b.n	4028e0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4028de:	6365      	str	r5, [r4, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4028e0:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  4028e2:	6025      	str	r5, [r4, #0]
  4028e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028e6:	bf00      	nop

004028e8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4028e8:	b570      	push	{r4, r5, r6, lr}
  4028ea:	4604      	mov	r4, r0
  4028ec:	460d      	mov	r5, r1
  4028ee:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  4028f0:	f642 03a9 	movw	r3, #10409	; 0x28a9
  4028f4:	f2c0 0340 	movt	r3, #64	; 0x40
  4028f8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4028fa:	4620      	mov	r0, r4
  4028fc:	4629      	mov	r1, r5
  4028fe:	f006 0201 	and.w	r2, r6, #1
  402902:	f642 0305 	movw	r3, #10245	; 0x2805
  402906:	f2c0 0340 	movt	r3, #64	; 0x40
  40290a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40290c:	f016 0f0a 	tst.w	r6, #10
		p_pio->PIO_IFER = ul_mask;
  402910:	bf14      	ite	ne
  402912:	6225      	strne	r5, [r4, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402914:	6265      	streq	r5, [r4, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  402916:	f016 0f02 	tst.w	r6, #2
  40291a:	d002      	beq.n	402922 <pio_set_input+0x3a>
		p_pio->PIO_IFSCDR = ul_mask;
  40291c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  402920:	e004      	b.n	40292c <pio_set_input+0x44>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402922:	f016 0f08 	tst.w	r6, #8
			p_pio->PIO_IFSCER = ul_mask;
  402926:	bf18      	it	ne
  402928:	f8c4 5084 	strne.w	r5, [r4, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40292c:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  40292e:	6025      	str	r5, [r4, #0]
  402930:	bd70      	pop	{r4, r5, r6, pc}
  402932:	bf00      	nop

00402934 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402934:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402936:	4770      	bx	lr

00402938 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402938:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40293a:	4770      	bx	lr

0040293c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  40293c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40293e:	b083      	sub	sp, #12
  402940:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  402942:	ea4f 1650 	mov.w	r6, r0, lsr #5
  402946:	f506 1100 	add.w	r1, r6, #2097152	; 0x200000
  40294a:	f201 7207 	addw	r2, r1, #1799	; 0x707
  40294e:	ea4f 2642 	mov.w	r6, r2, lsl #9
#endif

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402952:	f005 44f0 	and.w	r4, r5, #2013265920	; 0x78000000
  402956:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  40295a:	d064      	beq.n	402a26 <pio_configure_pin+0xea>
  40295c:	d80a      	bhi.n	402974 <pio_configure_pin+0x38>
  40295e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  402962:	d02c      	beq.n	4029be <pio_configure_pin+0x82>
  402964:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  402968:	d043      	beq.n	4029f2 <pio_configure_pin+0xb6>
  40296a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  40296e:	f040 809d 	bne.w	402aac <pio_configure_pin+0x170>
  402972:	e00a      	b.n	40298a <pio_configure_pin+0x4e>
  402974:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  402978:	d07e      	beq.n	402a78 <pio_configure_pin+0x13c>
  40297a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  40297e:	d07b      	beq.n	402a78 <pio_configure_pin+0x13c>
  402980:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  402984:	f040 8092 	bne.w	402aac <pio_configure_pin+0x170>
  402988:	e067      	b.n	402a5a <pio_configure_pin+0x11e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40298a:	f000 031f 	and.w	r3, r0, #31
  40298e:	f04f 0401 	mov.w	r4, #1
  402992:	fa04 f703 	lsl.w	r7, r4, r3
  402996:	4630      	mov	r0, r6
  402998:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40299c:	463a      	mov	r2, r7
  40299e:	f642 0311 	movw	r3, #10257	; 0x2811
  4029a2:	f2c0 0340 	movt	r3, #64	; 0x40
  4029a6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4029a8:	4630      	mov	r0, r6
  4029aa:	4639      	mov	r1, r7
  4029ac:	ea05 0204 	and.w	r2, r5, r4
  4029b0:	f642 0305 	movw	r3, #10245	; 0x2805
  4029b4:	f2c0 0340 	movt	r3, #64	; 0x40
  4029b8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4029ba:	4620      	mov	r0, r4
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  4029bc:	e078      	b.n	402ab0 <pio_configure_pin+0x174>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4029be:	f000 071f 	and.w	r7, r0, #31
  4029c2:	f04f 0401 	mov.w	r4, #1
  4029c6:	fa04 f707 	lsl.w	r7, r4, r7
  4029ca:	4630      	mov	r0, r6
  4029cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4029d0:	463a      	mov	r2, r7
  4029d2:	f642 0311 	movw	r3, #10257	; 0x2811
  4029d6:	f2c0 0340 	movt	r3, #64	; 0x40
  4029da:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4029dc:	4630      	mov	r0, r6
  4029de:	4639      	mov	r1, r7
  4029e0:	ea05 0204 	and.w	r2, r5, r4
  4029e4:	f642 0305 	movw	r3, #10245	; 0x2805
  4029e8:	f2c0 0340 	movt	r3, #64	; 0x40
  4029ec:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4029ee:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  4029f0:	e05e      	b.n	402ab0 <pio_configure_pin+0x174>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4029f2:	f000 001f 	and.w	r0, r0, #31
  4029f6:	f04f 0401 	mov.w	r4, #1
  4029fa:	fa04 f700 	lsl.w	r7, r4, r0
  4029fe:	4630      	mov	r0, r6
  402a00:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402a04:	463a      	mov	r2, r7
  402a06:	f642 0311 	movw	r3, #10257	; 0x2811
  402a0a:	f2c0 0340 	movt	r3, #64	; 0x40
  402a0e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402a10:	4630      	mov	r0, r6
  402a12:	4639      	mov	r1, r7
  402a14:	ea05 0204 	and.w	r2, r5, r4
  402a18:	f642 0305 	movw	r3, #10245	; 0x2805
  402a1c:	f2c0 0340 	movt	r3, #64	; 0x40
  402a20:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402a22:	4620      	mov	r0, r4
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  402a24:	e044      	b.n	402ab0 <pio_configure_pin+0x174>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  402a26:	f000 021f 	and.w	r2, r0, #31
  402a2a:	f04f 0401 	mov.w	r4, #1
  402a2e:	fa04 f702 	lsl.w	r7, r4, r2
  402a32:	4630      	mov	r0, r6
  402a34:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402a38:	463a      	mov	r2, r7
  402a3a:	f642 0311 	movw	r3, #10257	; 0x2811
  402a3e:	f2c0 0340 	movt	r3, #64	; 0x40
  402a42:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  402a44:	4630      	mov	r0, r6
  402a46:	4639      	mov	r1, r7
  402a48:	ea05 0204 	and.w	r2, r5, r4
  402a4c:	f642 0305 	movw	r3, #10245	; 0x2805
  402a50:	f2c0 0340 	movt	r3, #64	; 0x40
  402a54:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402a56:	4620      	mov	r0, r4
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
  402a58:	e02a      	b.n	402ab0 <pio_configure_pin+0x174>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402a5a:	f000 011f 	and.w	r1, r0, #31
  402a5e:	f04f 0401 	mov.w	r4, #1
  402a62:	4630      	mov	r0, r6
  402a64:	fa04 f101 	lsl.w	r1, r4, r1
  402a68:	462a      	mov	r2, r5
  402a6a:	f642 03e9 	movw	r3, #10473	; 0x28e9
  402a6e:	f2c0 0340 	movt	r3, #64	; 0x40
  402a72:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402a74:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  402a76:	e01b      	b.n	402ab0 <pio_configure_pin+0x174>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402a78:	f000 031f 	and.w	r3, r0, #31
  402a7c:	f04f 0401 	mov.w	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402a80:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402a84:	ea05 0004 	and.w	r0, r5, r4
  402a88:	9000      	str	r0, [sp, #0]
  402a8a:	4630      	mov	r0, r6
  402a8c:	fa04 f103 	lsl.w	r1, r4, r3
  402a90:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402a94:	bf14      	ite	ne
  402a96:	2200      	movne	r2, #0
  402a98:	2201      	moveq	r2, #1
  402a9a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402a9e:	f642 05ad 	movw	r5, #10413	; 0x28ad
  402aa2:	f2c0 0540 	movt	r5, #64	; 0x40
  402aa6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  402aa8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  402aaa:	e001      	b.n	402ab0 <pio_configure_pin+0x174>

	default:
		return 0;
  402aac:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
  402ab0:	b003      	add	sp, #12
  402ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00402ab4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  402ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ab6:	b083      	sub	sp, #12
  402ab8:	4607      	mov	r7, r0
  402aba:	460e      	mov	r6, r1
  402abc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402abe:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  402ac2:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  402ac6:	d050      	beq.n	402b6a <pio_configure_pin_group+0xb6>
  402ac8:	d809      	bhi.n	402ade <pio_configure_pin_group+0x2a>
  402aca:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  402ace:	d024      	beq.n	402b1a <pio_configure_pin_group+0x66>
  402ad0:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  402ad4:	d035      	beq.n	402b42 <pio_configure_pin_group+0x8e>
  402ad6:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  402ada:	d178      	bne.n	402bce <pio_configure_pin_group+0x11a>
  402adc:	e009      	b.n	402af2 <pio_configure_pin_group+0x3e>
  402ade:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  402ae2:	d05e      	beq.n	402ba2 <pio_configure_pin_group+0xee>
  402ae4:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  402ae8:	d05b      	beq.n	402ba2 <pio_configure_pin_group+0xee>
  402aea:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  402aee:	d16e      	bne.n	402bce <pio_configure_pin_group+0x11a>
  402af0:	e04f      	b.n	402b92 <pio_configure_pin_group+0xde>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  402af2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402af6:	4632      	mov	r2, r6
  402af8:	f642 0311 	movw	r3, #10257	; 0x2811
  402afc:	f2c0 0340 	movt	r3, #64	; 0x40
  402b00:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  402b02:	4638      	mov	r0, r7
  402b04:	4631      	mov	r1, r6
  402b06:	f005 0201 	and.w	r2, r5, #1
  402b0a:	f642 0305 	movw	r3, #10245	; 0x2805
  402b0e:	f2c0 0340 	movt	r3, #64	; 0x40
  402b12:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402b14:	f04f 0001 	mov.w	r0, #1
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
  402b18:	e05b      	b.n	402bd2 <pio_configure_pin_group+0x11e>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  402b1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402b1e:	4632      	mov	r2, r6
  402b20:	f642 0311 	movw	r3, #10257	; 0x2811
  402b24:	f2c0 0340 	movt	r3, #64	; 0x40
  402b28:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  402b2a:	4638      	mov	r0, r7
  402b2c:	4631      	mov	r1, r6
  402b2e:	f005 0201 	and.w	r2, r5, #1
  402b32:	f642 0305 	movw	r3, #10245	; 0x2805
  402b36:	f2c0 0340 	movt	r3, #64	; 0x40
  402b3a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402b3c:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
  402b40:	e047      	b.n	402bd2 <pio_configure_pin_group+0x11e>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  402b42:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402b46:	4632      	mov	r2, r6
  402b48:	f642 0311 	movw	r3, #10257	; 0x2811
  402b4c:	f2c0 0340 	movt	r3, #64	; 0x40
  402b50:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  402b52:	4638      	mov	r0, r7
  402b54:	4631      	mov	r1, r6
  402b56:	f005 0201 	and.w	r2, r5, #1
  402b5a:	f642 0305 	movw	r3, #10245	; 0x2805
  402b5e:	f2c0 0340 	movt	r3, #64	; 0x40
  402b62:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402b64:	f04f 0001 	mov.w	r0, #1
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
  402b68:	e033      	b.n	402bd2 <pio_configure_pin_group+0x11e>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  402b6a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402b6e:	4632      	mov	r2, r6
  402b70:	f642 0311 	movw	r3, #10257	; 0x2811
  402b74:	f2c0 0340 	movt	r3, #64	; 0x40
  402b78:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
  402b7a:	4638      	mov	r0, r7
  402b7c:	4631      	mov	r1, r6
  402b7e:	f005 0201 	and.w	r2, r5, #1
  402b82:	f642 0305 	movw	r3, #10245	; 0x2805
  402b86:	f2c0 0340 	movt	r3, #64	; 0x40
  402b8a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402b8c:	f04f 0001 	mov.w	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
  402b90:	e01f      	b.n	402bd2 <pio_configure_pin_group+0x11e>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  402b92:	f642 03e9 	movw	r3, #10473	; 0x28e9
  402b96:	f2c0 0340 	movt	r3, #64	; 0x40
  402b9a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402b9c:	f04f 0001 	mov.w	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  402ba0:	e017      	b.n	402bd2 <pio_configure_pin_group+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  402ba2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  402ba6:	f005 0001 	and.w	r0, r5, #1
  402baa:	9000      	str	r0, [sp, #0]
  402bac:	4638      	mov	r0, r7
  402bae:	4631      	mov	r1, r6
  402bb0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402bb4:	bf14      	ite	ne
  402bb6:	2200      	movne	r2, #0
  402bb8:	2201      	moveq	r2, #1
  402bba:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402bbe:	f642 04ad 	movw	r4, #10413	; 0x28ad
  402bc2:	f2c0 0440 	movt	r4, #64	; 0x40
  402bc6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  402bc8:	f04f 0001 	mov.w	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  402bcc:	e001      	b.n	402bd2 <pio_configure_pin_group+0x11e>

	default:
		return 0;
  402bce:	f04f 0000 	mov.w	r0, #0
	}

	return 1;
}
  402bd2:	b003      	add	sp, #12
  402bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402bd6:	bf00      	nop

00402bd8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bdc:	4680      	mov	r8, r0
  402bde:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  402be0:	f642 1335 	movw	r3, #10549	; 0x2935
  402be4:	f2c0 0340 	movt	r3, #64	; 0x40
  402be8:	4798      	blx	r3
  402bea:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402bec:	4640      	mov	r0, r8
  402bee:	f642 1139 	movw	r1, #10553	; 0x2939
  402bf2:	f2c0 0140 	movt	r1, #64	; 0x40
  402bf6:	4788      	blx	r1

	/* Check pending events */
	if (status != 0) {
  402bf8:	4005      	ands	r5, r0
  402bfa:	d014      	beq.n	402c26 <pio_handler_process+0x4e>
  402bfc:	4c12      	ldr	r4, [pc, #72]	; (402c48 <pio_handler_process+0x70>)
 * \brief Process an interrupt request on the given PIO controller.
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
  402bfe:	4627      	mov	r7, r4
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402c00:	f854 0c0c 	ldr.w	r0, [r4, #-12]
  402c04:	42b0      	cmp	r0, r6
  402c06:	d10a      	bne.n	402c1e <pio_handler_process+0x46>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402c08:	f854 1c08 	ldr.w	r1, [r4, #-8]
  402c0c:	4229      	tst	r1, r5
  402c0e:	d006      	beq.n	402c1e <pio_handler_process+0x46>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  402c10:	6822      	ldr	r2, [r4, #0]
  402c12:	4630      	mov	r0, r6
  402c14:	4790      	blx	r2
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402c16:	f854 3c08 	ldr.w	r3, [r4, #-8]
  402c1a:	ea25 0503 	bic.w	r5, r5, r3
  402c1e:	f104 0410 	add.w	r4, r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  402c22:	2d00      	cmp	r5, #0
  402c24:	d1eb      	bne.n	402bfe <pio_handler_process+0x26>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  402c26:	f640 51d4 	movw	r1, #3540	; 0xdd4
  402c2a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  402c2e:	6808      	ldr	r0, [r1, #0]
  402c30:	b138      	cbz	r0, 402c42 <pio_handler_process+0x6a>
		if (pio_capture_handler) {
  402c32:	f640 42f4 	movw	r2, #3316	; 0xcf4
  402c36:	f2c2 0200 	movt	r2, #8192	; 0x2000
  402c3a:	6813      	ldr	r3, [r2, #0]
  402c3c:	b10b      	cbz	r3, 402c42 <pio_handler_process+0x6a>
			pio_capture_handler(p_pio);
  402c3e:	4640      	mov	r0, r8
  402c40:	4798      	blx	r3
  402c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c46:	bf00      	nop
  402c48:	20000d04 	.word	0x20000d04

00402c4c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402c4c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402c4e:	f44f 6060 	mov.w	r0, #3584	; 0xe00
  402c52:	f2c4 000e 	movt	r0, #16398	; 0x400e
  402c56:	f04f 010b 	mov.w	r1, #11
  402c5a:	f642 33d9 	movw	r3, #11225	; 0x2bd9
  402c5e:	f2c0 0340 	movt	r3, #64	; 0x40
  402c62:	4798      	blx	r3
  402c64:	bd08      	pop	{r3, pc}
  402c66:	bf00      	nop

00402c68 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402c68:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  402c6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  402c6e:	f2c4 000e 	movt	r0, #16398	; 0x400e
  402c72:	f04f 010c 	mov.w	r1, #12
  402c76:	f642 33d9 	movw	r3, #11225	; 0x2bd9
  402c7a:	f2c0 0340 	movt	r3, #64	; 0x40
  402c7e:	4798      	blx	r3
  402c80:	bd08      	pop	{r3, pc}
  402c82:	bf00      	nop

00402c84 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402c84:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  402c86:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  402c8a:	f2c4 000e 	movt	r0, #16398	; 0x400e
  402c8e:	f04f 010d 	mov.w	r1, #13
  402c92:	f642 33d9 	movw	r3, #11225	; 0x2bd9
  402c96:	f2c0 0340 	movt	r3, #64	; 0x40
  402c9a:	4798      	blx	r3
  402c9c:	bd08      	pop	{r3, pc}
  402c9e:	bf00      	nop

00402ca0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402ca4:	f2c4 030e 	movt	r3, #16398	; 0x400e
  402ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402caa:	f022 0170 	bic.w	r1, r2, #112	; 0x70
  402cae:	4308      	orrs	r0, r1
  402cb0:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402cb2:	6e98      	ldr	r0, [r3, #104]	; 0x68
  402cb4:	f010 0f08 	tst.w	r0, #8
  402cb8:	d007      	beq.n	402cca <pmc_switch_mck_to_pllack+0x2a>
  402cba:	e010      	b.n	402cde <pmc_switch_mck_to_pllack+0x3e>
  402cbc:	f100 33ff 	add.w	r3, r0, #4294967295
  402cc0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402cc2:	f010 0f08 	tst.w	r0, #8
  402cc6:	d038      	beq.n	402d3a <pmc_switch_mck_to_pllack+0x9a>
  402cc8:	e009      	b.n	402cde <pmc_switch_mck_to_pllack+0x3e>
  402cca:	f44f 6000 	mov.w	r0, #2048	; 0x800
  402cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402cd2:	f2c4 020e 	movt	r2, #16398	; 0x400e
  402cd6:	6e91      	ldr	r1, [r2, #104]	; 0x68
  402cd8:	f011 0f08 	tst.w	r1, #8
  402cdc:	d0ee      	beq.n	402cbc <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402ce2:	f2c4 010e 	movt	r1, #16398	; 0x400e
  402ce6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  402ce8:	f022 0303 	bic.w	r3, r2, #3
  402cec:	f043 0002 	orr.w	r0, r3, #2
  402cf0:	6308      	str	r0, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402cf2:	6e89      	ldr	r1, [r1, #104]	; 0x68
  402cf4:	f011 0f08 	tst.w	r1, #8
  402cf8:	d009      	beq.n	402d0e <pmc_switch_mck_to_pllack+0x6e>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402cfa:	f04f 0000 	mov.w	r0, #0
  402cfe:	4770      	bx	lr
  402d00:	f103 33ff 	add.w	r3, r3, #4294967295
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402d04:	6e91      	ldr	r1, [r2, #104]	; 0x68
  402d06:	f011 0f08 	tst.w	r1, #8
  402d0a:	d013      	beq.n	402d34 <pmc_switch_mck_to_pllack+0x94>
  402d0c:	e009      	b.n	402d22 <pmc_switch_mck_to_pllack+0x82>
  402d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402d16:	f2c4 020e 	movt	r2, #16398	; 0x400e
  402d1a:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402d1c:	f010 0f08 	tst.w	r0, #8
  402d20:	d0ee      	beq.n	402d00 <pmc_switch_mck_to_pllack+0x60>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402d22:	f04f 0000 	mov.w	r0, #0
  402d26:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402d28:	f04f 0001 	mov.w	r0, #1
  402d2c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402d2e:	f04f 0001 	mov.w	r0, #1
		}
	}

	return 0;
}
  402d32:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402d34:	3b01      	subs	r3, #1
  402d36:	d1f0      	bne.n	402d1a <pmc_switch_mck_to_pllack+0x7a>
  402d38:	e7f9      	b.n	402d2e <pmc_switch_mck_to_pllack+0x8e>
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402d3a:	1e58      	subs	r0, r3, #1
  402d3c:	d1cb      	bne.n	402cd6 <pmc_switch_mck_to_pllack+0x36>
  402d3e:	e7f3      	b.n	402d28 <pmc_switch_mck_to_pllack+0x88>

00402d40 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402d40:	b188      	cbz	r0, 402d66 <pmc_switch_mainck_to_xtal+0x26>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402d46:	f2c4 010e 	movt	r1, #16398	; 0x400e
  402d4a:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402d4c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  402d50:	f6cf 62c8 	movt	r2, #65224	; 0xfec8
  402d54:	4002      	ands	r2, r0
  402d56:	f04f 0302 	mov.w	r3, #2
  402d5a:	f2c0 1337 	movt	r3, #311	; 0x137
  402d5e:	ea42 0003 	orr.w	r0, r2, r3
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402d62:	6208      	str	r0, [r1, #32]
  402d64:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402d6a:	f2c4 030e 	movt	r3, #16398	; 0x400e
  402d6e:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402d70:	f422 105c 	bic.w	r0, r2, #3604480	; 0x370000
  402d74:	f020 0203 	bic.w	r2, r0, #3
  402d78:	f442 105c 	orr.w	r0, r2, #3604480	; 0x370000
  402d7c:	f040 0201 	orr.w	r2, r0, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402d80:	ea4f 6101 	mov.w	r1, r1, lsl #24
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402d84:	ea42 4011 	orr.w	r0, r2, r1, lsr #16
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402d88:	6218      	str	r0, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402d8e:	f2c4 020e 	movt	r2, #16398	; 0x400e
  402d92:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402d94:	f013 0f01 	tst.w	r3, #1
  402d98:	d0fb      	beq.n	402d92 <pmc_switch_mainck_to_xtal+0x52>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402d9e:	f2c4 010e 	movt	r1, #16398	; 0x400e
  402da2:	6a08      	ldr	r0, [r1, #32]
  402da4:	f040 729b 	orr.w	r2, r0, #20316160	; 0x1360000
  402da8:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
  402dac:	620b      	str	r3, [r1, #32]
  402dae:	4770      	bx	lr

00402db0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402db4:	f2c4 030e 	movt	r3, #16398	; 0x400e
  402db8:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402dba:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402dbe:	4770      	bx	lr

00402dc0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402dc4:	f2c4 030e 	movt	r3, #16398	; 0x400e
  402dc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402dcc:	629a      	str	r2, [r3, #40]	; 0x28
  402dce:	4770      	bx	lr

00402dd0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402dd4:	f2c4 030e 	movt	r3, #16398	; 0x400e
  402dd8:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402dda:	f000 0002 	and.w	r0, r0, #2
  402dde:	4770      	bx	lr

00402de0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402de0:	2822      	cmp	r0, #34	; 0x22
  402de2:	d835      	bhi.n	402e50 <pmc_enable_periph_clk+0x70>
		return 1;
	}

	if (ul_id < 32) {
  402de4:	281f      	cmp	r0, #31
  402de6:	d817      	bhi.n	402e18 <pmc_enable_periph_clk+0x38>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  402dec:	f2c4 010e 	movt	r1, #16398	; 0x400e
  402df0:	698a      	ldr	r2, [r1, #24]
  402df2:	f04f 0301 	mov.w	r3, #1
  402df6:	fa03 f300 	lsl.w	r3, r3, r0
  402dfa:	401a      	ands	r2, r3
  402dfc:	4293      	cmp	r3, r2
  402dfe:	d02a      	beq.n	402e56 <pmc_enable_periph_clk+0x76>
			PMC->PMC_PCER0 = 1 << ul_id;
  402e00:	f04f 0101 	mov.w	r1, #1
  402e04:	fa01 f000 	lsl.w	r0, r1, r0
  402e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402e0c:	f2c4 020e 	movt	r2, #16398	; 0x400e
  402e10:	6110      	str	r0, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402e12:	f04f 0000 	mov.w	r0, #0
  402e16:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402e1c:	f2c4 030e 	movt	r3, #16398	; 0x400e
  402e20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CP)
	} else {
		ul_id -= 32;
  402e24:	f1a0 0020 	sub.w	r0, r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402e28:	f04f 0101 	mov.w	r1, #1
  402e2c:	fa01 f100 	lsl.w	r1, r1, r0
  402e30:	400a      	ands	r2, r1
  402e32:	4291      	cmp	r1, r2
  402e34:	d012      	beq.n	402e5c <pmc_enable_periph_clk+0x7c>
			PMC->PMC_PCER1 = 1 << ul_id;
  402e36:	f04f 0301 	mov.w	r3, #1
  402e3a:	fa03 f000 	lsl.w	r0, r3, r0
  402e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402e42:	f2c4 020e 	movt	r2, #16398	; 0x400e
  402e46:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402e4a:	f04f 0000 	mov.w	r0, #0
  402e4e:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402e50:	f04f 0001 	mov.w	r0, #1
  402e54:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402e56:	f04f 0000 	mov.w	r0, #0
  402e5a:	4770      	bx	lr
  402e5c:	f04f 0000 	mov.w	r0, #0
}
  402e60:	4770      	bx	lr
  402e62:	bf00      	nop

00402e64 <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  402e64:	b121      	cbz	r1, 402e70 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  402e66:	6842      	ldr	r2, [r0, #4]
  402e68:	f042 0301 	orr.w	r3, r2, #1
  402e6c:	6043      	str	r3, [r0, #4]
  402e6e:	4770      	bx	lr
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  402e70:	6843      	ldr	r3, [r0, #4]
  402e72:	f023 0101 	bic.w	r1, r3, #1
  402e76:	6041      	str	r1, [r0, #4]
  402e78:	4770      	bx	lr
  402e7a:	bf00      	nop

00402e7c <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  402e7c:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  402e7e:	6884      	ldr	r4, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  402e80:	6885      	ldr	r5, [r0, #8]
  402e82:	42ac      	cmp	r4, r5
  402e84:	d003      	beq.n	402e8e <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  402e86:	6884      	ldr	r4, [r0, #8]
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
	while (ul_time != p_rtc->RTC_TIMR) {
  402e88:	6885      	ldr	r5, [r0, #8]
  402e8a:	42a5      	cmp	r5, r4
  402e8c:	d1fb      	bne.n	402e86 <rtc_get_time+0xa>
		ul_time = p_rtc->RTC_TIMR;
	}

	/* Hour */
	if (pul_hour) {
  402e8e:	b171      	cbz	r1, 402eae <rtc_get_time+0x32>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
  402e90:	f404 107c 	and.w	r0, r4, #4128768	; 0x3f0000
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402e94:	ea4f 5510 	mov.w	r5, r0, lsr #20
  402e98:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402e9c:	f3c0 4003 	ubfx	r0, r0, #16, #4
  402ea0:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  402ea4:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  402ea8:	bf18      	it	ne
  402eaa:	300c      	addne	r0, #12
  402eac:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  402eae:	b152      	cbz	r2, 402ec6 <rtc_get_time+0x4a>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
  402eb0:	f404 41fe 	and.w	r1, r4, #32512	; 0x7f00
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  402eb4:	ea4f 3011 	mov.w	r0, r1, lsr #12
  402eb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ebc:	f3c1 2103 	ubfx	r1, r1, #8, #4
  402ec0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
  402ec4:	6010      	str	r0, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  402ec6:	b143      	cbz	r3, 402eda <rtc_get_time+0x5e>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402ec8:	f3c4 1202 	ubfx	r2, r4, #4, #3
  402ecc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402ed0:	f004 040f 	and.w	r4, r4, #15
  402ed4:	eb04 0041 	add.w	r0, r4, r1, lsl #1
  402ed8:	6018      	str	r0, [r3, #0]
	}
}
  402eda:	bc30      	pop	{r4, r5}
  402edc:	4770      	bx	lr
  402ede:	bf00      	nop

00402ee0 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  402ee0:	b4f0      	push	{r4, r5, r6, r7}
  402ee2:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  402ee4:	68c4      	ldr	r4, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  402ee6:	68c5      	ldr	r5, [r0, #12]
  402ee8:	42ac      	cmp	r4, r5
  402eea:	d003      	beq.n	402ef4 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  402eec:	68c4      	ldr	r4, [r0, #12]
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
	while (ul_date != p_rtc->RTC_CALR) {
  402eee:	68c5      	ldr	r5, [r0, #12]
  402ef0:	42a5      	cmp	r5, r4
  402ef2:	d1fb      	bne.n	402eec <rtc_get_date+0xc>
		ul_date = p_rtc->RTC_CALR;
	}

	/* Retrieve year */
	if (pul_year) {
  402ef4:	b1b1      	cbz	r1, 402f24 <rtc_get_date+0x44>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
  402ef6:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402efa:	ea4f 3510 	mov.w	r5, r0, lsr #12
  402efe:	eb05 0785 	add.w	r7, r5, r5, lsl #2
  402f02:	f3c0 2003 	ubfx	r0, r0, #8, #4
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402f06:	eb00 0547 	add.w	r5, r0, r7, lsl #1
	}

	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402f0a:	f3c4 1702 	ubfx	r7, r4, #4, #3
  402f0e:	eb07 0087 	add.w	r0, r7, r7, lsl #2
  402f12:	f004 070f 	and.w	r7, r4, #15
  402f16:	eb07 0040 	add.w	r0, r7, r0, lsl #1
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402f1a:	f04f 0764 	mov.w	r7, #100	; 0x64
  402f1e:	fb07 5000 	mla	r0, r7, r0, r5
	/* Retrieve year */
	if (pul_year) {
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  402f22:	6008      	str	r0, [r1, #0]
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
	}

	/* Retrieve month */
	if (pul_month) {
  402f24:	b15a      	cbz	r2, 402f3e <rtc_get_date+0x5e>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
  402f26:	f404 11f8 	and.w	r1, r4, #2031616	; 0x1f0000
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402f2a:	ea4f 5011 	mov.w	r0, r1, lsr #20
  402f2e:	ea4f 0580 	mov.w	r5, r0, lsl #2
  402f32:	1828      	adds	r0, r5, r0
  402f34:	f3c1 4103 	ubfx	r1, r1, #16, #4
  402f38:	eb01 0040 	add.w	r0, r1, r0, lsl #1
  402f3c:	6010      	str	r0, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  402f3e:	b153      	cbz	r3, 402f56 <rtc_get_date+0x76>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
  402f40:	f004 527c 	and.w	r2, r4, #1056964608	; 0x3f000000
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  402f44:	ea4f 7112 	mov.w	r1, r2, lsr #28
  402f48:	eb01 0081 	add.w	r0, r1, r1, lsl #2
  402f4c:	f3c2 6203 	ubfx	r2, r2, #24, #4
  402f50:	eb02 0140 	add.w	r1, r2, r0, lsl #1
  402f54:	6019      	str	r1, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  402f56:	b116      	cbz	r6, 402f5e <rtc_get_date+0x7e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  402f58:	f3c4 5442 	ubfx	r4, r4, #21, #3
  402f5c:	6034      	str	r4, [r6, #0]
	}
}
  402f5e:	bcf0      	pop	{r4, r5, r6, r7}
  402f60:	4770      	bx	lr
  402f62:	bf00      	nop

00402f64 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402f64:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402f66:	f04f 03ac 	mov.w	r3, #172	; 0xac
  402f6a:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402f6c:	680a      	ldr	r2, [r1, #0]
  402f6e:	684c      	ldr	r4, [r1, #4]
  402f70:	fbb2 f3f4 	udiv	r3, r2, r4
  402f74:	ea4f 1313 	mov.w	r3, r3, lsr #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402f78:	f103 34ff 	add.w	r4, r3, #4294967295
  402f7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402f80:	4294      	cmp	r4, r2
  402f82:	d80c      	bhi.n	402f9e <uart_init+0x3a>
		return 1;

	p_uart->UART_BRGR = cd;
  402f84:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402f86:	6889      	ldr	r1, [r1, #8]
  402f88:	6041      	str	r1, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  402f8a:	f240 2302 	movw	r3, #514	; 0x202
  402f8e:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402f92:	f04f 0250 	mov.w	r2, #80	; 0x50
  402f96:	6002      	str	r2, [r0, #0]

	return 0;
  402f98:	f04f 0000 	mov.w	r0, #0
  402f9c:	e001      	b.n	402fa2 <uart_init+0x3e>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402f9e:	f04f 0001 	mov.w	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402fa2:	bc10      	pop	{r4}
  402fa4:	4770      	bx	lr
  402fa6:	bf00      	nop

00402fa8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402fa8:	6943      	ldr	r3, [r0, #20]
  402faa:	f013 0f02 	tst.w	r3, #2
  402fae:	d003      	beq.n	402fb8 <uart_write+0x10>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402fb0:	61c1      	str	r1, [r0, #28]
	return 0;
  402fb2:	f04f 0000 	mov.w	r0, #0
  402fb6:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402fb8:	f04f 0001 	mov.w	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402fbc:	4770      	bx	lr
  402fbe:	bf00      	nop

00402fc0 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402fc0:	6943      	ldr	r3, [r0, #20]
  402fc2:	f013 0f01 	tst.w	r3, #1
  402fc6:	d004      	beq.n	402fd2 <uart_read+0x12>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402fc8:	6980      	ldr	r0, [r0, #24]
  402fca:	7008      	strb	r0, [r1, #0]
	return 0;
  402fcc:	f04f 0000 	mov.w	r0, #0
  402fd0:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402fd2:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402fd6:	4770      	bx	lr

00402fd8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402fd8:	6943      	ldr	r3, [r0, #20]
  402fda:	f013 0f02 	tst.w	r3, #2
  402fde:	d007      	beq.n	402ff0 <usart_write+0x18>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  402fe0:	ea4f 51c1 	mov.w	r1, r1, lsl #23
  402fe4:	ea4f 52d1 	mov.w	r2, r1, lsr #23
  402fe8:	61c2      	str	r2, [r0, #28]
	return 0;
  402fea:	f04f 0000 	mov.w	r0, #0
  402fee:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  402ff0:	f04f 0001 	mov.w	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  402ff4:	4770      	bx	lr
  402ff6:	bf00      	nop

00402ff8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402ff8:	6943      	ldr	r3, [r0, #20]
  402ffa:	f013 0f01 	tst.w	r3, #1
  402ffe:	d008      	beq.n	403012 <usart_read+0x1a>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403000:	6980      	ldr	r0, [r0, #24]
  403002:	ea4f 52c0 	mov.w	r2, r0, lsl #23
  403006:	ea4f 53d2 	mov.w	r3, r2, lsr #23
  40300a:	600b      	str	r3, [r1, #0]

	return 0;
  40300c:	f04f 0000 	mov.w	r0, #0
  403010:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  403012:	f04f 0001 	mov.w	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  403016:	4770      	bx	lr

00403018 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403018:	e7fe      	b.n	403018 <Dummy_Handler>
  40301a:	bf00      	nop

0040301c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40301c:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40301e:	4b50      	ldr	r3, [pc, #320]	; (403160 <Reset_Handler+0x144>)
  403020:	4a50      	ldr	r2, [pc, #320]	; (403164 <Reset_Handler+0x148>)
  403022:	429a      	cmp	r2, r3
  403024:	d929      	bls.n	40307a <Reset_Handler+0x5e>
		for (; pDest < &_erelocate;) {
  403026:	4d50      	ldr	r5, [pc, #320]	; (403168 <Reset_Handler+0x14c>)
  403028:	4b4d      	ldr	r3, [pc, #308]	; (403160 <Reset_Handler+0x144>)
  40302a:	42ab      	cmp	r3, r5
  40302c:	d248      	bcs.n	4030c0 <Reset_Handler+0xa4>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
  40302e:	f103 0004 	add.w	r0, r3, #4
  403032:	4a4e      	ldr	r2, [pc, #312]	; (40316c <Reset_Handler+0x150>)
  403034:	1a11      	subs	r1, r2, r0
  403036:	f021 0403 	bic.w	r4, r1, #3
  40303a:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  40303e:	f240 0200 	movw	r2, #0
  403042:	f2c2 0200 	movt	r2, #8192	; 0x2000
  403046:	f649 0160 	movw	r1, #39008	; 0x9860
  40304a:	f2c0 0140 	movt	r1, #64	; 0x40
  40304e:	f104 0004 	add.w	r0, r4, #4
  403052:	f3c4 0480 	ubfx	r4, r4, #2, #1
  403056:	585d      	ldr	r5, [r3, r1]
  403058:	509d      	str	r5, [r3, r2]
  40305a:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40305e:	4283      	cmp	r3, r0
  403060:	d16d      	bne.n	40313e <Reset_Handler+0x122>
  403062:	e02d      	b.n	4030c0 <Reset_Handler+0xa4>
			*pDest++ = *pSrc++;
  403064:	585d      	ldr	r5, [r3, r1]
  403066:	509d      	str	r5, [r3, r2]
  403068:	f103 0304 	add.w	r3, r3, #4
  40306c:	585c      	ldr	r4, [r3, r1]
  40306e:	509c      	str	r4, [r3, r2]
  403070:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  403074:	4283      	cmp	r3, r0
  403076:	d1f5      	bne.n	403064 <Reset_Handler+0x48>
  403078:	e022      	b.n	4030c0 <Reset_Handler+0xa4>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40307a:	4839      	ldr	r0, [pc, #228]	; (403160 <Reset_Handler+0x144>)
  40307c:	4939      	ldr	r1, [pc, #228]	; (403164 <Reset_Handler+0x148>)
  40307e:	4281      	cmp	r1, r0
  403080:	d21e      	bcs.n	4030c0 <Reset_Handler+0xa4>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  403082:	f640 1500 	movw	r5, #2304	; 0x900
  403086:	f2c2 0500 	movt	r5, #8192	; 0x2000
  40308a:	f240 0400 	movw	r4, #0
  40308e:	f2c2 0400 	movt	r4, #8192	; 0x2000
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  403092:	4b37      	ldr	r3, [pc, #220]	; (403170 <Reset_Handler+0x154>)
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  403094:	1b2a      	subs	r2, r5, r4
  403096:	d013      	beq.n	4030c0 <Reset_Handler+0xa4>
  403098:	f1a2 0004 	sub.w	r0, r2, #4
  40309c:	f3c0 0180 	ubfx	r1, r0, #2, #1
			*pDest-- = *pSrc--;
  4030a0:	589c      	ldr	r4, [r3, r2]
  4030a2:	f845 4d04 	str.w	r4, [r5, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4030a6:	3a04      	subs	r2, #4
  4030a8:	d152      	bne.n	403150 <Reset_Handler+0x134>
  4030aa:	e009      	b.n	4030c0 <Reset_Handler+0xa4>
			*pDest-- = *pSrc--;
  4030ac:	5899      	ldr	r1, [r3, r2]
  4030ae:	f845 1d04 	str.w	r1, [r5, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4030b2:	f1a2 0204 	sub.w	r2, r2, #4
			*pDest-- = *pSrc--;
  4030b6:	589c      	ldr	r4, [r3, r2]
  4030b8:	f845 4d04 	str.w	r4, [r5, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4030bc:	3a04      	subs	r2, #4
  4030be:	d1f5      	bne.n	4030ac <Reset_Handler+0x90>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4030c0:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4030c2:	4b2c      	ldr	r3, [pc, #176]	; (403174 <Reset_Handler+0x158>)
  4030c4:	4a2c      	ldr	r2, [pc, #176]	; (403178 <Reset_Handler+0x15c>)
  4030c6:	429a      	cmp	r2, r3
  4030c8:	d21e      	bcs.n	403108 <Reset_Handler+0xec>
  4030ca:	f1a2 0504 	sub.w	r5, r2, #4

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
  4030ce:	492b      	ldr	r1, [pc, #172]	; (40317c <Reset_Handler+0x160>)
  4030d0:	1b48      	subs	r0, r1, r5
  4030d2:	f020 0403 	bic.w	r4, r0, #3
  4030d6:	f640 1300 	movw	r3, #2304	; 0x900
  4030da:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4030de:	18e2      	adds	r2, r4, r3
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  4030e0:	f04f 0100 	mov.w	r1, #0
  4030e4:	1b50      	subs	r0, r2, r5
  4030e6:	f1a0 0004 	sub.w	r0, r0, #4
  4030ea:	f3c0 0480 	ubfx	r4, r0, #2, #1
  4030ee:	f845 1f04 	str.w	r1, [r5, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4030f2:	4295      	cmp	r5, r2
  4030f4:	d11c      	bne.n	403130 <Reset_Handler+0x114>
  4030f6:	e007      	b.n	403108 <Reset_Handler+0xec>
  4030f8:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
  4030fc:	6069      	str	r1, [r5, #4]
  4030fe:	f105 0508 	add.w	r5, r5, #8
  403102:	6059      	str	r1, [r3, #4]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403104:	4295      	cmp	r5, r2
  403106:	d1f7      	bne.n	4030f8 <Reset_Handler+0xdc>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  403108:	f44f 456d 	mov.w	r5, #60672	; 0xed00
  40310c:	f2ce 0500 	movt	r5, #57344	; 0xe000
  403110:	f240 0200 	movw	r2, #0
  403114:	f2c0 0240 	movt	r2, #64	; 0x40
  403118:	60aa      	str	r2, [r5, #8]

	/* Initialize the C library */
	__libc_init_array();
  40311a:	f246 118d 	movw	r1, #24973	; 0x618d
  40311e:	f2c0 0140 	movt	r1, #64	; 0x40
  403122:	4788      	blx	r1

	/* Branch to main function */
	main();
  403124:	f645 3015 	movw	r0, #23317	; 0x5b15
  403128:	f2c0 0040 	movt	r0, #64	; 0x40
  40312c:	4780      	blx	r0
  40312e:	e7fe      	b.n	40312e <Reset_Handler+0x112>
  403130:	2c00      	cmp	r4, #0
  403132:	d0e1      	beq.n	4030f8 <Reset_Handler+0xdc>
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  403134:	f845 1f04 	str.w	r1, [r5, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403138:	4295      	cmp	r5, r2
  40313a:	d1dd      	bne.n	4030f8 <Reset_Handler+0xdc>
  40313c:	e7e4      	b.n	403108 <Reset_Handler+0xec>
  40313e:	2c00      	cmp	r4, #0
  403140:	d090      	beq.n	403064 <Reset_Handler+0x48>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  403142:	585c      	ldr	r4, [r3, r1]
  403144:	509c      	str	r4, [r3, r2]
  403146:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  40314a:	4283      	cmp	r3, r0
  40314c:	d18a      	bne.n	403064 <Reset_Handler+0x48>
  40314e:	e7b7      	b.n	4030c0 <Reset_Handler+0xa4>
  403150:	2900      	cmp	r1, #0
  403152:	d0ab      	beq.n	4030ac <Reset_Handler+0x90>
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
			*pDest-- = *pSrc--;
  403154:	5898      	ldr	r0, [r3, r2]
  403156:	f845 0d04 	str.w	r0, [r5, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40315a:	3a04      	subs	r2, #4
  40315c:	d1a6      	bne.n	4030ac <Reset_Handler+0x90>
  40315e:	e7af      	b.n	4030c0 <Reset_Handler+0xa4>
  403160:	20000000 	.word	0x20000000
  403164:	00409860 	.word	0x00409860
  403168:	20000900 	.word	0x20000900
  40316c:	20000903 	.word	0x20000903
  403170:	0040985c 	.word	0x0040985c
  403174:	20000dec 	.word	0x20000dec
  403178:	20000900 	.word	0x20000900
  40317c:	20000de7 	.word	0x20000de7

00403180 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403180:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403184:	f2c4 030e 	movt	r3, #16398	; 0x400e
  403188:	6b18      	ldr	r0, [r3, #48]	; 0x30
  40318a:	f000 0303 	and.w	r3, r0, #3
  40318e:	2b03      	cmp	r3, #3
  403190:	f200 80a9 	bhi.w	4032e6 <SystemCoreClockUpdate+0x166>
  403194:	e8df f003 	tbb	[pc, r3]
  403198:	4f4f1402 	.word	0x4f4f1402
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40319c:	f241 4010 	movw	r0, #5136	; 0x1410
  4031a0:	f2c4 000e 	movt	r0, #16398	; 0x400e
  4031a4:	6941      	ldr	r1, [r0, #20]
  4031a6:	f011 0f80 	tst.w	r1, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4031aa:	f240 033c 	movw	r3, #60	; 0x3c
  4031ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4031b2:	bf14      	ite	ne
  4031b4:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4031b8:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4031bc:	601a      	str	r2, [r3, #0]
  4031be:	e092      	b.n	4032e6 <SystemCoreClockUpdate+0x166>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4031c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4031c4:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4031c8:	6a18      	ldr	r0, [r3, #32]
  4031ca:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  4031ce:	d009      	beq.n	4031e4 <SystemCoreClockUpdate+0x64>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4031d0:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  4031d4:	f2c0 03b7 	movt	r3, #183	; 0xb7
  4031d8:	f240 023c 	movw	r2, #60	; 0x3c
  4031dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4031e0:	6013      	str	r3, [r2, #0]
  4031e2:	e080      	b.n	4032e6 <SystemCoreClockUpdate+0x166>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4031e4:	f44f 6110 	mov.w	r1, #2304	; 0x900
  4031e8:	f2c0 013d 	movt	r1, #61	; 0x3d
  4031ec:	f240 023c 	movw	r2, #60	; 0x3c
  4031f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4031f4:	6011      	str	r1, [r2, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4031f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4031fa:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4031fe:	6a18      	ldr	r0, [r3, #32]
  403200:	f000 0170 	and.w	r1, r0, #112	; 0x70
  403204:	2910      	cmp	r1, #16
  403206:	d002      	beq.n	40320e <SystemCoreClockUpdate+0x8e>
  403208:	2920      	cmp	r1, #32
  40320a:	d16c      	bne.n	4032e6 <SystemCoreClockUpdate+0x166>
  40320c:	e009      	b.n	403222 <SystemCoreClockUpdate+0xa2>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40320e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
  403212:	f2c0 007a 	movt	r0, #122	; 0x7a
  403216:	f240 013c 	movw	r1, #60	; 0x3c
  40321a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  40321e:	6008      	str	r0, [r1, #0]
			break;
  403220:	e061      	b.n	4032e6 <SystemCoreClockUpdate+0x166>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403222:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  403226:	f2c0 03b7 	movt	r3, #183	; 0xb7
  40322a:	f240 023c 	movw	r2, #60	; 0x3c
  40322e:	f2c2 0200 	movt	r2, #8192	; 0x2000
  403232:	6013      	str	r3, [r2, #0]
			break;
  403234:	e057      	b.n	4032e6 <SystemCoreClockUpdate+0x166>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403236:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40323a:	f2c4 020e 	movt	r2, #16398	; 0x400e
  40323e:	6a13      	ldr	r3, [r2, #32]
  403240:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403244:	d009      	beq.n	40325a <SystemCoreClockUpdate+0xda>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403246:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  40324a:	f2c0 03b7 	movt	r3, #183	; 0xb7
  40324e:	f240 023c 	movw	r2, #60	; 0x3c
  403252:	f2c2 0200 	movt	r2, #8192	; 0x2000
  403256:	6013      	str	r3, [r2, #0]
  403258:	e027      	b.n	4032aa <SystemCoreClockUpdate+0x12a>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40325a:	f44f 6310 	mov.w	r3, #2304	; 0x900
  40325e:	f2c0 033d 	movt	r3, #61	; 0x3d
  403262:	f240 023c 	movw	r2, #60	; 0x3c
  403266:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40326a:	6013      	str	r3, [r2, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40326c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403270:	f2c4 030e 	movt	r3, #16398	; 0x400e
  403274:	6a1a      	ldr	r2, [r3, #32]
  403276:	f002 0370 	and.w	r3, r2, #112	; 0x70
  40327a:	2b10      	cmp	r3, #16
  40327c:	d002      	beq.n	403284 <SystemCoreClockUpdate+0x104>
  40327e:	2b20      	cmp	r3, #32
  403280:	d113      	bne.n	4032aa <SystemCoreClockUpdate+0x12a>
  403282:	e009      	b.n	403298 <SystemCoreClockUpdate+0x118>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403284:	f44f 5390 	mov.w	r3, #4608	; 0x1200
  403288:	f2c0 037a 	movt	r3, #122	; 0x7a
  40328c:	f240 023c 	movw	r2, #60	; 0x3c
  403290:	f2c2 0200 	movt	r2, #8192	; 0x2000
  403294:	6013      	str	r3, [r2, #0]
					break;
  403296:	e008      	b.n	4032aa <SystemCoreClockUpdate+0x12a>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403298:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
  40329c:	f2c0 03b7 	movt	r3, #183	; 0xb7
  4032a0:	f240 023c 	movw	r2, #60	; 0x3c
  4032a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
  4032a8:	6013      	str	r3, [r2, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4032aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4032ae:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4032b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4032b4:	f002 0303 	and.w	r3, r2, #3
  4032b8:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4032ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4032be:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4032c2:	bf07      	ittee	eq
  4032c4:	6a90      	ldreq	r0, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4032c6:	6a91      	ldreq	r1, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4032c8:	6ad0      	ldrne	r0, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4032ca:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
  4032cc:	f240 033c 	movw	r3, #60	; 0x3c
  4032d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4032d4:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4032d8:	681a      	ldr	r2, [r3, #0]
  4032da:	fb00 2002 	mla	r0, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4032de:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4032e0:	fbb0 f2f1 	udiv	r2, r0, r1
  4032e4:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4032e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4032ea:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4032ee:	6b10      	ldr	r0, [r2, #48]	; 0x30
  4032f0:	f000 0170 	and.w	r1, r0, #112	; 0x70
  4032f4:	2970      	cmp	r1, #112	; 0x70
  4032f6:	d10e      	bne.n	403316 <SystemCoreClockUpdate+0x196>
		SystemCoreClock /= 3U;
  4032f8:	f240 033c 	movw	r3, #60	; 0x3c
  4032fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403300:	6818      	ldr	r0, [r3, #0]
  403302:	f64a 22ab 	movw	r2, #43691	; 0xaaab
  403306:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
  40330a:	fba2 0100 	umull	r0, r1, r2, r0
  40330e:	ea4f 0051 	mov.w	r0, r1, lsr #1
  403312:	6018      	str	r0, [r3, #0]
  403314:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403316:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40331a:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40331e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  403320:	f240 003c 	movw	r0, #60	; 0x3c
  403324:	f2c2 0000 	movt	r0, #8192	; 0x2000
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403328:	f3c2 1102 	ubfx	r1, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  40332c:	6803      	ldr	r3, [r0, #0]
  40332e:	fa23 f301 	lsr.w	r3, r3, r1
  403332:	6003      	str	r3, [r0, #0]
  403334:	4770      	bx	lr
  403336:	bf00      	nop

00403338 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403338:	f642 43ff 	movw	r3, #11519	; 0x2cff
  40333c:	f2c0 1331 	movt	r3, #305	; 0x131
  403340:	4298      	cmp	r0, r3
  403342:	d80c      	bhi.n	40335e <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403344:	f44f 6120 	mov.w	r1, #2560	; 0xa00
  403348:	f2c4 010e 	movt	r1, #16398	; 0x400e
  40334c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  403350:	6008      	str	r0, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403352:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  403356:	f2c4 030e 	movt	r3, #16398	; 0x400e
  40335a:	6018      	str	r0, [r3, #0]
  40335c:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40335e:	f645 11ff 	movw	r1, #23039	; 0x59ff
  403362:	f2c0 2162 	movt	r1, #610	; 0x262
  403366:	4288      	cmp	r0, r1
  403368:	d80e      	bhi.n	403388 <system_init_flash+0x50>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40336a:	f44f 6020 	mov.w	r0, #2560	; 0xa00
  40336e:	f2c4 000e 	movt	r0, #16398	; 0x400e
  403372:	f44f 7380 	mov.w	r3, #256	; 0x100
  403376:	f2c0 4300 	movt	r3, #1024	; 0x400
  40337a:	6003      	str	r3, [r0, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40337c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  403380:	f2c4 020e 	movt	r2, #16398	; 0x400e
  403384:	6013      	str	r3, [r2, #0]
  403386:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403388:	f248 62ff 	movw	r2, #34559	; 0x86ff
  40338c:	f2c0 3293 	movt	r2, #915	; 0x393
  403390:	4290      	cmp	r0, r2
  403392:	d80e      	bhi.n	4033b2 <system_init_flash+0x7a>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403394:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  403398:	f2c4 020e 	movt	r2, #16398	; 0x400e
  40339c:	f44f 7300 	mov.w	r3, #512	; 0x200
  4033a0:	f2c0 4300 	movt	r3, #1024	; 0x400
  4033a4:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4033a6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  4033aa:	f2c4 010e 	movt	r1, #16398	; 0x400e
  4033ae:	600b      	str	r3, [r1, #0]
  4033b0:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4033b2:	f24b 33ff 	movw	r3, #46079	; 0xb3ff
  4033b6:	f2c0 43c4 	movt	r3, #1220	; 0x4c4
  4033ba:	4298      	cmp	r0, r3
  4033bc:	d80e      	bhi.n	4033dc <system_init_flash+0xa4>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4033be:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  4033c2:	f2c4 020e 	movt	r2, #16398	; 0x400e
  4033c6:	f44f 7140 	mov.w	r1, #768	; 0x300
  4033ca:	f2c0 4100 	movt	r1, #1024	; 0x400
  4033ce:	6011      	str	r1, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4033d0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  4033d4:	f2c4 000e 	movt	r0, #16398	; 0x400e
  4033d8:	6001      	str	r1, [r0, #0]
  4033da:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4033dc:	f24e 01ff 	movw	r1, #57599	; 0xe0ff
  4033e0:	f2c0 51f5 	movt	r1, #1525	; 0x5f5
  4033e4:	4288      	cmp	r0, r1
  4033e6:	d80c      	bhi.n	403402 <system_init_flash+0xca>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4033e8:	f44f 6120 	mov.w	r1, #2560	; 0xa00
  4033ec:	f2c4 010e 	movt	r1, #16398	; 0x400e
  4033f0:	f04f 2004 	mov.w	r0, #67109888	; 0x4000400
  4033f4:	6008      	str	r0, [r1, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4033f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  4033fa:	f2c4 030e 	movt	r3, #16398	; 0x400e
  4033fe:	6018      	str	r0, [r3, #0]
  403400:	4770      	bx	lr
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403402:	f44f 6020 	mov.w	r0, #2560	; 0xa00
  403406:	f2c4 000e 	movt	r0, #16398	; 0x400e
  40340a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  40340e:	f2c0 4300 	movt	r3, #1024	; 0x400
  403412:	6003      	str	r3, [r0, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403414:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  403418:	f2c4 020e 	movt	r2, #16398	; 0x400e
  40341c:	6013      	str	r3, [r2, #0]
  40341e:	4770      	bx	lr

00403420 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403420:	f640 5368 	movw	r3, #3432	; 0xd68
  403424:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403428:	6819      	ldr	r1, [r3, #0]
  40342a:	b941      	cbnz	r1, 40343e <_sbrk+0x1e>
		heap = (unsigned char *)&_end;
  40342c:	f640 5368 	movw	r3, #3432	; 0xd68
  403430:	f2c2 0300 	movt	r3, #8192	; 0x2000
  403434:	f643 52f0 	movw	r2, #15856	; 0x3df0
  403438:	f2c2 0200 	movt	r2, #8192	; 0x2000
  40343c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40343e:	f640 5168 	movw	r1, #3432	; 0xd68
  403442:	f2c2 0100 	movt	r1, #8192	; 0x2000
  403446:	680b      	ldr	r3, [r1, #0]

	if (((int)prev_heap + incr) > ramend) {
  403448:	1818      	adds	r0, r3, r0
  40344a:	f647 72fc 	movw	r2, #32764	; 0x7ffc
  40344e:	f2c2 0202 	movt	r2, #8194	; 0x2002
  403452:	4282      	cmp	r2, r0
  403454:	db06      	blt.n	403464 <_sbrk+0x44>
		return (caddr_t) -1;	
	}

	heap += incr;
  403456:	4601      	mov	r1, r0
  403458:	f640 5068 	movw	r0, #3432	; 0xd68
  40345c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  403460:	6001      	str	r1, [r0, #0]

	return (caddr_t) prev_heap;
  403462:	e001      	b.n	403468 <_sbrk+0x48>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403464:	f04f 33ff 	mov.w	r3, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403468:	4618      	mov	r0, r3
  40346a:	4770      	bx	lr

0040346c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40346c:	f04f 30ff 	mov.w	r0, #4294967295
  403470:	4770      	bx	lr
  403472:	bf00      	nop

00403474 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403478:	604b      	str	r3, [r1, #4]

	return 0;
}
  40347a:	f04f 0000 	mov.w	r0, #0
  40347e:	4770      	bx	lr

00403480 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403480:	f04f 0001 	mov.w	r0, #1
  403484:	4770      	bx	lr
  403486:	bf00      	nop

00403488 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403488:	f04f 0000 	mov.w	r0, #0
  40348c:	4770      	bx	lr
  40348e:	bf00      	nop

00403490 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
  403490:	b510      	push	{r4, lr}
  403492:	4604      	mov	r4, r0
	int i;
	Ctrl_status mem_status;

#if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S)
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  403494:	f44f 50a3 	mov.w	r0, #5216	; 0x1460
  403498:	f2c4 000e 	movt	r0, #16398	; 0x400e
  40349c:	f04f 0100 	mov.w	r1, #0
  4034a0:	f642 6365 	movw	r3, #11877	; 0x2e65
  4034a4:	f2c0 0340 	movt	r3, #64	; 0x40
  4034a8:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
  4034aa:	2c01      	cmp	r4, #1
  4034ac:	d81b      	bhi.n	4034e6 <disk_initialize+0x56>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4034ae:	4620      	mov	r0, r4
  4034b0:	f241 01f1 	movw	r1, #4337	; 0x10f1
  4034b4:	f2c0 0140 	movt	r1, #64	; 0x40
  4034b8:	4788      	blx	r1
		if (CTRL_BUSY != mem_status) {
  4034ba:	2803      	cmp	r0, #3
  4034bc:	d107      	bne.n	4034ce <disk_initialize+0x3e>
		return STA_NOINIT;
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
		mem_status = mem_test_unit_ready(drv);
  4034be:	4620      	mov	r0, r4
  4034c0:	f241 02f1 	movw	r2, #4337	; 0x10f1
  4034c4:	f2c0 0240 	movt	r2, #64	; 0x40
  4034c8:	4790      	blx	r2
		if (CTRL_BUSY != mem_status) {
  4034ca:	2803      	cmp	r0, #3
  4034cc:	d00e      	beq.n	4034ec <disk_initialize+0x5c>
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
  4034ce:	b980      	cbnz	r0, 4034f2 <disk_initialize+0x62>
		return STA_NOINIT;
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
  4034d0:	4620      	mov	r0, r4
  4034d2:	f241 132d 	movw	r3, #4397	; 0x112d
  4034d6:	f2c0 0340 	movt	r3, #64	; 0x40
  4034da:	4798      	blx	r3
		return STA_PROTECT;
  4034dc:	2800      	cmp	r0, #0
  4034de:	bf14      	ite	ne
  4034e0:	2004      	movne	r0, #4
  4034e2:	2000      	moveq	r0, #0
  4034e4:	bd10      	pop	{r4, pc}
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
  4034e6:	f04f 0001 	mov.w	r0, #1
  4034ea:	bd10      	pop	{r4, pc}
		if (CTRL_BUSY != mem_status) {
			break;
		}
	}
	if (mem_status != CTRL_GOOD) {
		return STA_NOINIT;
  4034ec:	f04f 0001 	mov.w	r0, #1
  4034f0:	bd10      	pop	{r4, pc}
  4034f2:	f04f 0001 	mov.w	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
  4034f6:	bd10      	pop	{r4, pc}

004034f8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
  4034f8:	b508      	push	{r3, lr}
	switch (mem_test_unit_ready(drv)) {
  4034fa:	f241 03f1 	movw	r3, #4337	; 0x10f1
  4034fe:	f2c0 0340 	movt	r3, #64	; 0x40
  403502:	4798      	blx	r3
  403504:	b120      	cbz	r0, 403510 <disk_status+0x18>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
  403506:	2802      	cmp	r0, #2
  403508:	bf0c      	ite	eq
  40350a:	2003      	moveq	r0, #3
  40350c:	2001      	movne	r0, #1
  40350e:	bd08      	pop	{r3, pc}
 */
DSTATUS disk_status(BYTE drv)
{
	switch (mem_test_unit_ready(drv)) {
	case CTRL_GOOD:
		return 0;
  403510:	f04f 0000 	mov.w	r0, #0
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
	default:
		return STA_NOINIT;
	}
}
  403514:	bd08      	pop	{r3, pc}
  403516:	bf00      	nop

00403518 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
  403518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40351c:	b085      	sub	sp, #20
  40351e:	4604      	mov	r4, r0
  403520:	460e      	mov	r6, r1
  403522:	4617      	mov	r7, r2
  403524:	461d      	mov	r5, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  403526:	f241 1221 	movw	r2, #4385	; 0x1121
  40352a:	f2c0 0240 	movt	r2, #64	; 0x40
  40352e:	4790      	blx	r2
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  403530:	4682      	mov	sl, r0
  403532:	2800      	cmp	r0, #0
  403534:	d035      	beq.n	4035a2 <disk_read+0x8a>
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  403536:	4620      	mov	r0, r4
  403538:	a903      	add	r1, sp, #12
  40353a:	f241 1309 	movw	r3, #4361	; 0x1109
  40353e:	f2c0 0340 	movt	r3, #64	; 0x40
  403542:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  403544:	46d0      	mov	r8, sl
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  403546:	fb0a 7005 	mla	r0, sl, r5, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
  40354a:	9903      	ldr	r1, [sp, #12]
  40354c:	fb01 a20a 	mla	r2, r1, sl, sl
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  403550:	4290      	cmp	r0, r2
  403552:	d829      	bhi.n	4035a8 <disk_read+0x90>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  403554:	46ab      	mov	fp, r5
  403556:	b355      	cbz	r5, 4035ae <disk_read+0x96>
 * \param sector Sector address (LBA).
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
  403558:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  40355c:	f241 1945 	movw	r9, #4421	; 0x1145
  403560:	f2c0 0940 	movt	r9, #64	; 0x40
  403564:	f105 33ff 	add.w	r3, r5, #4294967295
  403568:	f003 0001 	and.w	r0, r3, #1
  40356c:	9001      	str	r0, [sp, #4]
  40356e:	4620      	mov	r0, r4
  403570:	4639      	mov	r1, r7
  403572:	4632      	mov	r2, r6
  403574:	47c8      	blx	r9
  403576:	2800      	cmp	r0, #0
  403578:	d021      	beq.n	4035be <disk_read+0xa6>
  40357a:	e01b      	b.n	4035b4 <disk_read+0x9c>
  40357c:	4620      	mov	r0, r4
  40357e:	4639      	mov	r1, r7
  403580:	4632      	mov	r2, r6
  403582:	47c8      	blx	r9
  403584:	b9b0      	cbnz	r0, 4035b4 <disk_read+0x9c>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  403586:	f105 0501 	add.w	r5, r5, #1
  40358a:	4447      	add	r7, r8
  40358c:	4456      	add	r6, sl
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  40358e:	4620      	mov	r0, r4
  403590:	4639      	mov	r1, r7
  403592:	4632      	mov	r2, r6
  403594:	47c8      	blx	r9
  403596:	2800      	cmp	r0, #0
  403598:	d029      	beq.n	4035ee <disk_read+0xd6>
  40359a:	e00b      	b.n	4035b4 <disk_read+0x9c>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  40359c:	f04f 0000 	mov.w	r0, #0
  4035a0:	e00a      	b.n	4035b8 <disk_read+0xa0>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
  4035a2:	f04f 0001 	mov.w	r0, #1
  4035a6:	e007      	b.n	4035b8 <disk_read+0xa0>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  4035a8:	f04f 0004 	mov.w	r0, #4
  4035ac:	e004      	b.n	4035b8 <disk_read+0xa0>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  4035ae:	f04f 0000 	mov.w	r0, #0
  4035b2:	e001      	b.n	4035b8 <disk_read+0xa0>
	/* Read the data */
	for (i = 0; i < count; i++) {
		if (memory_2_ram(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  4035b4:	f04f 0001 	mov.w	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  4035b8:	b005      	add	sp, #20
  4035ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  4035be:	f04f 0500 	mov.w	r5, #0
  4035c2:	f105 0501 	add.w	r5, r5, #1
  4035c6:	4447      	add	r7, r8
  4035c8:	4456      	add	r6, sl
  4035ca:	455d      	cmp	r5, fp
  4035cc:	d2e6      	bcs.n	40359c <disk_read+0x84>
  4035ce:	9901      	ldr	r1, [sp, #4]
  4035d0:	2900      	cmp	r1, #0
  4035d2:	d0d3      	beq.n	40357c <disk_read+0x64>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
  4035d4:	4620      	mov	r0, r4
  4035d6:	4639      	mov	r1, r7
  4035d8:	4632      	mov	r2, r6
  4035da:	47c8      	blx	r9
  4035dc:	2800      	cmp	r0, #0
  4035de:	d1e9      	bne.n	4035b4 <disk_read+0x9c>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
  4035e0:	f105 0501 	add.w	r5, r5, #1
  4035e4:	4447      	add	r7, r8
  4035e6:	4456      	add	r6, sl
  4035e8:	455d      	cmp	r5, fp
  4035ea:	d3c7      	bcc.n	40357c <disk_read+0x64>
  4035ec:	e7d6      	b.n	40359c <disk_read+0x84>
  4035ee:	f105 0501 	add.w	r5, r5, #1
  4035f2:	4447      	add	r7, r8
  4035f4:	4456      	add	r6, sl
  4035f6:	455d      	cmp	r5, fp
  4035f8:	d3c0      	bcc.n	40357c <disk_read+0x64>
  4035fa:	e7cf      	b.n	40359c <disk_read+0x84>

004035fc <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
  4035fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403600:	b085      	sub	sp, #20
  403602:	4604      	mov	r4, r0
  403604:	460e      	mov	r6, r1
  403606:	4617      	mov	r7, r2
  403608:	461d      	mov	r5, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
  40360a:	f241 1221 	movw	r2, #4385	; 0x1121
  40360e:	f2c0 0240 	movt	r2, #64	; 0x40
  403612:	4790      	blx	r2
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
  403614:	4682      	mov	sl, r0
  403616:	2800      	cmp	r0, #0
  403618:	d035      	beq.n	403686 <disk_write+0x8a>
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
  40361a:	4620      	mov	r0, r4
  40361c:	a903      	add	r1, sp, #12
  40361e:	f241 1309 	movw	r3, #4361	; 0x1109
  403622:	f2c0 0340 	movt	r3, #64	; 0x40
  403626:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
  403628:	46d0      	mov	r8, sl
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  40362a:	fb0a 7005 	mla	r0, sl, r5, r7
			(ul_last_sector_num + 1) * uc_sector_size) {
  40362e:	9903      	ldr	r1, [sp, #12]
  403630:	fb01 a20a 	mla	r2, r1, sl, sl
		return RES_ERROR;
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
  403634:	4290      	cmp	r0, r2
  403636:	d829      	bhi.n	40368c <disk_write+0x90>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  403638:	46ab      	mov	fp, r5
  40363a:	b355      	cbz	r5, 403692 <disk_write+0x96>
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
  40363c:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  403640:	f241 1961 	movw	r9, #4449	; 0x1161
  403644:	f2c0 0940 	movt	r9, #64	; 0x40
  403648:	f105 33ff 	add.w	r3, r5, #4294967295
  40364c:	f003 0001 	and.w	r0, r3, #1
  403650:	9001      	str	r0, [sp, #4]
  403652:	4620      	mov	r0, r4
  403654:	4639      	mov	r1, r7
  403656:	4632      	mov	r2, r6
  403658:	47c8      	blx	r9
  40365a:	2800      	cmp	r0, #0
  40365c:	d021      	beq.n	4036a2 <disk_write+0xa6>
  40365e:	e01b      	b.n	403698 <disk_write+0x9c>
  403660:	4620      	mov	r0, r4
  403662:	4639      	mov	r1, r7
  403664:	4632      	mov	r2, r6
  403666:	47c8      	blx	r9
  403668:	b9b0      	cbnz	r0, 403698 <disk_write+0x9c>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  40366a:	f105 0501 	add.w	r5, r5, #1
  40366e:	4447      	add	r7, r8
  403670:	4456      	add	r6, sl
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  403672:	4620      	mov	r0, r4
  403674:	4639      	mov	r1, r7
  403676:	4632      	mov	r2, r6
  403678:	47c8      	blx	r9
  40367a:	2800      	cmp	r0, #0
  40367c:	d029      	beq.n	4036d2 <disk_write+0xd6>
  40367e:	e00b      	b.n	403698 <disk_write+0x9c>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  403680:	f04f 0000 	mov.w	r0, #0
  403684:	e00a      	b.n	40369c <disk_write+0xa0>
	uint8_t uc_sector_size = mem_sector_size(drv);
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
  403686:	f04f 0001 	mov.w	r0, #1
  40368a:	e007      	b.n	40369c <disk_write+0xa0>

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
	if ((sector + count * uc_sector_size) >
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
  40368c:	f04f 0004 	mov.w	r0, #4
  403690:	e004      	b.n	40369c <disk_write+0xa0>
				CTRL_GOOD) {
			return RES_ERROR;
		}
	}

	return RES_OK;
  403692:	f04f 0000 	mov.w	r0, #0
  403696:	e001      	b.n	40369c <disk_write+0xa0>
	/* Write the data */
	for (i = 0; i < count; i++) {
		if (ram_2_memory(drv, sector + uc_sector_size * i,
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
				CTRL_GOOD) {
			return RES_ERROR;
  403698:	f04f 0001 	mov.w	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
  40369c:	b005      	add	sp, #20
  40369e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4036a2:	f04f 0500 	mov.w	r5, #0
  4036a6:	f105 0501 	add.w	r5, r5, #1
  4036aa:	4447      	add	r7, r8
  4036ac:	4456      	add	r6, sl
  4036ae:	455d      	cmp	r5, fp
  4036b0:	d2e6      	bcs.n	403680 <disk_write+0x84>
  4036b2:	9901      	ldr	r1, [sp, #4]
  4036b4:	2900      	cmp	r1, #0
  4036b6:	d0d3      	beq.n	403660 <disk_write+0x64>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
  4036b8:	4620      	mov	r0, r4
  4036ba:	4639      	mov	r1, r7
  4036bc:	4632      	mov	r2, r6
  4036be:	47c8      	blx	r9
  4036c0:	2800      	cmp	r0, #0
  4036c2:	d1e9      	bne.n	403698 <disk_write+0x9c>
			(ul_last_sector_num + 1) * uc_sector_size) {
		return RES_PARERR;
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
  4036c4:	f105 0501 	add.w	r5, r5, #1
  4036c8:	4447      	add	r7, r8
  4036ca:	4456      	add	r6, sl
  4036cc:	455d      	cmp	r5, fp
  4036ce:	d3c7      	bcc.n	403660 <disk_write+0x64>
  4036d0:	e7d6      	b.n	403680 <disk_write+0x84>
  4036d2:	f105 0501 	add.w	r5, r5, #1
  4036d6:	4447      	add	r7, r8
  4036d8:	4456      	add	r6, sl
  4036da:	455d      	cmp	r5, fp
  4036dc:	d3c0      	bcc.n	403660 <disk_write+0x64>
  4036de:	e7cf      	b.n	403680 <disk_write+0x84>

004036e0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
  4036e0:	b510      	push	{r4, lr}
  4036e2:	b082      	sub	sp, #8
  4036e4:	4614      	mov	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
  4036e6:	2903      	cmp	r1, #3
  4036e8:	d832      	bhi.n	403750 <disk_ioctl+0x70>
  4036ea:	e8df f001 	tbb	[pc, r1]
  4036ee:	0827      	.short	0x0827
  4036f0:	0215      	.short	0x0215
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
  4036f2:	f04f 0301 	mov.w	r3, #1
  4036f6:	6013      	str	r3, [r2, #0]
		res = RES_OK;
  4036f8:	f04f 0000 	mov.w	r0, #0
		break;
  4036fc:	e02d      	b.n	40375a <disk_ioctl+0x7a>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
  4036fe:	a901      	add	r1, sp, #4
  403700:	f241 1209 	movw	r2, #4361	; 0x1109
  403704:	f2c0 0240 	movt	r2, #64	; 0x40
  403708:	4790      	blx	r2

		*(DWORD *)buff = ul_last_sector_num + 1;
  40370a:	9801      	ldr	r0, [sp, #4]
  40370c:	f100 0001 	add.w	r0, r0, #1
  403710:	6020      	str	r0, [r4, #0]

		res = RES_OK;
  403712:	f04f 0000 	mov.w	r0, #0
	}
	break;
  403716:	e020      	b.n	40375a <disk_ioctl+0x7a>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
  403718:	f241 1121 	movw	r1, #4385	; 0x1121
  40371c:	f2c0 0140 	movt	r1, #64	; 0x40
  403720:	4788      	blx	r1

		if ((uc_sector_size != SECTOR_SIZE_512) &&
  403722:	f100 32ff 	add.w	r2, r0, #4294967295
  403726:	b2d3      	uxtb	r3, r2
  403728:	2b01      	cmp	r3, #1
  40372a:	d903      	bls.n	403734 <disk_ioctl+0x54>
				(uc_sector_size != SECTOR_SIZE_1024) &&
  40372c:	2804      	cmp	r0, #4
  40372e:	d001      	beq.n	403734 <disk_ioctl+0x54>
				(uc_sector_size != SECTOR_SIZE_2048) &&
  403730:	2808      	cmp	r0, #8
  403732:	d110      	bne.n	403756 <disk_ioctl+0x76>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
  403734:	f04f 0000 	mov.w	r0, #0
  403738:	7020      	strb	r0, [r4, #0]

		res = RES_OK;
	}
	break;
  40373a:	e00e      	b.n	40375a <disk_ioctl+0x7a>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
  40373c:	f241 01f1 	movw	r1, #4337	; 0x10f1
  403740:	f2c0 0140 	movt	r1, #64	; 0x40
  403744:	4788      	blx	r1
			res = RES_OK;
  403746:	2800      	cmp	r0, #0
  403748:	bf14      	ite	ne
  40374a:	2003      	movne	r0, #3
  40374c:	2000      	moveq	r0, #0
  40374e:	e004      	b.n	40375a <disk_ioctl+0x7a>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
  403750:	f04f 0004 	mov.w	r0, #4
  403754:	e001      	b.n	40375a <disk_ioctl+0x7a>
		if ((uc_sector_size != SECTOR_SIZE_512) &&
				(uc_sector_size != SECTOR_SIZE_1024) &&
				(uc_sector_size != SECTOR_SIZE_2048) &&
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
  403756:	f04f 0001 	mov.w	r0, #1
	default:
		res = RES_PARERR;
	}

	return res;
}
  40375a:	b002      	add	sp, #8
  40375c:	bd10      	pop	{r4, pc}
  40375e:	bf00      	nop

00403760 <get_fattime>:
 * bit4:0    Second (0..59)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
  403760:	b530      	push	{r4, r5, lr}
  403762:	b08b      	sub	sp, #44	; 0x2c
	uint32_t ul_time;
	uint32_t ul_hour, ul_minute, ul_second;
	uint32_t ul_year, ul_month, ul_day, ul_week;

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
  403764:	f44f 54a3 	mov.w	r4, #5216	; 0x1460
  403768:	f2c4 040e 	movt	r4, #16398	; 0x400e
  40376c:	4620      	mov	r0, r4
  40376e:	a909      	add	r1, sp, #36	; 0x24
  403770:	aa08      	add	r2, sp, #32
  403772:	ab07      	add	r3, sp, #28
  403774:	f642 657d 	movw	r5, #11901	; 0x2e7d
  403778:	f2c0 0540 	movt	r5, #64	; 0x40
  40377c:	47a8      	blx	r5
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);
  40377e:	ab03      	add	r3, sp, #12
  403780:	9300      	str	r3, [sp, #0]
  403782:	4620      	mov	r0, r4
  403784:	a906      	add	r1, sp, #24
  403786:	aa05      	add	r2, sp, #20
  403788:	ab04      	add	r3, sp, #16
  40378a:	f642 64e1 	movw	r4, #12001	; 0x2ee1
  40378e:	f2c0 0440 	movt	r4, #64	; 0x40
  403792:	47a0      	blx	r4

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
			| (ul_day << 16)
  403794:	9804      	ldr	r0, [sp, #16]
  403796:	ea4f 4200 	mov.w	r2, r0, lsl #16
	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
			| (ul_month << 21)
  40379a:	9905      	ldr	r1, [sp, #20]
  40379c:	ea42 5041 	orr.w	r0, r2, r1, lsl #21
			| (ul_day << 16)
  4037a0:	9b07      	ldr	r3, [sp, #28]
  4037a2:	4318      	orrs	r0, r3
			| (ul_hour << 11)
  4037a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4037a6:	ea40 21c2 	orr.w	r1, r0, r2, lsl #11
			| (ul_minute << 5)
  4037aa:	9808      	ldr	r0, [sp, #32]
  4037ac:	ea41 1240 	orr.w	r2, r1, r0, lsl #5

	/* Retrieve date and time */
	rtc_get_time(RTC, &ul_hour, &ul_minute, &ul_second);
	rtc_get_date(RTC, &ul_year, &ul_month, &ul_day, &ul_week);

	ul_time = ((ul_year - 1980) << 25)
  4037b0:	9b06      	ldr	r3, [sp, #24]
  4037b2:	f2a3 71bc 	subw	r1, r3, #1980	; 0x7bc
			| (ul_hour << 11)
			| (ul_minute << 5)
			| (ul_second << 0);

	return ul_time;
}
  4037b6:	ea42 6041 	orr.w	r0, r2, r1, lsl #25
  4037ba:	b00b      	add	sp, #44	; 0x2c
  4037bc:	bd30      	pop	{r4, r5, pc}
  4037be:	bf00      	nop

004037c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
  4037c0:	b410      	push	{r4}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  4037c2:	b1e2      	cbz	r2, 4037fe <mem_cpy+0x3e>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
  4037c4:	1882      	adds	r2, r0, r2
  4037c6:	ea6f 0400 	mvn.w	r4, r0
  4037ca:	1913      	adds	r3, r2, r4
  4037cc:	f003 0401 	and.w	r4, r3, #1
  4037d0:	f101 31ff 	add.w	r1, r1, #4294967295
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
  4037d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4037d8:	f800 3b01 	strb.w	r3, [r0], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  4037dc:	4290      	cmp	r0, r2
  4037de:	d110      	bne.n	403802 <mem_cpy+0x42>
  4037e0:	e00d      	b.n	4037fe <mem_cpy+0x3e>
  4037e2:	f101 0401 	add.w	r4, r1, #1
		*d++ = *s++;
  4037e6:	7849      	ldrb	r1, [r1, #1]
  4037e8:	4603      	mov	r3, r0
  4037ea:	f803 1b01 	strb.w	r1, [r3], #1
  4037ee:	f104 0101 	add.w	r1, r4, #1
  4037f2:	7864      	ldrb	r4, [r4, #1]
  4037f4:	7044      	strb	r4, [r0, #1]
  4037f6:	f103 0001 	add.w	r0, r3, #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  4037fa:	4290      	cmp	r0, r2
  4037fc:	d1f1      	bne.n	4037e2 <mem_cpy+0x22>
		*d++ = *s++;
}
  4037fe:	bc10      	pop	{r4}
  403800:	4770      	bx	lr
  403802:	2c00      	cmp	r4, #0
  403804:	d0ed      	beq.n	4037e2 <mem_cpy+0x22>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
  403806:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  40380a:	f800 3b01 	strb.w	r3, [r0], #1
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
  40380e:	4290      	cmp	r0, r2
  403810:	d1e7      	bne.n	4037e2 <mem_cpy+0x22>
  403812:	e7f4      	b.n	4037fe <mem_cpy+0x3e>

00403814 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  403814:	b192      	cbz	r2, 40383c <mem_set+0x28>
		*d++ = *s++;
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
  403816:	1882      	adds	r2, r0, r2
  403818:	ea6f 0300 	mvn.w	r3, r0
  40381c:	18d3      	adds	r3, r2, r3
  40381e:	f003 0301 	and.w	r3, r3, #1
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
  403822:	f800 1b01 	strb.w	r1, [r0], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  403826:	4290      	cmp	r0, r2
  403828:	d109      	bne.n	40383e <mem_set+0x2a>
  40382a:	4770      	bx	lr
		*d++ = (BYTE)val;
  40382c:	4603      	mov	r3, r0
  40382e:	f803 1b01 	strb.w	r1, [r3], #1
  403832:	7041      	strb	r1, [r0, #1]
  403834:	f103 0001 	add.w	r0, r3, #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  403838:	4290      	cmp	r0, r2
  40383a:	d1f7      	bne.n	40382c <mem_set+0x18>
  40383c:	4770      	bx	lr
  40383e:	2b00      	cmp	r3, #0
  403840:	d0f4      	beq.n	40382c <mem_set+0x18>
		*d++ = (BYTE)val;
  403842:	f800 1b01 	strb.w	r1, [r0], #1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
  403846:	4290      	cmp	r0, r2
  403848:	d1f0      	bne.n	40382c <mem_set+0x18>
  40384a:	4770      	bx	lr

0040384c <chk_chr>:
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
  40384c:	7803      	ldrb	r3, [r0, #0]
  40384e:	b133      	cbz	r3, 40385e <chk_chr+0x12>
  403850:	428b      	cmp	r3, r1
  403852:	d004      	beq.n	40385e <chk_chr+0x12>
  403854:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  403858:	b10b      	cbz	r3, 40385e <chk_chr+0x12>
  40385a:	428b      	cmp	r3, r1
  40385c:	d1fa      	bne.n	403854 <chk_chr+0x8>
	return *str;
}
  40385e:	4618      	mov	r0, r3
  403860:	4770      	bx	lr
  403862:	bf00      	nop

00403864 <clust2sect>:
static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
  403864:	f1a1 0102 	sub.w	r1, r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  403868:	6983      	ldr	r3, [r0, #24]
  40386a:	f1a3 0302 	sub.w	r3, r3, #2
  40386e:	4299      	cmp	r1, r3
  403870:	d204      	bcs.n	40387c <clust2sect+0x18>
	return clst * fs->csize + fs->database;
  403872:	7882      	ldrb	r2, [r0, #2]
  403874:	6a80      	ldr	r0, [r0, #40]	; 0x28
  403876:	fb02 0001 	mla	r0, r2, r1, r0
  40387a:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  40387c:	f04f 0000 	mov.w	r0, #0
	return clst * fs->csize + fs->database;
}
  403880:	4770      	bx	lr
  403882:	bf00      	nop

00403884 <sum_sfn>:
)
{
	BYTE sum = 0;
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
  403884:	7803      	ldrb	r3, [r0, #0]
  403886:	ea4f 12c3 	mov.w	r2, r3, lsl #7
  40388a:	ea42 0153 	orr.w	r1, r2, r3, lsr #1
  40388e:	7843      	ldrb	r3, [r0, #1]
  403890:	18ca      	adds	r2, r1, r3
  403892:	b2d1      	uxtb	r1, r2
  403894:	ea4f 13c1 	mov.w	r3, r1, lsl #7
  403898:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
  40389c:	7882      	ldrb	r2, [r0, #2]
  40389e:	fa52 f381 	uxtab	r3, r2, r1
  4038a2:	b2d9      	uxtb	r1, r3
  4038a4:	ea4f 12c1 	mov.w	r2, r1, lsl #7
  4038a8:	ea42 0351 	orr.w	r3, r2, r1, lsr #1
  4038ac:	78c1      	ldrb	r1, [r0, #3]
  4038ae:	fa51 f283 	uxtab	r2, r1, r3
  4038b2:	b2d3      	uxtb	r3, r2
  4038b4:	ea4f 11c3 	mov.w	r1, r3, lsl #7
  4038b8:	ea41 0353 	orr.w	r3, r1, r3, lsr #1
  4038bc:	7902      	ldrb	r2, [r0, #4]
  4038be:	fa52 f183 	uxtab	r1, r2, r3
  4038c2:	b2cb      	uxtb	r3, r1
  4038c4:	ea4f 12c3 	mov.w	r2, r3, lsl #7
  4038c8:	ea42 0153 	orr.w	r1, r2, r3, lsr #1
  4038cc:	7943      	ldrb	r3, [r0, #5]
  4038ce:	fa53 f281 	uxtab	r2, r3, r1
  4038d2:	b2d1      	uxtb	r1, r2
  4038d4:	ea4f 13c1 	mov.w	r3, r1, lsl #7
  4038d8:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
  4038dc:	7982      	ldrb	r2, [r0, #6]
  4038de:	fa52 f381 	uxtab	r3, r2, r1
  4038e2:	b2d9      	uxtb	r1, r3
  4038e4:	ea4f 12c1 	mov.w	r2, r1, lsl #7
  4038e8:	ea42 0351 	orr.w	r3, r2, r1, lsr #1
  4038ec:	79c1      	ldrb	r1, [r0, #7]
  4038ee:	fa51 f283 	uxtab	r2, r1, r3
  4038f2:	b2d3      	uxtb	r3, r2
  4038f4:	ea4f 11c3 	mov.w	r1, r3, lsl #7
  4038f8:	ea41 0353 	orr.w	r3, r1, r3, lsr #1
  4038fc:	7a02      	ldrb	r2, [r0, #8]
  4038fe:	fa52 f183 	uxtab	r1, r2, r3
  403902:	b2cb      	uxtb	r3, r1
  403904:	ea4f 12c3 	mov.w	r2, r3, lsl #7
  403908:	ea42 0153 	orr.w	r1, r2, r3, lsr #1
  40390c:	7a43      	ldrb	r3, [r0, #9]
  40390e:	fa53 f281 	uxtab	r2, r3, r1
  403912:	b2d1      	uxtb	r1, r2
  403914:	ea4f 13c1 	mov.w	r3, r1, lsl #7
  403918:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
  40391c:	7a80      	ldrb	r0, [r0, #10]
  40391e:	fa50 f281 	uxtab	r2, r0, r1
	return sum;
}
  403922:	b2d0      	uxtb	r0, r2
  403924:	4770      	bx	lr
  403926:	bf00      	nop

00403928 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
  403928:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
  40392a:	4603      	mov	r3, r0
  40392c:	b188      	cbz	r0, 403952 <validate+0x2a>
  40392e:	7802      	ldrb	r2, [r0, #0]
  403930:	b192      	cbz	r2, 403958 <validate+0x30>
  403932:	88c0      	ldrh	r0, [r0, #6]
  403934:	4288      	cmp	r0, r1
  403936:	d112      	bne.n	40395e <validate+0x36>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
  403938:	7858      	ldrb	r0, [r3, #1]
  40393a:	f243 41f9 	movw	r1, #13561	; 0x34f9
  40393e:	f2c0 0140 	movt	r1, #64	; 0x40
  403942:	4788      	blx	r1
  403944:	f000 0301 	and.w	r3, r0, #1
		return FR_NOT_READY;
  403948:	2b00      	cmp	r3, #0
  40394a:	bf14      	ite	ne
  40394c:	2003      	movne	r0, #3
  40394e:	2000      	moveq	r0, #0
  403950:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
  403952:	f04f 0009 	mov.w	r0, #9
  403956:	bd08      	pop	{r3, pc}
  403958:	f04f 0009 	mov.w	r0, #9
  40395c:	bd08      	pop	{r3, pc}
  40395e:	f04f 0009 	mov.w	r0, #9

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
  403962:	bd08      	pop	{r3, pc}

00403964 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  403964:	b538      	push	{r3, r4, r5, lr}
  403966:	4604      	mov	r4, r0
  403968:	460a      	mov	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
  40396a:	7840      	ldrb	r0, [r0, #1]
  40396c:	f104 0130 	add.w	r1, r4, #48	; 0x30
  403970:	f04f 0301 	mov.w	r3, #1
  403974:	f243 5519 	movw	r5, #13593	; 0x3519
  403978:	f2c0 0540 	movt	r5, #64	; 0x40
  40397c:	47a8      	blx	r5
  40397e:	2800      	cmp	r0, #0
  403980:	d13e      	bne.n	403a00 <check_fs+0x9c>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
  403982:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
  403986:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
  40398a:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
  40398e:	b201      	sxth	r1, r0
  403990:	f64a 2255 	movw	r2, #43605	; 0xaa55
  403994:	f6cf 72ff 	movt	r2, #65535	; 0xffff
  403998:	4291      	cmp	r1, r2
  40399a:	d134      	bne.n	403a06 <check_fs+0xa2>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
  40399c:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
  4039a0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  4039a4:	ea4f 4103 	mov.w	r1, r3, lsl #16
  4039a8:	ea41 6200 	orr.w	r2, r1, r0, lsl #24
  4039ac:	f894 0066 	ldrb.w	r0, [r4, #102]	; 0x66
  4039b0:	ea42 0300 	orr.w	r3, r2, r0
  4039b4:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
  4039b8:	ea43 2201 	orr.w	r2, r3, r1, lsl #8
  4039bc:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
  4039c0:	f244 1346 	movw	r3, #16710	; 0x4146
  4039c4:	f2c0 0354 	movt	r3, #84	; 0x54
  4039c8:	4298      	cmp	r0, r3
  4039ca:	d01f      	beq.n	403a0c <check_fs+0xa8>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  4039cc:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
  4039d0:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
  4039d4:	ea4f 4002 	mov.w	r0, r2, lsl #16
  4039d8:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
  4039dc:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
  4039e0:	ea41 0203 	orr.w	r2, r1, r3
  4039e4:	f894 0083 	ldrb.w	r0, [r4, #131]	; 0x83
  4039e8:	ea42 2100 	orr.w	r1, r2, r0, lsl #8
  4039ec:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
  4039f0:	f244 1346 	movw	r3, #16710	; 0x4146
  4039f4:	f2c0 0354 	movt	r3, #84	; 0x54
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
  4039f8:	1ad0      	subs	r0, r2, r3
  4039fa:	bf18      	it	ne
  4039fc:	2001      	movne	r0, #1
  4039fe:	bd38      	pop	{r3, r4, r5, pc}
  403a00:	f04f 0003 	mov.w	r0, #3
  403a04:	bd38      	pop	{r3, r4, r5, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
  403a06:	f04f 0002 	mov.w	r0, #2
  403a0a:	bd38      	pop	{r3, r4, r5, pc}

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
  403a0c:	f04f 0000 	mov.w	r0, #0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
  403a10:	bd38      	pop	{r3, r4, r5, pc}
  403a12:	bf00      	nop

00403a14 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
  403a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a18:	4616      	mov	r6, r2
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
  403a1a:	6803      	ldr	r3, [r0, #0]
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
  403a1c:	781c      	ldrb	r4, [r3, #0]
  403a1e:	f1a4 0430 	sub.w	r4, r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  403a22:	2c09      	cmp	r4, #9
  403a24:	d809      	bhi.n	403a3a <chk_mounted+0x26>
  403a26:	785a      	ldrb	r2, [r3, #1]
  403a28:	2a3a      	cmp	r2, #58	; 0x3a
  403a2a:	d109      	bne.n	403a40 <chk_mounted+0x2c>
		p += 2; *path = p;				/* Return pointer to the path name */
  403a2c:	f103 0302 	add.w	r3, r3, #2
  403a30:	6003      	str	r3, [r0, #0]
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
  403a32:	2c07      	cmp	r4, #7
  403a34:	f200 819f 	bhi.w	403d76 <chk_mounted+0x362>
  403a38:	e004      	b.n	403a44 <chk_mounted+0x30>
	const TCHAR *p = *path;
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
  403a3a:	f04f 0400 	mov.w	r4, #0
  403a3e:	e001      	b.n	403a44 <chk_mounted+0x30>
  403a40:	f04f 0400 	mov.w	r4, #0
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
  403a44:	f640 5070 	movw	r0, #3440	; 0xd70
  403a48:	f2c2 0000 	movt	r0, #8192	; 0x2000
  403a4c:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
  403a50:	600d      	str	r5, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  403a52:	2d00      	cmp	r5, #0
  403a54:	f000 8193 	beq.w	403d7e <chk_mounted+0x36a>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
  403a58:	7829      	ldrb	r1, [r5, #0]
  403a5a:	b1a1      	cbz	r1, 403a86 <chk_mounted+0x72>
		stat = disk_status(fs->drv);
  403a5c:	7868      	ldrb	r0, [r5, #1]
  403a5e:	f243 43f9 	movw	r3, #13561	; 0x34f9
  403a62:	f2c0 0340 	movt	r3, #64	; 0x40
  403a66:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
  403a68:	f010 0f01 	tst.w	r0, #1
  403a6c:	d10b      	bne.n	403a86 <chk_mounted+0x72>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
  403a6e:	2e00      	cmp	r6, #0
  403a70:	f000 8189 	beq.w	403d86 <chk_mounted+0x372>
  403a74:	f000 0104 	and.w	r1, r0, #4
  403a78:	b2c8      	uxtb	r0, r1
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
  403a7a:	2800      	cmp	r0, #0
  403a7c:	bf14      	ite	ne
  403a7e:	200a      	movne	r0, #10
  403a80:	2000      	moveq	r0, #0
  403a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
  403a86:	f04f 0200 	mov.w	r2, #0
  403a8a:	702a      	strb	r2, [r5, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
  403a8c:	b2e0      	uxtb	r0, r4
  403a8e:	7068      	strb	r0, [r5, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
  403a90:	f243 4191 	movw	r1, #13457	; 0x3491
  403a94:	f2c0 0140 	movt	r1, #64	; 0x40
  403a98:	4788      	blx	r1
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
  403a9a:	f010 0f01 	tst.w	r0, #1
  403a9e:	f040 8176 	bne.w	403d8e <chk_mounted+0x37a>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
  403aa2:	b12e      	cbz	r6, 403ab0 <chk_mounted+0x9c>
  403aa4:	f000 0004 	and.w	r0, r0, #4
  403aa8:	b2c3      	uxtb	r3, r0
  403aaa:	2b00      	cmp	r3, #0
  403aac:	f040 8173 	bne.w	403d96 <chk_mounted+0x382>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  403ab0:	4628      	mov	r0, r5
  403ab2:	f04f 0100 	mov.w	r1, #0
  403ab6:	f643 1265 	movw	r2, #14693	; 0x3965
  403aba:	f2c0 0240 	movt	r2, #64	; 0x40
  403abe:	4790      	blx	r2
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
  403ac0:	2801      	cmp	r0, #1
  403ac2:	d11c      	bne.n	403afe <chk_mounted+0xea>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
  403ac4:	f895 11f2 	ldrb.w	r1, [r5, #498]	; 0x1f2
  403ac8:	2900      	cmp	r1, #0
  403aca:	f000 8168 	beq.w	403d9e <chk_mounted+0x38a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
  403ace:	f895 41f9 	ldrb.w	r4, [r5, #505]	; 0x1f9
  403ad2:	f895 01f8 	ldrb.w	r0, [r5, #504]	; 0x1f8
  403ad6:	ea4f 4300 	mov.w	r3, r0, lsl #16
  403ada:	ea43 6204 	orr.w	r2, r3, r4, lsl #24
  403ade:	f895 11f6 	ldrb.w	r1, [r5, #502]	; 0x1f6
  403ae2:	ea42 0001 	orr.w	r0, r2, r1
  403ae6:	f895 41f7 	ldrb.w	r4, [r5, #503]	; 0x1f7
  403aea:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
			fmt = check_fs(fs, bsect);		/* Check the partition */
  403aee:	4628      	mov	r0, r5
  403af0:	4621      	mov	r1, r4
  403af2:	f643 1365 	movw	r3, #14693	; 0x3965
  403af6:	f2c0 0340 	movt	r3, #64	; 0x40
  403afa:	4798      	blx	r3
  403afc:	e001      	b.n	403b02 <chk_mounted+0xee>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  403afe:	f04f 0400 	mov.w	r4, #0
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  403b02:	2803      	cmp	r0, #3
  403b04:	f000 814f 	beq.w	403da6 <chk_mounted+0x392>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  403b08:	2800      	cmp	r0, #0
  403b0a:	f040 8150 	bne.w	403dae <chk_mounted+0x39a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
  403b0e:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
  403b12:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
  403b16:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
  403b1a:	b203      	sxth	r3, r0
  403b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403b20:	f040 8149 	bne.w	403db6 <chk_mounted+0x3a2>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
  403b24:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
  403b28:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  403b2c:	ea51 2102 	orrs.w	r1, r1, r2, lsl #8
  403b30:	d10f      	bne.n	403b52 <chk_mounted+0x13e>
  403b32:	f895 0057 	ldrb.w	r0, [r5, #87]	; 0x57
  403b36:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
  403b3a:	ea4f 4203 	mov.w	r2, r3, lsl #16
  403b3e:	ea42 6100 	orr.w	r1, r2, r0, lsl #24
  403b42:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
  403b46:	ea41 0300 	orr.w	r3, r1, r0
  403b4a:	f895 2055 	ldrb.w	r2, [r5, #85]	; 0x55
  403b4e:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
	fs->fsize = fasize;
  403b52:	61e9      	str	r1, [r5, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
  403b54:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
  403b58:	70ea      	strb	r2, [r5, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  403b5a:	f102 30ff 	add.w	r0, r2, #4294967295
  403b5e:	b2c3      	uxtb	r3, r0
  403b60:	2b01      	cmp	r3, #1
  403b62:	f200 812c 	bhi.w	403dbe <chk_mounted+0x3aa>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
  403b66:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  403b6a:	70ab      	strb	r3, [r5, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  403b6c:	2b00      	cmp	r3, #0
  403b6e:	f000 812a 	beq.w	403dc6 <chk_mounted+0x3b2>
  403b72:	f103 30ff 	add.w	r0, r3, #4294967295
  403b76:	4218      	tst	r0, r3
  403b78:	f040 8129 	bne.w	403dce <chk_mounted+0x3ba>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
  403b7c:	f895 6042 	ldrb.w	r6, [r5, #66]	; 0x42
  403b80:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
  403b84:	ea40 2606 	orr.w	r6, r0, r6, lsl #8
  403b88:	b2b0      	uxth	r0, r6
  403b8a:	8128      	strh	r0, [r5, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  403b8c:	f016 0f0f 	tst.w	r6, #15
  403b90:	f040 8121 	bne.w	403dd6 <chk_mounted+0x3c2>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
  403b94:	f895 7044 	ldrb.w	r7, [r5, #68]	; 0x44
  403b98:	f895 6043 	ldrb.w	r6, [r5, #67]	; 0x43
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  403b9c:	ea56 2607 	orrs.w	r6, r6, r7, lsl #8
  403ba0:	d10e      	bne.n	403bc0 <chk_mounted+0x1ac>
  403ba2:	f895 7053 	ldrb.w	r7, [r5, #83]	; 0x53
  403ba6:	f895 6052 	ldrb.w	r6, [r5, #82]	; 0x52
  403baa:	ea4f 4606 	mov.w	r6, r6, lsl #16
  403bae:	ea46 6707 	orr.w	r7, r6, r7, lsl #24
  403bb2:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
  403bb6:	433e      	orrs	r6, r7
  403bb8:	f895 7051 	ldrb.w	r7, [r5, #81]	; 0x51
  403bbc:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
  403bc0:	f895 c03f 	ldrb.w	ip, [r5, #63]	; 0x3f
  403bc4:	f895 703e 	ldrb.w	r7, [r5, #62]	; 0x3e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  403bc8:	ea57 270c 	orrs.w	r7, r7, ip, lsl #8
  403bcc:	f000 8107 	beq.w	403dde <chk_mounted+0x3ca>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
  403bd0:	fb02 fc01 	mul.w	ip, r2, r1

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
  403bd4:	eb07 1210 	add.w	r2, r7, r0, lsr #4
  403bd8:	4462      	add	r2, ip
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  403bda:	4296      	cmp	r6, r2
  403bdc:	f0c0 8103 	bcc.w	403de6 <chk_mounted+0x3d2>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
  403be0:	1ab6      	subs	r6, r6, r2
  403be2:	fbb6 f3f3 	udiv	r3, r6, r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  403be6:	2b00      	cmp	r3, #0
  403be8:	f000 8101 	beq.w	403dee <chk_mounted+0x3da>
	fmt = FS_FAT12;
  403bec:	f640 76f5 	movw	r6, #4085	; 0xff5
  403bf0:	42b3      	cmp	r3, r6
  403bf2:	bf8c      	ite	hi
  403bf4:	2602      	movhi	r6, #2
  403bf6:	2601      	movls	r6, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  403bf8:	f64f 78f5 	movw	r8, #65525	; 0xfff5
  403bfc:	4543      	cmp	r3, r8
  403bfe:	f200 8106 	bhi.w	403e0e <chk_mounted+0x3fa>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  403c02:	f103 0302 	add.w	r3, r3, #2
  403c06:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  403c08:	1912      	adds	r2, r2, r4
  403c0a:	62aa      	str	r2, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  403c0c:	19e7      	adds	r7, r4, r7
  403c0e:	622f      	str	r7, [r5, #32]
	if (fmt == FS_FAT32) {
  403c10:	2e03      	cmp	r6, #3
  403c12:	d115      	bne.n	403c40 <chk_mounted+0x22c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  403c14:	2800      	cmp	r0, #0
  403c16:	f040 80ee 	bne.w	403df6 <chk_mounted+0x3e2>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
  403c1a:	f895 005f 	ldrb.w	r0, [r5, #95]	; 0x5f
  403c1e:	f895 205e 	ldrb.w	r2, [r5, #94]	; 0x5e
  403c22:	ea4f 4202 	mov.w	r2, r2, lsl #16
  403c26:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
  403c2a:	f895 205c 	ldrb.w	r2, [r5, #92]	; 0x5c
  403c2e:	4302      	orrs	r2, r0
  403c30:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
  403c34:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  403c38:	626a      	str	r2, [r5, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
  403c3a:	ea4f 0083 	mov.w	r0, r3, lsl #2
  403c3e:	e011      	b.n	403c64 <chk_mounted+0x250>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  403c40:	2800      	cmp	r0, #0
  403c42:	f000 80dc 	beq.w	403dfe <chk_mounted+0x3ea>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
  403c46:	4467      	add	r7, ip
  403c48:	626f      	str	r7, [r5, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  403c4a:	2e02      	cmp	r6, #2
  403c4c:	d102      	bne.n	403c54 <chk_mounted+0x240>
  403c4e:	ea4f 0043 	mov.w	r0, r3, lsl #1
  403c52:	e007      	b.n	403c64 <chk_mounted+0x250>
  403c54:	f04f 0003 	mov.w	r0, #3
  403c58:	fb00 f203 	mul.w	r2, r0, r3
  403c5c:	f003 0301 	and.w	r3, r3, #1
  403c60:	eb03 0052 	add.w	r0, r3, r2, lsr #1
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
  403c64:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
  403c68:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
  403c6c:	f0c0 80cb 	bcc.w	403e06 <chk_mounted+0x3f2>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
  403c70:	f04f 31ff 	mov.w	r1, #4294967295
  403c74:	6129      	str	r1, [r5, #16]
	fs->last_clust = 0;
  403c76:	f04f 0000 	mov.w	r0, #0
  403c7a:	60e8      	str	r0, [r5, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
  403c7c:	2e03      	cmp	r6, #3
  403c7e:	d16c      	bne.n	403d5a <chk_mounted+0x346>
	 	fs->fsi_flag = 0;
  403c80:	7168      	strb	r0, [r5, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  403c82:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
  403c86:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
  403c8a:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
  403c8e:	1862      	adds	r2, r4, r1
  403c90:	616a      	str	r2, [r5, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  403c92:	7868      	ldrb	r0, [r5, #1]
  403c94:	f105 0130 	add.w	r1, r5, #48	; 0x30
  403c98:	f04f 0301 	mov.w	r3, #1
  403c9c:	4c61      	ldr	r4, [pc, #388]	; (403e24 <chk_mounted+0x410>)
  403c9e:	47a0      	blx	r4
  403ca0:	2800      	cmp	r0, #0
  403ca2:	d15a      	bne.n	403d5a <chk_mounted+0x346>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  403ca4:	f895 022f 	ldrb.w	r0, [r5, #559]	; 0x22f
  403ca8:	f895 222e 	ldrb.w	r2, [r5, #558]	; 0x22e
  403cac:	ea42 2300 	orr.w	r3, r2, r0, lsl #8

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  403cb0:	b219      	sxth	r1, r3
  403cb2:	f64a 2055 	movw	r0, #43605	; 0xaa55
  403cb6:	f6cf 70ff 	movt	r0, #65535	; 0xffff
  403cba:	4281      	cmp	r1, r0
  403cbc:	d14d      	bne.n	403d5a <chk_mounted+0x346>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  403cbe:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
  403cc2:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  403cc6:	ea4f 4103 	mov.w	r1, r3, lsl #16
  403cca:	ea41 6002 	orr.w	r0, r1, r2, lsl #24
  403cce:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
  403cd2:	ea40 0302 	orr.w	r3, r0, r2
  403cd6:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  403cda:	ea43 2001 	orr.w	r0, r3, r1, lsl #8
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  403cde:	f245 2252 	movw	r2, #21074	; 0x5252
  403ce2:	f2c4 1261 	movt	r2, #16737	; 0x4161
  403ce6:	4290      	cmp	r0, r2
  403ce8:	d137      	bne.n	403d5a <chk_mounted+0x346>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  403cea:	f895 1217 	ldrb.w	r1, [r5, #535]	; 0x217
  403cee:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
  403cf2:	ea4f 4003 	mov.w	r0, r3, lsl #16
  403cf6:	ea40 6201 	orr.w	r2, r0, r1, lsl #24
  403cfa:	f895 1214 	ldrb.w	r1, [r5, #532]	; 0x214
  403cfe:	ea42 0301 	orr.w	r3, r2, r1
  403d02:	f895 0215 	ldrb.w	r0, [r5, #533]	; 0x215
  403d06:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  403d0a:	f247 2172 	movw	r1, #29298	; 0x7272
  403d0e:	f2c6 1141 	movt	r1, #24897	; 0x6141
  403d12:	428a      	cmp	r2, r1
  403d14:	d121      	bne.n	403d5a <chk_mounted+0x346>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  403d16:	f895 021f 	ldrb.w	r0, [r5, #543]	; 0x21f
  403d1a:	f895 321e 	ldrb.w	r3, [r5, #542]	; 0x21e
  403d1e:	ea4f 4203 	mov.w	r2, r3, lsl #16
  403d22:	ea42 6100 	orr.w	r1, r2, r0, lsl #24
  403d26:	f895 021c 	ldrb.w	r0, [r5, #540]	; 0x21c
  403d2a:	ea41 0300 	orr.w	r3, r1, r0
  403d2e:	f895 221d 	ldrb.w	r2, [r5, #541]	; 0x21d
  403d32:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
  403d36:	60e9      	str	r1, [r5, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  403d38:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
  403d3c:	f895 321a 	ldrb.w	r3, [r5, #538]	; 0x21a
  403d40:	ea4f 4203 	mov.w	r2, r3, lsl #16
  403d44:	ea42 6100 	orr.w	r1, r2, r0, lsl #24
  403d48:	f895 0218 	ldrb.w	r0, [r5, #536]	; 0x218
  403d4c:	ea41 0300 	orr.w	r3, r1, r0
  403d50:	f895 2219 	ldrb.w	r2, [r5, #537]	; 0x219
  403d54:	ea43 2102 	orr.w	r1, r3, r2, lsl #8
  403d58:	6129      	str	r1, [r5, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
  403d5a:	702e      	strb	r6, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
  403d5c:	4832      	ldr	r0, [pc, #200]	; (403e28 <chk_mounted+0x414>)
  403d5e:	8803      	ldrh	r3, [r0, #0]
  403d60:	f103 0301 	add.w	r3, r3, #1
  403d64:	b29a      	uxth	r2, r3
  403d66:	8002      	strh	r2, [r0, #0]
  403d68:	80ea      	strh	r2, [r5, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
  403d6a:	f04f 0000 	mov.w	r0, #0
  403d6e:	62e8      	str	r0, [r5, #44]	; 0x2c
	fs->wflag = 0;
  403d70:	7128      	strb	r0, [r5, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
  403d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
  403d76:	f04f 000b 	mov.w	r0, #11
  403d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
  403d7e:	f04f 000c 	mov.w	r0, #12
  403d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
  403d86:	f04f 0000 	mov.w	r0, #0
  403d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
  403d8e:	f04f 0003 	mov.w	r0, #3
  403d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
  403d96:	f04f 000a 	mov.w	r0, #10
  403d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  403d9e:	f04f 000d 	mov.w	r0, #13
  403da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  403da6:	f04f 0001 	mov.w	r0, #1
  403daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
  403dae:	f04f 000d 	mov.w	r0, #13
  403db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
  403db6:	f04f 000d 	mov.w	r0, #13
  403dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
  403dbe:	f04f 000d 	mov.w	r0, #13
  403dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
  403dc6:	f04f 000d 	mov.w	r0, #13
  403dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403dce:	f04f 000d 	mov.w	r0, #13
  403dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
  403dd6:	f04f 000d 	mov.w	r0, #13
  403dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
  403dde:	f04f 000d 	mov.w	r0, #13
  403de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
  403de6:	f04f 000d 	mov.w	r0, #13
  403dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
  403dee:	f04f 000d 	mov.w	r0, #13
  403df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
  403df6:	f04f 000d 	mov.w	r0, #13
  403dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
  403dfe:	f04f 000d 	mov.w	r0, #13
  403e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
  403e06:	f04f 000d 	mov.w	r0, #13
  403e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
  403e0e:	f103 0302 	add.w	r3, r3, #2
  403e12:	61ab      	str	r3, [r5, #24]
	fs->database = bsect + sysect;						/* Data start sector */
  403e14:	1916      	adds	r6, r2, r4
  403e16:	62ae      	str	r6, [r5, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
  403e18:	19e7      	adds	r7, r4, r7
  403e1a:	622f      	str	r7, [r5, #32]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  403e1c:	f04f 0603 	mov.w	r6, #3
  403e20:	e6f8      	b.n	403c14 <chk_mounted+0x200>
  403e22:	bf00      	nop
  403e24:	00403519 	.word	0x00403519
  403e28:	20000d6c 	.word	0x20000d6c

00403e2c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
  403e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403e30:	4604      	mov	r4, r0
  403e32:	460d      	mov	r5, r1
	DWORD wsect;


	wsect = fs->winsect;
  403e34:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
  403e36:	428e      	cmp	r6, r1
  403e38:	d05b      	beq.n	403ef2 <move_window+0xc6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
  403e3a:	7903      	ldrb	r3, [r0, #4]
  403e3c:	2b00      	cmp	r3, #0
  403e3e:	d048      	beq.n	403ed2 <move_window+0xa6>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  403e40:	f100 0730 	add.w	r7, r0, #48	; 0x30
  403e44:	7840      	ldrb	r0, [r0, #1]
  403e46:	4639      	mov	r1, r7
  403e48:	4632      	mov	r2, r6
  403e4a:	f04f 0301 	mov.w	r3, #1
  403e4e:	f243 5cfd 	movw	ip, #13821	; 0x35fd
  403e52:	f2c0 0c40 	movt	ip, #64	; 0x40
  403e56:	47e0      	blx	ip
  403e58:	2800      	cmp	r0, #0
  403e5a:	d14e      	bne.n	403efa <move_window+0xce>
				return FR_DISK_ERR;
			fs->wflag = 0;
  403e5c:	f04f 0000 	mov.w	r0, #0
  403e60:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
  403e62:	69e2      	ldr	r2, [r4, #28]
  403e64:	6a21      	ldr	r1, [r4, #32]
  403e66:	1853      	adds	r3, r2, r1
  403e68:	429e      	cmp	r6, r3
  403e6a:	d232      	bcs.n	403ed2 <move_window+0xa6>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  403e6c:	f894 a003 	ldrb.w	sl, [r4, #3]
  403e70:	f1ba 0f01 	cmp.w	sl, #1
  403e74:	d92d      	bls.n	403ed2 <move_window+0xa6>
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
  403e76:	f04f 0901 	mov.w	r9, #1
  403e7a:	f243 58fd 	movw	r8, #13821	; 0x35fd
  403e7e:	f2c0 0840 	movt	r8, #64	; 0x40
  403e82:	ea0a 0b09 	and.w	fp, sl, r9
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
  403e86:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
  403e88:	7860      	ldrb	r0, [r4, #1]
  403e8a:	4639      	mov	r1, r7
  403e8c:	4632      	mov	r2, r6
  403e8e:	464b      	mov	r3, r9
  403e90:	47c0      	blx	r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  403e92:	f10a 3aff 	add.w	sl, sl, #4294967295
  403e96:	fa5f fa8a 	uxtb.w	sl, sl
  403e9a:	45ca      	cmp	sl, r9
  403e9c:	d139      	bne.n	403f12 <move_window+0xe6>
  403e9e:	e018      	b.n	403ed2 <move_window+0xa6>
					wsect += fs->fsize;
  403ea0:	69e0      	ldr	r0, [r4, #28]
  403ea2:	1836      	adds	r6, r6, r0
					disk_write(fs->drv, fs->win, wsect, 1);
  403ea4:	7860      	ldrb	r0, [r4, #1]
  403ea6:	4639      	mov	r1, r7
  403ea8:	4632      	mov	r2, r6
  403eaa:	464b      	mov	r3, r9
  403eac:	47c0      	blx	r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  403eae:	f10a 3cff 	add.w	ip, sl, #4294967295
  403eb2:	f00c 0aff 	and.w	sl, ip, #255	; 0xff
					wsect += fs->fsize;
  403eb6:	69e2      	ldr	r2, [r4, #28]
  403eb8:	18b6      	adds	r6, r6, r2
					disk_write(fs->drv, fs->win, wsect, 1);
  403eba:	7860      	ldrb	r0, [r4, #1]
  403ebc:	4639      	mov	r1, r7
  403ebe:	4632      	mov	r2, r6
  403ec0:	464b      	mov	r3, r9
  403ec2:	47c0      	blx	r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  403ec4:	f10a 31ff 	add.w	r1, sl, #4294967295
  403ec8:	fa5f fa81 	uxtb.w	sl, r1
  403ecc:	f1ba 0f01 	cmp.w	sl, #1
  403ed0:	d1e6      	bne.n	403ea0 <move_window+0x74>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
  403ed2:	b1b5      	cbz	r5, 403f02 <move_window+0xd6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  403ed4:	7860      	ldrb	r0, [r4, #1]
  403ed6:	f104 0130 	add.w	r1, r4, #48	; 0x30
  403eda:	462a      	mov	r2, r5
  403edc:	f04f 0301 	mov.w	r3, #1
  403ee0:	f243 5619 	movw	r6, #13593	; 0x3519
  403ee4:	f2c0 0640 	movt	r6, #64	; 0x40
  403ee8:	47b0      	blx	r6
  403eea:	b970      	cbnz	r0, 403f0a <move_window+0xde>
				return FR_DISK_ERR;
			fs->winsect = sector;
  403eec:	62e5      	str	r5, [r4, #44]	; 0x2c
  403eee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
	}

	return FR_OK;
  403ef2:	f04f 0000 	mov.w	r0, #0
  403ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
  403efa:	f04f 0001 	mov.w	r0, #1
  403efe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
  403f02:	f04f 0000 	mov.w	r0, #0
  403f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
  403f0a:	f04f 0001 	mov.w	r0, #1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
  403f0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f12:	fa4f f28b 	sxtb.w	r2, fp
  403f16:	2a00      	cmp	r2, #0
  403f18:	d0c2      	beq.n	403ea0 <move_window+0x74>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
  403f1a:	69e1      	ldr	r1, [r4, #28]
  403f1c:	1876      	adds	r6, r6, r1
					disk_write(fs->drv, fs->win, wsect, 1);
  403f1e:	7860      	ldrb	r0, [r4, #1]
  403f20:	4639      	mov	r1, r7
  403f22:	4632      	mov	r2, r6
  403f24:	464b      	mov	r3, r9
  403f26:	47c0      	blx	r8
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
  403f28:	f10a 33ff 	add.w	r3, sl, #4294967295
  403f2c:	fa5f fa83 	uxtb.w	sl, r3
  403f30:	f1ba 0f01 	cmp.w	sl, #1
  403f34:	d1b4      	bne.n	403ea0 <move_window+0x74>
  403f36:	e7cc      	b.n	403ed2 <move_window+0xa6>

00403f38 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
  403f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403f3a:	4605      	mov	r5, r0
  403f3c:	460c      	mov	r4, r1
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
  403f3e:	2901      	cmp	r1, #1
  403f40:	d978      	bls.n	404034 <get_fat+0xfc>
  403f42:	6983      	ldr	r3, [r0, #24]
  403f44:	4299      	cmp	r1, r3
  403f46:	d278      	bcs.n	40403a <get_fat+0x102>
		return 1;

	switch (fs->fs_type) {
  403f48:	7800      	ldrb	r0, [r0, #0]
  403f4a:	2802      	cmp	r0, #2
  403f4c:	d038      	beq.n	403fc0 <get_fat+0x88>
  403f4e:	2803      	cmp	r0, #3
  403f50:	d04e      	beq.n	403ff0 <get_fat+0xb8>
  403f52:	2801      	cmp	r0, #1
  403f54:	d174      	bne.n	404040 <get_fat+0x108>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
  403f56:	eb01 0651 	add.w	r6, r1, r1, lsr #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  403f5a:	6a29      	ldr	r1, [r5, #32]
  403f5c:	4628      	mov	r0, r5
  403f5e:	eb01 2156 	add.w	r1, r1, r6, lsr #9
  403f62:	f643 622d 	movw	r2, #15917	; 0x3e2d
  403f66:	f2c0 0240 	movt	r2, #64	; 0x40
  403f6a:	4790      	blx	r2
  403f6c:	2800      	cmp	r0, #0
  403f6e:	d16a      	bne.n	404046 <get_fat+0x10e>
		wc = fs->win[bc % SS(fs)]; bc++;
  403f70:	ea4f 57c6 	mov.w	r7, r6, lsl #23
  403f74:	ea4f 53d7 	mov.w	r3, r7, lsr #23
  403f78:	18e8      	adds	r0, r5, r3
  403f7a:	f890 7030 	ldrb.w	r7, [r0, #48]	; 0x30
  403f7e:	f106 0601 	add.w	r6, r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  403f82:	6a29      	ldr	r1, [r5, #32]
  403f84:	4628      	mov	r0, r5
  403f86:	eb01 2156 	add.w	r1, r1, r6, lsr #9
  403f8a:	f643 622d 	movw	r2, #15917	; 0x3e2d
  403f8e:	f2c0 0240 	movt	r2, #64	; 0x40
  403f92:	4790      	blx	r2
  403f94:	2800      	cmp	r0, #0
  403f96:	d159      	bne.n	40404c <get_fat+0x114>
		wc |= fs->win[bc % SS(fs)] << 8;
  403f98:	ea4f 56c6 	mov.w	r6, r6, lsl #23
  403f9c:	ea4f 56d6 	mov.w	r6, r6, lsr #23
  403fa0:	19ad      	adds	r5, r5, r6
  403fa2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  403fa6:	ea47 2003 	orr.w	r0, r7, r3, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  403faa:	f014 0f01 	tst.w	r4, #1
  403fae:	d002      	beq.n	403fb6 <get_fat+0x7e>
  403fb0:	ea4f 1010 	mov.w	r0, r0, lsr #4
  403fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403fb6:	ea4f 5100 	mov.w	r1, r0, lsl #20
  403fba:	ea4f 5011 	mov.w	r0, r1, lsr #20
  403fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  403fc0:	6a2b      	ldr	r3, [r5, #32]
  403fc2:	4628      	mov	r0, r5
  403fc4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
  403fc8:	f643 622d 	movw	r2, #15917	; 0x3e2d
  403fcc:	f2c0 0240 	movt	r2, #64	; 0x40
  403fd0:	4790      	blx	r2
  403fd2:	2800      	cmp	r0, #0
  403fd4:	d13d      	bne.n	404052 <get_fat+0x11a>
		p = &fs->win[clst * 2 % SS(fs)];
  403fd6:	ea4f 6004 	mov.w	r0, r4, lsl #24
  403fda:	ea4f 54d0 	mov.w	r4, r0, lsr #23
		return LD_WORD(p);
  403fde:	1929      	adds	r1, r5, r4
  403fe0:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
  403fe4:	192c      	adds	r4, r5, r4
  403fe6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
  403fea:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
  403fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  403ff0:	6a2a      	ldr	r2, [r5, #32]
  403ff2:	4628      	mov	r0, r5
  403ff4:	eb02 11d1 	add.w	r1, r2, r1, lsr #7
  403ff8:	f643 632d 	movw	r3, #15917	; 0x3e2d
  403ffc:	f2c0 0340 	movt	r3, #64	; 0x40
  404000:	4798      	blx	r3
  404002:	2800      	cmp	r0, #0
  404004:	d128      	bne.n	404058 <get_fat+0x120>
		p = &fs->win[clst * 4 % SS(fs)];
  404006:	ea4f 6444 	mov.w	r4, r4, lsl #25
  40400a:	ea4f 51d4 	mov.w	r1, r4, lsr #23
  40400e:	f101 0030 	add.w	r0, r1, #48	; 0x30
  404012:	182b      	adds	r3, r5, r0
		return LD_DWORD(p) & 0x0FFFFFFF;
  404014:	789c      	ldrb	r4, [r3, #2]
  404016:	78da      	ldrb	r2, [r3, #3]
  404018:	ea4f 6002 	mov.w	r0, r2, lsl #24
  40401c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
  404020:	785b      	ldrb	r3, [r3, #1]
  404022:	ea44 2203 	orr.w	r2, r4, r3, lsl #8
  404026:	186c      	adds	r4, r5, r1
  404028:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  40402c:	430a      	orrs	r2, r1
  40402e:	f022 4070 	bic.w	r0, r2, #4026531840	; 0xf0000000
  404032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
  404034:	f04f 0001 	mov.w	r0, #1
  404038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40403a:	f04f 0001 	mov.w	r0, #1
  40403e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
  404040:	f04f 30ff 	mov.w	r0, #4294967295
  404044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404046:	f04f 30ff 	mov.w	r0, #4294967295
  40404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40404c:	f04f 30ff 	mov.w	r0, #4294967295
  404050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404052:	f04f 30ff 	mov.w	r0, #4294967295
  404056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404058:	f04f 30ff 	mov.w	r0, #4294967295
}
  40405c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40405e:	bf00      	nop

00404060 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
  404060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404062:	4604      	mov	r4, r0
  404064:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
  404066:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
  404068:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
  40406a:	2901      	cmp	r1, #1
  40406c:	d043      	beq.n	4040f6 <dir_sdi+0x96>
  40406e:	6803      	ldr	r3, [r0, #0]
  404070:	699a      	ldr	r2, [r3, #24]
  404072:	4291      	cmp	r1, r2
  404074:	d242      	bcs.n	4040fc <dir_sdi+0x9c>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  404076:	b979      	cbnz	r1, 404098 <dir_sdi+0x38>
  404078:	7818      	ldrb	r0, [r3, #0]
  40407a:	2803      	cmp	r0, #3
  40407c:	d101      	bne.n	404082 <dir_sdi+0x22>
		clst = dj->fs->dirbase;
  40407e:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
  404080:	b951      	cbnz	r1, 404098 <dir_sdi+0x38>
		dj->clust = clst;
  404082:	f04f 0000 	mov.w	r0, #0
  404086:	60e0      	str	r0, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
  404088:	891a      	ldrh	r2, [r3, #8]
  40408a:	42aa      	cmp	r2, r5
  40408c:	d939      	bls.n	404102 <dir_sdi+0xa2>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  40408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  404090:	eb03 1115 	add.w	r1, r3, r5, lsr #4
  404094:	6121      	str	r1, [r4, #16]
  404096:	e022      	b.n	4040de <dir_sdi+0x7e>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
  404098:	789e      	ldrb	r6, [r3, #2]
  40409a:	ea4f 1606 	mov.w	r6, r6, lsl #4
		while (idx >= ic) {	/* Follow cluster chain */
  40409e:	42b5      	cmp	r5, r6
  4040a0:	d313      	bcc.n	4040ca <dir_sdi+0x6a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
  4040a2:	f643 7739 	movw	r7, #16185	; 0x3f39
  4040a6:	f2c0 0740 	movt	r7, #64	; 0x40
  4040aa:	6820      	ldr	r0, [r4, #0]
  4040ac:	47b8      	blx	r7
  4040ae:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  4040b0:	f1b0 3fff 	cmp.w	r0, #4294967295
  4040b4:	d028      	beq.n	404108 <dir_sdi+0xa8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
  4040b6:	2801      	cmp	r0, #1
  4040b8:	d929      	bls.n	40410e <dir_sdi+0xae>
  4040ba:	6823      	ldr	r3, [r4, #0]
  4040bc:	699a      	ldr	r2, [r3, #24]
  4040be:	4290      	cmp	r0, r2
  4040c0:	d228      	bcs.n	404114 <dir_sdi+0xb4>
				return FR_INT_ERR;
			idx -= ic;
  4040c2:	1bad      	subs	r5, r5, r6
  4040c4:	b2ad      	uxth	r5, r5
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
  4040c6:	42ae      	cmp	r6, r5
  4040c8:	d9ef      	bls.n	4040aa <dir_sdi+0x4a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
  4040ca:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
  4040cc:	6820      	ldr	r0, [r4, #0]
  4040ce:	f643 0365 	movw	r3, #14437	; 0x3865
  4040d2:	f2c0 0340 	movt	r3, #64	; 0x40
  4040d6:	4798      	blx	r3
  4040d8:	eb00 1115 	add.w	r1, r0, r5, lsr #4
  4040dc:	6121      	str	r1, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
  4040de:	f005 000f 	and.w	r0, r5, #15
  4040e2:	ea4f 1240 	mov.w	r2, r0, lsl #5
  4040e6:	f102 0230 	add.w	r2, r2, #48	; 0x30
  4040ea:	6823      	ldr	r3, [r4, #0]
  4040ec:	1899      	adds	r1, r3, r2
  4040ee:	6161      	str	r1, [r4, #20]

	return FR_OK;	/* Seek succeeded */
  4040f0:	f04f 0000 	mov.w	r0, #0
  4040f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
  4040f6:	f04f 0002 	mov.w	r0, #2
  4040fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040fc:	f04f 0002 	mov.w	r0, #2
  404100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
  404102:	f04f 0002 	mov.w	r0, #2
  404106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
  404108:	f04f 0001 	mov.w	r0, #1
  40410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
  40410e:	f04f 0002 	mov.w	r0, #2
  404112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404114:	f04f 0002 	mov.w	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
  404118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40411a:	bf00      	nop

0040411c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
  40411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40411e:	4605      	mov	r5, r0
  404120:	460c      	mov	r4, r1
  404122:	4616      	mov	r6, r2
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  404124:	2901      	cmp	r1, #1
  404126:	f240 8097 	bls.w	404258 <put_fat+0x13c>
  40412a:	6983      	ldr	r3, [r0, #24]
  40412c:	4299      	cmp	r1, r3
  40412e:	f080 8096 	bcs.w	40425e <put_fat+0x142>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
  404132:	7800      	ldrb	r0, [r0, #0]
  404134:	2802      	cmp	r0, #2
  404136:	d04c      	beq.n	4041d2 <put_fat+0xb6>
  404138:	2803      	cmp	r0, #3
  40413a:	d062      	beq.n	404202 <put_fat+0xe6>
  40413c:	2801      	cmp	r0, #1
  40413e:	f040 8085 	bne.w	40424c <put_fat+0x130>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
  404142:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404146:	6a29      	ldr	r1, [r5, #32]
  404148:	4628      	mov	r0, r5
  40414a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  40414e:	f643 622d 	movw	r2, #15917	; 0x3e2d
  404152:	f2c0 0240 	movt	r2, #64	; 0x40
  404156:	4790      	blx	r2
			if (res != FR_OK) break;
  404158:	4603      	mov	r3, r0
  40415a:	2800      	cmp	r0, #0
  40415c:	d178      	bne.n	404250 <put_fat+0x134>
			p = &fs->win[bc % SS(fs)];
  40415e:	ea4f 53c7 	mov.w	r3, r7, lsl #23
  404162:	ea4f 50d3 	mov.w	r0, r3, lsr #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  404166:	f014 0401 	ands.w	r4, r4, #1
  40416a:	d009      	beq.n	404180 <put_fat+0x64>
  40416c:	182a      	adds	r2, r5, r0
  40416e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
  404172:	f003 020f 	and.w	r2, r3, #15
		if (cc != EOF) cc = res;
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
}
  404176:	b2f1      	uxtb	r1, r6
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
  404178:	ea42 1301 	orr.w	r3, r2, r1, lsl #4
  40417c:	b2d9      	uxtb	r1, r3
  40417e:	e000      	b.n	404182 <put_fat+0x66>
  404180:	b2f1      	uxtb	r1, r6
  404182:	1828      	adds	r0, r5, r0
  404184:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
			bc++;
  404188:	f107 0701 	add.w	r7, r7, #1
			fs->wflag = 1;
  40418c:	f04f 0201 	mov.w	r2, #1
  404190:	712a      	strb	r2, [r5, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  404192:	6a29      	ldr	r1, [r5, #32]
  404194:	4628      	mov	r0, r5
  404196:	eb01 2157 	add.w	r1, r1, r7, lsr #9
  40419a:	f643 632d 	movw	r3, #15917	; 0x3e2d
  40419e:	f2c0 0340 	movt	r3, #64	; 0x40
  4041a2:	4798      	blx	r3
			if (res != FR_OK) break;
  4041a4:	4603      	mov	r3, r0
  4041a6:	2800      	cmp	r0, #0
  4041a8:	d152      	bne.n	404250 <put_fat+0x134>
			p = &fs->win[bc % SS(fs)];
  4041aa:	ea4f 57c7 	mov.w	r7, r7, lsl #23
  4041ae:	ea4f 50d7 	mov.w	r0, r7, lsr #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
  4041b2:	b114      	cbz	r4, 4041ba <put_fat+0x9e>
  4041b4:	f3c6 1607 	ubfx	r6, r6, #4, #8
  4041b8:	e007      	b.n	4041ca <put_fat+0xae>
  4041ba:	182a      	adds	r2, r5, r0
  4041bc:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
  4041c0:	f021 070f 	bic.w	r7, r1, #15
  4041c4:	f3c6 2603 	ubfx	r6, r6, #8, #4
  4041c8:	433e      	orrs	r6, r7
  4041ca:	182f      	adds	r7, r5, r0
  4041cc:	f887 6030 	strb.w	r6, [r7, #48]	; 0x30
			break;
  4041d0:	e03e      	b.n	404250 <put_fat+0x134>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  4041d2:	6a2b      	ldr	r3, [r5, #32]
  4041d4:	4628      	mov	r0, r5
  4041d6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
  4041da:	f643 622d 	movw	r2, #15917	; 0x3e2d
  4041de:	f2c0 0240 	movt	r2, #64	; 0x40
  4041e2:	4790      	blx	r2
			if (res != FR_OK) break;
  4041e4:	4603      	mov	r3, r0
  4041e6:	bb98      	cbnz	r0, 404250 <put_fat+0x134>
			p = &fs->win[clst * 2 % SS(fs)];
  4041e8:	ea4f 6404 	mov.w	r4, r4, lsl #24
  4041ec:	ea4f 51d4 	mov.w	r1, r4, lsr #23
			ST_WORD(p, (WORD)val);
  4041f0:	1868      	adds	r0, r5, r1
  4041f2:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
  4041f6:	4604      	mov	r4, r0
  4041f8:	f3c6 2607 	ubfx	r6, r6, #8, #8
  4041fc:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
			break;
  404200:	e026      	b.n	404250 <put_fat+0x134>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  404202:	6a2b      	ldr	r3, [r5, #32]
  404204:	4628      	mov	r0, r5
  404206:	eb03 11d1 	add.w	r1, r3, r1, lsr #7
  40420a:	f643 622d 	movw	r2, #15917	; 0x3e2d
  40420e:	f2c0 0240 	movt	r2, #64	; 0x40
  404212:	4790      	blx	r2
			if (res != FR_OK) break;
  404214:	4603      	mov	r3, r0
  404216:	b9d8      	cbnz	r0, 404250 <put_fat+0x134>
			p = &fs->win[clst * 4 % SS(fs)];
  404218:	ea4f 6444 	mov.w	r4, r4, lsl #25
  40421c:	ea4f 50d4 	mov.w	r0, r4, lsr #23
  404220:	f100 0130 	add.w	r1, r0, #48	; 0x30
  404224:	186a      	adds	r2, r5, r1
			val |= LD_DWORD(p) & 0xF0000000;
  404226:	78d4      	ldrb	r4, [r2, #3]
  404228:	ea4f 6104 	mov.w	r1, r4, lsl #24
  40422c:	182c      	adds	r4, r5, r0
  40422e:	f001 4070 	and.w	r0, r1, #4026531840	; 0xf0000000
  404232:	4306      	orrs	r6, r0
			ST_DWORD(p, val);
  404234:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  404238:	f3c6 2107 	ubfx	r1, r6, #8, #8
  40423c:	7051      	strb	r1, [r2, #1]
  40423e:	ea4f 4016 	mov.w	r0, r6, lsr #16
  404242:	7090      	strb	r0, [r2, #2]
  404244:	ea4f 6616 	mov.w	r6, r6, lsr #24
  404248:	70d6      	strb	r6, [r2, #3]
			break;
  40424a:	e001      	b.n	404250 <put_fat+0x134>

		default :
			res = FR_INT_ERR;
  40424c:	f04f 0302 	mov.w	r3, #2
		}
		fs->wflag = 1;
  404250:	f04f 0201 	mov.w	r2, #1
  404254:	712a      	strb	r2, [r5, #4]
  404256:	e004      	b.n	404262 <put_fat+0x146>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  404258:	f04f 0302 	mov.w	r3, #2
  40425c:	e001      	b.n	404262 <put_fat+0x146>
  40425e:	f04f 0302 	mov.w	r3, #2
		}
		fs->wflag = 1;
	}

	return res;
}
  404262:	4618      	mov	r0, r3
  404264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404266:	bf00      	nop

00404268 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
  404268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40426c:	4605      	mov	r5, r0
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
  40426e:	4689      	mov	r9, r1
  404270:	b931      	cbnz	r1, 404280 <create_chain+0x18>
		scl = fs->last_clust;			/* Get suggested start point */
  404272:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
  404274:	b18e      	cbz	r6, 40429a <create_chain+0x32>
  404276:	6980      	ldr	r0, [r0, #24]
  404278:	4286      	cmp	r6, r0
  40427a:	bf28      	it	cs
  40427c:	2601      	movcs	r6, #1
  40427e:	e00e      	b.n	40429e <create_chain+0x36>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
  404280:	f643 7339 	movw	r3, #16185	; 0x3f39
  404284:	f2c0 0340 	movt	r3, #64	; 0x40
  404288:	4798      	blx	r3
  40428a:	4601      	mov	r1, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40428c:	2801      	cmp	r0, #1
  40428e:	d94e      	bls.n	40432e <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
  404290:	69aa      	ldr	r2, [r5, #24]
  404292:	4290      	cmp	r0, r2
  404294:	d355      	bcc.n	404342 <create_chain+0xda>
		scl = clst;
  404296:	464e      	mov	r6, r9
  404298:	e001      	b.n	40429e <create_chain+0x36>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
  40429a:	f04f 0601 	mov.w	r6, #1
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
  40429e:	4634      	mov	r4, r6
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
  4042a0:	f04f 0802 	mov.w	r8, #2
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4042a4:	f643 7739 	movw	r7, #16185	; 0x3f39
  4042a8:	f2c0 0740 	movt	r7, #64	; 0x40
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
  4042ac:	f104 0401 	add.w	r4, r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
  4042b0:	69a9      	ldr	r1, [r5, #24]
  4042b2:	428c      	cmp	r4, r1
  4042b4:	d302      	bcc.n	4042bc <create_chain+0x54>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  4042b6:	2e01      	cmp	r6, #1
  4042b8:	d93c      	bls.n	404334 <create_chain+0xcc>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
  4042ba:	4644      	mov	r4, r8
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
  4042bc:	4628      	mov	r0, r5
  4042be:	4621      	mov	r1, r4
  4042c0:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
  4042c2:	4601      	mov	r1, r0
  4042c4:	b138      	cbz	r0, 4042d6 <create_chain+0x6e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  4042c6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4042ca:	d03a      	beq.n	404342 <create_chain+0xda>
  4042cc:	2801      	cmp	r0, #1
  4042ce:	d038      	beq.n	404342 <create_chain+0xda>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  4042d0:	42b4      	cmp	r4, r6
  4042d2:	d1eb      	bne.n	4042ac <create_chain+0x44>
  4042d4:	e031      	b.n	40433a <create_chain+0xd2>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
  4042d6:	4626      	mov	r6, r4
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
  4042d8:	4628      	mov	r0, r5
  4042da:	4621      	mov	r1, r4
  4042dc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
  4042e0:	f244 131d 	movw	r3, #16669	; 0x411d
  4042e4:	f2c0 0340 	movt	r3, #64	; 0x40
  4042e8:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
  4042ea:	4602      	mov	r2, r0
  4042ec:	b9c8      	cbnz	r0, 404322 <create_chain+0xba>
  4042ee:	f1b9 0f00 	cmp.w	r9, #0
  4042f2:	d009      	beq.n	404308 <create_chain+0xa0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
  4042f4:	4628      	mov	r0, r5
  4042f6:	4649      	mov	r1, r9
  4042f8:	4622      	mov	r2, r4
  4042fa:	f244 131d 	movw	r3, #16669	; 0x411d
  4042fe:	f2c0 0340 	movt	r3, #64	; 0x40
  404302:	4798      	blx	r3
	}
	if (res == FR_OK) {
  404304:	4602      	mov	r2, r0
  404306:	b960      	cbnz	r0, 404322 <create_chain+0xba>
		fs->last_clust = ncl;			/* Update FSINFO */
  404308:	60ee      	str	r6, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
  40430a:	6928      	ldr	r0, [r5, #16]
  40430c:	f1b0 3fff 	cmp.w	r0, #4294967295
  404310:	d016      	beq.n	404340 <create_chain+0xd8>
			fs->free_clust--;
  404312:	f100 33ff 	add.w	r3, r0, #4294967295
  404316:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
  404318:	f04f 0201 	mov.w	r2, #1
  40431c:	716a      	strb	r2, [r5, #5]
  40431e:	4621      	mov	r1, r4
  404320:	e00f      	b.n	404342 <create_chain+0xda>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  404322:	2a01      	cmp	r2, #1
  404324:	bf14      	ite	ne
  404326:	2101      	movne	r1, #1
  404328:	f04f 31ff 	moveq.w	r1, #4294967295
  40432c:	e009      	b.n	404342 <create_chain+0xda>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
  40432e:	f04f 0101 	mov.w	r1, #1
  404332:	e006      	b.n	404342 <create_chain+0xda>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
  404334:	f04f 0100 	mov.w	r1, #0
  404338:	e003      	b.n	404342 <create_chain+0xda>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
  40433a:	f04f 0100 	mov.w	r1, #0
  40433e:	e000      	b.n	404342 <create_chain+0xda>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
  404340:	4621      	mov	r1, r4
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
	}

	return ncl;		/* Return new cluster number or error code */
}
  404342:	4608      	mov	r0, r1
  404344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00404348 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
  404348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40434c:	4604      	mov	r4, r0
  40434e:	460e      	mov	r6, r1
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
  404350:	2901      	cmp	r1, #1
  404352:	d92c      	bls.n	4043ae <remove_chain+0x66>
  404354:	6983      	ldr	r3, [r0, #24]
  404356:	4299      	cmp	r1, r3
  404358:	d22c      	bcs.n	4043b4 <remove_chain+0x6c>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
  40435a:	f643 7739 	movw	r7, #16185	; 0x3f39
  40435e:	f2c0 0740 	movt	r7, #64	; 0x40
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  404362:	f04f 0900 	mov.w	r9, #0
  404366:	f244 181d 	movw	r8, #16669	; 0x411d
  40436a:	f2c0 0840 	movt	r8, #64	; 0x40
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
  40436e:	f04f 0a01 	mov.w	sl, #1
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
  404372:	4620      	mov	r0, r4
  404374:	4631      	mov	r1, r6
  404376:	47b8      	blx	r7
			if (nxt == 0) break;				/* Empty cluster? */
  404378:	4605      	mov	r5, r0
  40437a:	b1f0      	cbz	r0, 4043ba <remove_chain+0x72>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  40437c:	2801      	cmp	r0, #1
  40437e:	d01f      	beq.n	4043c0 <remove_chain+0x78>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  404380:	f1b0 3fff 	cmp.w	r0, #4294967295
  404384:	d01f      	beq.n	4043c6 <remove_chain+0x7e>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
  404386:	4620      	mov	r0, r4
  404388:	4631      	mov	r1, r6
  40438a:	464a      	mov	r2, r9
  40438c:	47c0      	blx	r8
			if (res != FR_OK) break;
  40438e:	4602      	mov	r2, r0
  404390:	b9d8      	cbnz	r0, 4043ca <remove_chain+0x82>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
  404392:	6920      	ldr	r0, [r4, #16]
  404394:	f1b0 3fff 	cmp.w	r0, #4294967295
  404398:	d004      	beq.n	4043a4 <remove_chain+0x5c>
				fs->free_clust++;
  40439a:	f100 0001 	add.w	r0, r0, #1
  40439e:	6120      	str	r0, [r4, #16]
				fs->fsi_flag = 1;
  4043a0:	f884 a005 	strb.w	sl, [r4, #5]
  4043a4:	462e      	mov	r6, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
  4043a6:	69a1      	ldr	r1, [r4, #24]
  4043a8:	42a9      	cmp	r1, r5
  4043aa:	d8e2      	bhi.n	404372 <remove_chain+0x2a>
  4043ac:	e00d      	b.n	4043ca <remove_chain+0x82>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
  4043ae:	f04f 0202 	mov.w	r2, #2
  4043b2:	e00a      	b.n	4043ca <remove_chain+0x82>
  4043b4:	f04f 0202 	mov.w	r2, #2
  4043b8:	e007      	b.n	4043ca <remove_chain+0x82>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
  4043ba:	f04f 0200 	mov.w	r2, #0
  4043be:	e004      	b.n	4043ca <remove_chain+0x82>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
  4043c0:	f04f 0202 	mov.w	r2, #2
  4043c4:	e001      	b.n	4043ca <remove_chain+0x82>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
  4043c6:	f04f 0201 	mov.w	r2, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
  4043ca:	4610      	mov	r0, r2
  4043cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004043d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  4043d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4043d4:	4604      	mov	r4, r0
  4043d6:	460e      	mov	r6, r1
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
  4043d8:	88c5      	ldrh	r5, [r0, #6]
  4043da:	f105 0501 	add.w	r5, r5, #1
  4043de:	b2ad      	uxth	r5, r5
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  4043e0:	2d00      	cmp	r5, #0
  4043e2:	d07c      	beq.n	4044de <dir_next+0x10e>
  4043e4:	6903      	ldr	r3, [r0, #16]
  4043e6:	2b00      	cmp	r3, #0
  4043e8:	d07d      	beq.n	4044e6 <dir_next+0x116>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
  4043ea:	f015 070f 	ands.w	r7, r5, #15
  4043ee:	d16a      	bne.n	4044c6 <dir_next+0xf6>
		dj->sect++;					/* Next sector */
  4043f0:	f103 0301 	add.w	r3, r3, #1
  4043f4:	6103      	str	r3, [r0, #16]

		if (dj->clust == 0) {	/* Static table */
  4043f6:	68c1      	ldr	r1, [r0, #12]
  4043f8:	b921      	cbnz	r1, 404404 <dir_next+0x34>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
  4043fa:	6803      	ldr	r3, [r0, #0]
  4043fc:	891a      	ldrh	r2, [r3, #8]
  4043fe:	42aa      	cmp	r2, r5
  404400:	d975      	bls.n	4044ee <dir_next+0x11e>
  404402:	e060      	b.n	4044c6 <dir_next+0xf6>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
  404404:	6800      	ldr	r0, [r0, #0]
  404406:	7882      	ldrb	r2, [r0, #2]
  404408:	f102 33ff 	add.w	r3, r2, #4294967295
  40440c:	ea13 1315 	ands.w	r3, r3, r5, lsr #4
  404410:	d159      	bne.n	4044c6 <dir_next+0xf6>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
  404412:	f643 7239 	movw	r2, #16185	; 0x3f39
  404416:	f2c0 0240 	movt	r2, #64	; 0x40
  40441a:	4790      	blx	r2
  40441c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
  40441e:	2801      	cmp	r0, #1
  404420:	d969      	bls.n	4044f6 <dir_next+0x126>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  404422:	f1b0 3fff 	cmp.w	r0, #4294967295
  404426:	d06a      	beq.n	4044fe <dir_next+0x12e>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
  404428:	6820      	ldr	r0, [r4, #0]
  40442a:	6981      	ldr	r1, [r0, #24]
  40442c:	4588      	cmp	r8, r1
  40442e:	d340      	bcc.n	4044b2 <dir_next+0xe2>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  404430:	2e00      	cmp	r6, #0
  404432:	d068      	beq.n	404506 <dir_next+0x136>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
  404434:	68e1      	ldr	r1, [r4, #12]
  404436:	4b40      	ldr	r3, [pc, #256]	; (404538 <dir_next+0x168>)
  404438:	4798      	blx	r3
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  40443a:	4680      	mov	r8, r0
  40443c:	2800      	cmp	r0, #0
  40443e:	d066      	beq.n	40450e <dir_next+0x13e>
					if (clst == 1) return FR_INT_ERR;
  404440:	2801      	cmp	r0, #1
  404442:	d068      	beq.n	404516 <dir_next+0x146>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  404444:	f1b0 3fff 	cmp.w	r0, #4294967295
  404448:	d069      	beq.n	40451e <dir_next+0x14e>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  40444a:	6820      	ldr	r0, [r4, #0]
  40444c:	f04f 0100 	mov.w	r1, #0
  404450:	4a3a      	ldr	r2, [pc, #232]	; (40453c <dir_next+0x16c>)
  404452:	4790      	blx	r2
  404454:	2800      	cmp	r0, #0
  404456:	d166      	bne.n	404526 <dir_next+0x156>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
  404458:	6820      	ldr	r0, [r4, #0]
  40445a:	f100 0030 	add.w	r0, r0, #48	; 0x30
  40445e:	f04f 0100 	mov.w	r1, #0
  404462:	f44f 7200 	mov.w	r2, #512	; 0x200
  404466:	4e36      	ldr	r6, [pc, #216]	; (404540 <dir_next+0x170>)
  404468:	47b0      	blx	r6
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
  40446a:	6826      	ldr	r6, [r4, #0]
  40446c:	4630      	mov	r0, r6
  40446e:	4641      	mov	r1, r8
  404470:	4b34      	ldr	r3, [pc, #208]	; (404544 <dir_next+0x174>)
  404472:	4798      	blx	r3
  404474:	62f0      	str	r0, [r6, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  404476:	f04f 0600 	mov.w	r6, #0
						dj->fs->wflag = 1;
  40447a:	f04f 0a01 	mov.w	sl, #1
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40447e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 40453c <dir_next+0x16c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  404482:	e00f      	b.n	4044a4 <dir_next+0xd4>
						dj->fs->wflag = 1;
  404484:	f880 a004 	strb.w	sl, [r0, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  404488:	6820      	ldr	r0, [r4, #0]
  40448a:	f04f 0100 	mov.w	r1, #0
  40448e:	47c8      	blx	r9
  404490:	2800      	cmp	r0, #0
  404492:	d14c      	bne.n	40452e <dir_next+0x15e>
						dj->fs->winsect++;
  404494:	6820      	ldr	r0, [r4, #0]
  404496:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  404498:	f101 0101 	add.w	r1, r1, #1
  40449c:	62c1      	str	r1, [r0, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
  40449e:	f106 0601 	add.w	r6, r6, #1
  4044a2:	b2f6      	uxtb	r6, r6
  4044a4:	6820      	ldr	r0, [r4, #0]
  4044a6:	7881      	ldrb	r1, [r0, #2]
  4044a8:	42b1      	cmp	r1, r6
  4044aa:	d8eb      	bhi.n	404484 <dir_next+0xb4>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
  4044ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4044ae:	1b93      	subs	r3, r2, r6
  4044b0:	62c3      	str	r3, [r0, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
  4044b2:	f8c4 800c 	str.w	r8, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
  4044b6:	6820      	ldr	r0, [r4, #0]
  4044b8:	4641      	mov	r1, r8
  4044ba:	f643 0265 	movw	r2, #14437	; 0x3865
  4044be:	f2c0 0240 	movt	r2, #64	; 0x40
  4044c2:	4790      	blx	r2
  4044c4:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
  4044c6:	80e5      	strh	r5, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  4044c8:	ea4f 1747 	mov.w	r7, r7, lsl #5
  4044cc:	f107 0730 	add.w	r7, r7, #48	; 0x30
  4044d0:	6820      	ldr	r0, [r4, #0]
  4044d2:	19c1      	adds	r1, r0, r7
  4044d4:	6161      	str	r1, [r4, #20]

	return FR_OK;
  4044d6:	f04f 0000 	mov.w	r0, #0
  4044da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
  4044de:	f04f 0004 	mov.w	r0, #4
  4044e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044e6:	f04f 0004 	mov.w	r0, #4
  4044ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
  4044ee:	f04f 0004 	mov.w	r0, #4
  4044f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
  4044f6:	f04f 0002 	mov.w	r0, #2
  4044fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  4044fe:	f04f 0001 	mov.w	r0, #1
  404502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
  404506:	f04f 0004 	mov.w	r0, #4
  40450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
  40450e:	f04f 0007 	mov.w	r0, #7
  404512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 1) return FR_INT_ERR;
  404516:	f04f 0002 	mov.w	r0, #2
  40451a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  40451e:	f04f 0001 	mov.w	r0, #1
  404522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
  404526:	f04f 0001 	mov.w	r0, #1
  40452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  40452e:	f04f 0001 	mov.w	r0, #1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
  404532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404536:	bf00      	nop
  404538:	00404269 	.word	0x00404269
  40453c:	00403e2d 	.word	0x00403e2d
  404540:	00403815 	.word	0x00403815
  404544:	00403865 	.word	0x00403865

00404548 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
  404548:	b570      	push	{r4, r5, r6, lr}
  40454a:	4604      	mov	r4, r0
	FRESULT res;


	res = move_window(fs, 0);
  40454c:	f04f 0100 	mov.w	r1, #0
  404550:	f643 632d 	movw	r3, #15917	; 0x3e2d
  404554:	f2c0 0340 	movt	r3, #64	; 0x40
  404558:	4798      	blx	r3
	if (res == FR_OK) {
  40455a:	4601      	mov	r1, r0
  40455c:	2800      	cmp	r0, #0
  40455e:	d168      	bne.n	404632 <sync+0xea>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  404560:	7820      	ldrb	r0, [r4, #0]
  404562:	2803      	cmp	r0, #3
  404564:	d159      	bne.n	40461a <sync+0xd2>
  404566:	7961      	ldrb	r1, [r4, #5]
  404568:	2900      	cmp	r1, #0
  40456a:	d056      	beq.n	40461a <sync+0xd2>
			fs->winsect = 0;
  40456c:	f04f 0500 	mov.w	r5, #0
  404570:	62e5      	str	r5, [r4, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
  404572:	f104 0630 	add.w	r6, r4, #48	; 0x30
  404576:	4630      	mov	r0, r6
  404578:	4629      	mov	r1, r5
  40457a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40457e:	f643 0315 	movw	r3, #14357	; 0x3815
  404582:	f2c0 0340 	movt	r3, #64	; 0x40
  404586:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
  404588:	f04f 0255 	mov.w	r2, #85	; 0x55
  40458c:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
  404590:	f04f 00aa 	mov.w	r0, #170	; 0xaa
  404594:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  404598:	f04f 0152 	mov.w	r1, #82	; 0x52
  40459c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  4045a0:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
  4045a4:	f04f 0361 	mov.w	r3, #97	; 0x61
  4045a8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  4045ac:	f04f 0241 	mov.w	r2, #65	; 0x41
  4045b0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  4045b4:	f04f 0072 	mov.w	r0, #114	; 0x72
  4045b8:	f884 0214 	strb.w	r0, [r4, #532]	; 0x214
  4045bc:	f884 0215 	strb.w	r0, [r4, #533]	; 0x215
  4045c0:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
  4045c4:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  4045c8:	6921      	ldr	r1, [r4, #16]
  4045ca:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
  4045ce:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4045d2:	f884 3219 	strb.w	r3, [r4, #537]	; 0x219
  4045d6:	ea4f 4211 	mov.w	r2, r1, lsr #16
  4045da:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
  4045de:	ea4f 6011 	mov.w	r0, r1, lsr #24
  4045e2:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  4045e6:	68e1      	ldr	r1, [r4, #12]
  4045e8:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
  4045ec:	f3c1 2307 	ubfx	r3, r1, #8, #8
  4045f0:	f884 321d 	strb.w	r3, [r4, #541]	; 0x21d
  4045f4:	ea4f 4211 	mov.w	r2, r1, lsr #16
  4045f8:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
  4045fc:	ea4f 6011 	mov.w	r0, r1, lsr #24
  404600:	f884 021f 	strb.w	r0, [r4, #543]	; 0x21f
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  404604:	7860      	ldrb	r0, [r4, #1]
  404606:	4631      	mov	r1, r6
  404608:	6962      	ldr	r2, [r4, #20]
  40460a:	f04f 0301 	mov.w	r3, #1
  40460e:	f243 56fd 	movw	r6, #13821	; 0x35fd
  404612:	f2c0 0640 	movt	r6, #64	; 0x40
  404616:	47b0      	blx	r6
			fs->fsi_flag = 0;
  404618:	7165      	strb	r5, [r4, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  40461a:	7860      	ldrb	r0, [r4, #1]
  40461c:	f04f 0100 	mov.w	r1, #0
  404620:	460a      	mov	r2, r1
  404622:	f243 63e1 	movw	r3, #14049	; 0x36e1
  404626:	f2c0 0340 	movt	r3, #64	; 0x40
  40462a:	4798      	blx	r3
)
{
	FRESULT res;


	res = move_window(fs, 0);
  40462c:	1c01      	adds	r1, r0, #0
  40462e:	bf18      	it	ne
  404630:	2101      	movne	r1, #1
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
			res = FR_DISK_ERR;
	}

	return res;
}
  404632:	4608      	mov	r0, r1
  404634:	bd70      	pop	{r4, r5, r6, pc}
  404636:	bf00      	nop

00404638 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
  404638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40463c:	b085      	sub	sp, #20
  40463e:	4604      	mov	r4, r0
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
  404640:	f04f 0100 	mov.w	r1, #0
  404644:	f244 0361 	movw	r3, #16481	; 0x4061
  404648:	f2c0 0340 	movt	r3, #64	; 0x40
  40464c:	4798      	blx	r3
	if (res != FR_OK) return res;
  40464e:	4607      	mov	r7, r0
  404650:	2800      	cmp	r0, #0
  404652:	f040 823b 	bne.w	404acc <dir_find+0x494>
  404656:	f04f 0bff 	mov.w	fp, #255	; 0xff
  40465a:	46d8      	mov	r8, fp

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  40465c:	f643 692d 	movw	r9, #15917	; 0x3e2d
  404660:	f2c0 0940 	movt	r9, #64	; 0x40
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
  404664:	46da      	mov	sl, fp
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  404666:	f645 106d 	movw	r0, #22893	; 0x596d
  40466a:	f2c0 0040 	movt	r0, #64	; 0x40
  40466e:	9001      	str	r0, [sp, #4]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  404670:	f643 0185 	movw	r1, #14469	; 0x3885
  404674:	f2c0 0140 	movt	r1, #64	; 0x40
  404678:	9100      	str	r1, [sp, #0]

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
  40467a:	6820      	ldr	r0, [r4, #0]
  40467c:	6921      	ldr	r1, [r4, #16]
  40467e:	47c8      	blx	r9
		if (res != FR_OK) break;
  404680:	4607      	mov	r7, r0
  404682:	2800      	cmp	r0, #0
  404684:	f040 8222 	bne.w	404acc <dir_find+0x494>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
  404688:	6965      	ldr	r5, [r4, #20]
		c = dir[DIR_Name];
  40468a:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  40468c:	2e00      	cmp	r6, #0
  40468e:	f000 820f 	beq.w	404ab0 <dir_find+0x478>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
  404692:	7aeb      	ldrb	r3, [r5, #11]
  404694:	f003 023f 	and.w	r2, r3, #63	; 0x3f
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
  404698:	2ee5      	cmp	r6, #229	; 0xe5
  40469a:	f000 81e1 	beq.w	404a60 <dir_find+0x428>
  40469e:	f003 0008 	and.w	r0, r3, #8
  4046a2:	b2c1      	uxtb	r1, r0
  4046a4:	b119      	cbz	r1, 4046ae <dir_find+0x76>
  4046a6:	2a0f      	cmp	r2, #15
  4046a8:	f040 81dc 	bne.w	404a64 <dir_find+0x42c>
  4046ac:	e002      	b.n	4046b4 <dir_find+0x7c>
			ord = 0xFF;
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
  4046ae:	2a0f      	cmp	r2, #15
  4046b0:	f040 8198 	bne.w	4049e4 <dir_find+0x3ac>
				if (dj->lfn) {
  4046b4:	69e7      	ldr	r7, [r4, #28]
  4046b6:	2f00      	cmp	r7, #0
  4046b8:	f000 81ed 	beq.w	404a96 <dir_find+0x45e>
					if (c & LLE) {		/* Is it start of LFN sequence? */
  4046bc:	f006 0140 	and.w	r1, r6, #64	; 0x40
  4046c0:	b2cb      	uxtb	r3, r1
  4046c2:	b133      	cbz	r3, 4046d2 <dir_find+0x9a>
						sum = dir[LDIR_Chksum];
  4046c4:	f895 b00d 	ldrb.w	fp, [r5, #13]
						c &= ~LLE; ord = c;	/* LFN start order */
  4046c8:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						dj->lfn_idx = dj->index;
  4046cc:	88e2      	ldrh	r2, [r4, #6]
  4046ce:	8422      	strh	r2, [r4, #32]
  4046d0:	e004      	b.n	4046dc <dir_find+0xa4>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  4046d2:	45b0      	cmp	r8, r6
  4046d4:	bf18      	it	ne
  4046d6:	46d0      	movne	r8, sl
  4046d8:	f040 81dd 	bne.w	404a96 <dir_find+0x45e>
  4046dc:	7b68      	ldrb	r0, [r5, #13]
  4046de:	9002      	str	r0, [sp, #8]
  4046e0:	4558      	cmp	r0, fp
  4046e2:	f040 81c1 	bne.w	404a68 <dir_find+0x430>
{
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
  4046e6:	7829      	ldrb	r1, [r5, #0]
  4046e8:	f021 0340 	bic.w	r3, r1, #64	; 0x40
  4046ec:	f103 30ff 	add.w	r0, r3, #4294967295
  4046f0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  4046f4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
  4046f8:	9103      	str	r1, [sp, #12]
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4046fa:	78a8      	ldrb	r0, [r5, #2]
  4046fc:	786b      	ldrb	r3, [r5, #1]
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4046fe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  404702:	9a01      	ldr	r2, [sp, #4]
  404704:	4790      	blx	r2
  404706:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  404708:	9903      	ldr	r1, [sp, #12]
  40470a:	29fe      	cmp	r1, #254	; 0xfe
  40470c:	f200 81da 	bhi.w	404ac4 <dir_find+0x48c>
  404710:	f101 0b01 	add.w	fp, r1, #1
  404714:	f837 0011 	ldrh.w	r0, [r7, r1, lsl #1]
  404718:	9b01      	ldr	r3, [sp, #4]
  40471a:	4798      	blx	r3
  40471c:	4580      	cmp	r8, r0
  40471e:	f040 81d1 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  404722:	7928      	ldrb	r0, [r5, #4]
  404724:	78ea      	ldrb	r2, [r5, #3]
  404726:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  40472a:	f1b8 0f00 	cmp.w	r8, #0
  40472e:	d104      	bne.n	40473a <dir_find+0x102>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  404730:	f64f 71ff 	movw	r1, #65535	; 0xffff
  404734:	4288      	cmp	r0, r1
  404736:	d011      	beq.n	40475c <dir_find+0x124>
  404738:	e1c4      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40473a:	9b01      	ldr	r3, [sp, #4]
  40473c:	4798      	blx	r3
  40473e:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  404740:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  404744:	f200 81be 	bhi.w	404ac4 <dir_find+0x48c>
  404748:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  40474c:	9a03      	ldr	r2, [sp, #12]
  40474e:	f102 0b02 	add.w	fp, r2, #2
  404752:	9901      	ldr	r1, [sp, #4]
  404754:	4788      	blx	r1
  404756:	4580      	cmp	r8, r0
  404758:	f040 81b4 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  40475c:	79a8      	ldrb	r0, [r5, #6]
  40475e:	796b      	ldrb	r3, [r5, #5]
  404760:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  404764:	f1b8 0f00 	cmp.w	r8, #0
  404768:	d104      	bne.n	404774 <dir_find+0x13c>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40476a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40476e:	4290      	cmp	r0, r2
  404770:	d010      	beq.n	404794 <dir_find+0x15c>
  404772:	e1a7      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  404774:	9901      	ldr	r1, [sp, #4]
  404776:	4788      	blx	r1
  404778:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  40477a:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  40477e:	f200 81a1 	bhi.w	404ac4 <dir_find+0x48c>
  404782:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  404786:	f10b 0b01 	add.w	fp, fp, #1
  40478a:	9b01      	ldr	r3, [sp, #4]
  40478c:	4798      	blx	r3
  40478e:	4580      	cmp	r8, r0
  404790:	f040 8198 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  404794:	7a28      	ldrb	r0, [r5, #8]
  404796:	79ea      	ldrb	r2, [r5, #7]
  404798:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  40479c:	f1b8 0f00 	cmp.w	r8, #0
  4047a0:	d104      	bne.n	4047ac <dir_find+0x174>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4047a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4047a6:	4288      	cmp	r0, r1
  4047a8:	d010      	beq.n	4047cc <dir_find+0x194>
  4047aa:	e18b      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4047ac:	9b01      	ldr	r3, [sp, #4]
  4047ae:	4798      	blx	r3
  4047b0:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4047b2:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  4047b6:	f200 8185 	bhi.w	404ac4 <dir_find+0x48c>
  4047ba:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  4047be:	f10b 0b01 	add.w	fp, fp, #1
  4047c2:	9a01      	ldr	r2, [sp, #4]
  4047c4:	4790      	blx	r2
  4047c6:	4580      	cmp	r8, r0
  4047c8:	f040 817c 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4047cc:	7aa8      	ldrb	r0, [r5, #10]
  4047ce:	7a69      	ldrb	r1, [r5, #9]
  4047d0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  4047d4:	f1b8 0f00 	cmp.w	r8, #0
  4047d8:	d104      	bne.n	4047e4 <dir_find+0x1ac>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4047da:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4047de:	4298      	cmp	r0, r3
  4047e0:	d010      	beq.n	404804 <dir_find+0x1cc>
  4047e2:	e16f      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4047e4:	9a01      	ldr	r2, [sp, #4]
  4047e6:	4790      	blx	r2
  4047e8:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4047ea:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  4047ee:	f200 8169 	bhi.w	404ac4 <dir_find+0x48c>
  4047f2:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  4047f6:	f10b 0b01 	add.w	fp, fp, #1
  4047fa:	9901      	ldr	r1, [sp, #4]
  4047fc:	4788      	blx	r1
  4047fe:	4580      	cmp	r8, r0
  404800:	f040 8160 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  404804:	7be8      	ldrb	r0, [r5, #15]
  404806:	7bab      	ldrb	r3, [r5, #14]
  404808:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  40480c:	f1b8 0f00 	cmp.w	r8, #0
  404810:	d104      	bne.n	40481c <dir_find+0x1e4>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  404812:	f64f 72ff 	movw	r2, #65535	; 0xffff
  404816:	4290      	cmp	r0, r2
  404818:	d010      	beq.n	40483c <dir_find+0x204>
  40481a:	e153      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40481c:	9901      	ldr	r1, [sp, #4]
  40481e:	4788      	blx	r1
  404820:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  404822:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  404826:	f200 814d 	bhi.w	404ac4 <dir_find+0x48c>
  40482a:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  40482e:	f10b 0b01 	add.w	fp, fp, #1
  404832:	9b01      	ldr	r3, [sp, #4]
  404834:	4798      	blx	r3
  404836:	4580      	cmp	r8, r0
  404838:	f040 8144 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  40483c:	7c68      	ldrb	r0, [r5, #17]
  40483e:	7c2a      	ldrb	r2, [r5, #16]
  404840:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  404844:	f1b8 0f00 	cmp.w	r8, #0
  404848:	d104      	bne.n	404854 <dir_find+0x21c>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40484a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40484e:	4288      	cmp	r0, r1
  404850:	d010      	beq.n	404874 <dir_find+0x23c>
  404852:	e137      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  404854:	9b01      	ldr	r3, [sp, #4]
  404856:	4798      	blx	r3
  404858:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  40485a:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  40485e:	f200 8131 	bhi.w	404ac4 <dir_find+0x48c>
  404862:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  404866:	f10b 0b01 	add.w	fp, fp, #1
  40486a:	9a01      	ldr	r2, [sp, #4]
  40486c:	4790      	blx	r2
  40486e:	4580      	cmp	r8, r0
  404870:	f040 8128 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  404874:	7ce8      	ldrb	r0, [r5, #19]
  404876:	7ca9      	ldrb	r1, [r5, #18]
  404878:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  40487c:	f1b8 0f00 	cmp.w	r8, #0
  404880:	d104      	bne.n	40488c <dir_find+0x254>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  404882:	f64f 73ff 	movw	r3, #65535	; 0xffff
  404886:	4298      	cmp	r0, r3
  404888:	d010      	beq.n	4048ac <dir_find+0x274>
  40488a:	e11b      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40488c:	9a01      	ldr	r2, [sp, #4]
  40488e:	4790      	blx	r2
  404890:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  404892:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  404896:	f200 8115 	bhi.w	404ac4 <dir_find+0x48c>
  40489a:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  40489e:	f10b 0b01 	add.w	fp, fp, #1
  4048a2:	9901      	ldr	r1, [sp, #4]
  4048a4:	4788      	blx	r1
  4048a6:	4580      	cmp	r8, r0
  4048a8:	f040 810c 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4048ac:	7d68      	ldrb	r0, [r5, #21]
  4048ae:	7d2b      	ldrb	r3, [r5, #20]
  4048b0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  4048b4:	f1b8 0f00 	cmp.w	r8, #0
  4048b8:	d104      	bne.n	4048c4 <dir_find+0x28c>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4048ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4048be:	4290      	cmp	r0, r2
  4048c0:	d010      	beq.n	4048e4 <dir_find+0x2ac>
  4048c2:	e0ff      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4048c4:	9901      	ldr	r1, [sp, #4]
  4048c6:	4788      	blx	r1
  4048c8:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4048ca:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  4048ce:	f200 80f9 	bhi.w	404ac4 <dir_find+0x48c>
  4048d2:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  4048d6:	f10b 0b01 	add.w	fp, fp, #1
  4048da:	9b01      	ldr	r3, [sp, #4]
  4048dc:	4798      	blx	r3
  4048de:	4580      	cmp	r8, r0
  4048e0:	f040 80f0 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  4048e4:	7de8      	ldrb	r0, [r5, #23]
  4048e6:	7daa      	ldrb	r2, [r5, #22]
  4048e8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  4048ec:	f1b8 0f00 	cmp.w	r8, #0
  4048f0:	d104      	bne.n	4048fc <dir_find+0x2c4>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4048f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4048f6:	4288      	cmp	r0, r1
  4048f8:	d010      	beq.n	40491c <dir_find+0x2e4>
  4048fa:	e0e3      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  4048fc:	9b01      	ldr	r3, [sp, #4]
  4048fe:	4798      	blx	r3
  404900:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  404902:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  404906:	f200 80dd 	bhi.w	404ac4 <dir_find+0x48c>
  40490a:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  40490e:	f10b 0b01 	add.w	fp, fp, #1
  404912:	9a01      	ldr	r2, [sp, #4]
  404914:	4790      	blx	r2
  404916:	4580      	cmp	r8, r0
  404918:	f040 80d4 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  40491c:	7e68      	ldrb	r0, [r5, #25]
  40491e:	7e29      	ldrb	r1, [r5, #24]
  404920:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  404924:	f1b8 0f00 	cmp.w	r8, #0
  404928:	d104      	bne.n	404934 <dir_find+0x2fc>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  40492a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40492e:	4298      	cmp	r0, r3
  404930:	d010      	beq.n	404954 <dir_find+0x31c>
  404932:	e0c7      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  404934:	9a01      	ldr	r2, [sp, #4]
  404936:	4790      	blx	r2
  404938:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  40493a:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  40493e:	f200 80c1 	bhi.w	404ac4 <dir_find+0x48c>
  404942:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  404946:	f10b 0b01 	add.w	fp, fp, #1
  40494a:	9901      	ldr	r1, [sp, #4]
  40494c:	4788      	blx	r1
  40494e:	4580      	cmp	r8, r0
  404950:	f040 80b8 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  404954:	7f68      	ldrb	r0, [r5, #29]
  404956:	7f2b      	ldrb	r3, [r5, #28]
  404958:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  40495c:	f1b8 0f00 	cmp.w	r8, #0
  404960:	d104      	bne.n	40496c <dir_find+0x334>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  404962:	f64f 72ff 	movw	r2, #65535	; 0xffff
  404966:	4290      	cmp	r0, r2
  404968:	d010      	beq.n	40498c <dir_find+0x354>
  40496a:	e0ab      	b.n	404ac4 <dir_find+0x48c>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
		if (wc) {	/* Last char has not been processed */
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40496c:	9901      	ldr	r1, [sp, #4]
  40496e:	4788      	blx	r1
  404970:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  404972:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  404976:	f200 80a5 	bhi.w	404ac4 <dir_find+0x48c>
  40497a:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  40497e:	f10b 0b01 	add.w	fp, fp, #1
  404982:	9b01      	ldr	r3, [sp, #4]
  404984:	4798      	blx	r3
  404986:	4580      	cmp	r8, r0
  404988:	f040 809c 	bne.w	404ac4 <dir_find+0x48c>


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
	s = 0; wc = 1;
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
  40498c:	7fe8      	ldrb	r0, [r5, #31]
  40498e:	7faa      	ldrb	r2, [r5, #30]
  404990:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
		if (wc) {	/* Last char has not been processed */
  404994:	f1b8 0f00 	cmp.w	r8, #0
  404998:	d010      	beq.n	4049bc <dir_find+0x384>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
  40499a:	9901      	ldr	r1, [sp, #4]
  40499c:	4788      	blx	r1
  40499e:	4680      	mov	r8, r0
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
  4049a0:	f1bb 0ffe 	cmp.w	fp, #254	; 0xfe
  4049a4:	f200 808e 	bhi.w	404ac4 <dir_find+0x48c>
  4049a8:	f10b 0301 	add.w	r3, fp, #1
  4049ac:	9303      	str	r3, [sp, #12]
  4049ae:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
  4049b2:	9a01      	ldr	r2, [sp, #4]
  4049b4:	4790      	blx	r2
  4049b6:	4580      	cmp	r8, r0
  4049b8:	d005      	beq.n	4049c6 <dir_find+0x38e>
  4049ba:	e083      	b.n	404ac4 <dir_find+0x48c>
				return 0;				/* Not matched */
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
  4049bc:	f64f 77ff 	movw	r7, #65535	; 0xffff
  4049c0:	42b8      	cmp	r0, r7
  4049c2:	d078      	beq.n	404ab6 <dir_find+0x47e>
  4049c4:	e07e      	b.n	404ac4 <dir_find+0x48c>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
  4049c6:	7828      	ldrb	r0, [r5, #0]
  4049c8:	f000 0140 	and.w	r1, r0, #64	; 0x40
  4049cc:	b2cb      	uxtb	r3, r1
  4049ce:	2b00      	cmp	r3, #0
  4049d0:	d071      	beq.n	404ab6 <dir_find+0x47e>
  4049d2:	f1b8 0f00 	cmp.w	r8, #0
  4049d6:	d06e      	beq.n	404ab6 <dir_find+0x47e>
  4049d8:	9a03      	ldr	r2, [sp, #12]
  4049da:	f837 7012 	ldrh.w	r7, [r7, r2, lsl #1]
  4049de:	2f00      	cmp	r7, #0
  4049e0:	d069      	beq.n	404ab6 <dir_find+0x47e>
  4049e2:	e06f      	b.n	404ac4 <dir_find+0x48c>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
  4049e4:	f1b8 0f00 	cmp.w	r8, #0
  4049e8:	d104      	bne.n	4049f4 <dir_find+0x3bc>
  4049ea:	4628      	mov	r0, r5
  4049ec:	9b00      	ldr	r3, [sp, #0]
  4049ee:	4798      	blx	r3
  4049f0:	4558      	cmp	r0, fp
  4049f2:	d06b      	beq.n	404acc <dir_find+0x494>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  4049f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4049f8:	8422      	strh	r2, [r4, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
  4049fa:	69a0      	ldr	r0, [r4, #24]
  4049fc:	7ac1      	ldrb	r1, [r0, #11]
  4049fe:	f011 0f01 	tst.w	r1, #1
  404a02:	d133      	bne.n	404a6c <dir_find+0x434>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
  404a04:	782b      	ldrb	r3, [r5, #0]
  404a06:	7802      	ldrb	r2, [r0, #0]
  404a08:	4293      	cmp	r3, r2
  404a0a:	d131      	bne.n	404a70 <dir_find+0x438>
  404a0c:	7869      	ldrb	r1, [r5, #1]
  404a0e:	7843      	ldrb	r3, [r0, #1]
  404a10:	4299      	cmp	r1, r3
  404a12:	d12f      	bne.n	404a74 <dir_find+0x43c>
  404a14:	78a9      	ldrb	r1, [r5, #2]
  404a16:	7882      	ldrb	r2, [r0, #2]
  404a18:	4291      	cmp	r1, r2
  404a1a:	d12d      	bne.n	404a78 <dir_find+0x440>
  404a1c:	78eb      	ldrb	r3, [r5, #3]
  404a1e:	78c1      	ldrb	r1, [r0, #3]
  404a20:	428b      	cmp	r3, r1
  404a22:	d12b      	bne.n	404a7c <dir_find+0x444>
  404a24:	792b      	ldrb	r3, [r5, #4]
  404a26:	7902      	ldrb	r2, [r0, #4]
  404a28:	4293      	cmp	r3, r2
  404a2a:	d129      	bne.n	404a80 <dir_find+0x448>
  404a2c:	7969      	ldrb	r1, [r5, #5]
  404a2e:	7943      	ldrb	r3, [r0, #5]
  404a30:	4299      	cmp	r1, r3
  404a32:	d127      	bne.n	404a84 <dir_find+0x44c>
  404a34:	79a9      	ldrb	r1, [r5, #6]
  404a36:	7982      	ldrb	r2, [r0, #6]
  404a38:	4291      	cmp	r1, r2
  404a3a:	d125      	bne.n	404a88 <dir_find+0x450>
  404a3c:	79eb      	ldrb	r3, [r5, #7]
  404a3e:	79c1      	ldrb	r1, [r0, #7]
  404a40:	428b      	cmp	r3, r1
  404a42:	d123      	bne.n	404a8c <dir_find+0x454>
  404a44:	7a2b      	ldrb	r3, [r5, #8]
  404a46:	7a02      	ldrb	r2, [r0, #8]
  404a48:	4293      	cmp	r3, r2
  404a4a:	d121      	bne.n	404a90 <dir_find+0x458>
  404a4c:	7a69      	ldrb	r1, [r5, #9]
  404a4e:	7a43      	ldrb	r3, [r0, #9]
  404a50:	4299      	cmp	r1, r3
  404a52:	d11f      	bne.n	404a94 <dir_find+0x45c>
  404a54:	7aaa      	ldrb	r2, [r5, #10]
  404a56:	7a80      	ldrb	r0, [r0, #10]
  404a58:	4282      	cmp	r2, r0
  404a5a:	d037      	beq.n	404acc <dir_find+0x494>
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  404a5c:	46d0      	mov	r8, sl
  404a5e:	e01a      	b.n	404a96 <dir_find+0x45e>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF;
  404a60:	46d0      	mov	r8, sl
  404a62:	e018      	b.n	404a96 <dir_find+0x45e>
  404a64:	46d0      	mov	r8, sl
  404a66:	e016      	b.n	404a96 <dir_find+0x45e>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404a68:	46d0      	mov	r8, sl
  404a6a:	e014      	b.n	404a96 <dir_find+0x45e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  404a6c:	46d0      	mov	r8, sl
  404a6e:	e012      	b.n	404a96 <dir_find+0x45e>
  404a70:	46d0      	mov	r8, sl
  404a72:	e010      	b.n	404a96 <dir_find+0x45e>
  404a74:	46d0      	mov	r8, sl
  404a76:	e00e      	b.n	404a96 <dir_find+0x45e>
  404a78:	46d0      	mov	r8, sl
  404a7a:	e00c      	b.n	404a96 <dir_find+0x45e>
  404a7c:	46d0      	mov	r8, sl
  404a7e:	e00a      	b.n	404a96 <dir_find+0x45e>
  404a80:	46d0      	mov	r8, sl
  404a82:	e008      	b.n	404a96 <dir_find+0x45e>
  404a84:	46d0      	mov	r8, sl
  404a86:	e006      	b.n	404a96 <dir_find+0x45e>
  404a88:	46d0      	mov	r8, sl
  404a8a:	e004      	b.n	404a96 <dir_find+0x45e>
  404a8c:	46d0      	mov	r8, sl
  404a8e:	e002      	b.n	404a96 <dir_find+0x45e>
  404a90:	46d0      	mov	r8, sl
  404a92:	e000      	b.n	404a96 <dir_find+0x45e>
  404a94:	46d0      	mov	r8, sl
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
  404a96:	4620      	mov	r0, r4
  404a98:	f04f 0100 	mov.w	r1, #0
  404a9c:	f244 33d1 	movw	r3, #17361	; 0x43d1
  404aa0:	f2c0 0340 	movt	r3, #64	; 0x40
  404aa4:	4798      	blx	r3
	} while (res == FR_OK);
  404aa6:	4607      	mov	r7, r0
  404aa8:	2800      	cmp	r0, #0
  404aaa:	f43f ade6 	beq.w	40467a <dir_find+0x42>
  404aae:	e00d      	b.n	404acc <dir_find+0x494>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  404ab0:	f04f 0704 	mov.w	r7, #4
  404ab4:	e00a      	b.n	404acc <dir_find+0x494>
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404ab6:	f106 36ff 	add.w	r6, r6, #4294967295
  404aba:	fa5f f886 	uxtb.w	r8, r6
  404abe:	f8dd b008 	ldr.w	fp, [sp, #8]
  404ac2:	e7e8      	b.n	404a96 <dir_find+0x45e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
  404ac4:	f8dd b008 	ldr.w	fp, [sp, #8]
						sum = dir[LDIR_Chksum];
						c &= ~LLE; ord = c;	/* LFN start order */
						dj->lfn_idx = dj->index;
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
  404ac8:	46d0      	mov	r8, sl
  404aca:	e7e4      	b.n	404a96 <dir_find+0x45e>
#endif
		res = dir_next(dj, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
  404acc:	4638      	mov	r0, r7
  404ace:	b005      	add	sp, #20
  404ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404ad4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
  404ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ad8:	b087      	sub	sp, #28
  404ada:	9000      	str	r0, [sp, #0]
  404adc:	468b      	mov	fp, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
  404ade:	780b      	ldrb	r3, [r1, #0]
  404ae0:	2b2f      	cmp	r3, #47	; 0x2f
  404ae2:	d001      	beq.n	404ae8 <follow_path+0x14>
  404ae4:	2b5c      	cmp	r3, #92	; 0x5c
  404ae6:	d101      	bne.n	404aec <follow_path+0x18>
		path++;
  404ae8:	f10b 0b01 	add.w	fp, fp, #1
	dj->sclust = 0;						/* Start from the root dir */
  404aec:	f04f 0000 	mov.w	r0, #0
  404af0:	9900      	ldr	r1, [sp, #0]
  404af2:	6088      	str	r0, [r1, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
  404af4:	f89b 2000 	ldrb.w	r2, [fp]
  404af8:	2a1f      	cmp	r2, #31
  404afa:	d80d      	bhi.n	404b18 <follow_path+0x44>
		res = dir_sdi(dj, 0);
  404afc:	4608      	mov	r0, r1
  404afe:	f04f 0100 	mov.w	r1, #0
  404b02:	f244 0361 	movw	r3, #16481	; 0x4061
  404b06:	f2c0 0340 	movt	r3, #64	; 0x40
  404b0a:	4798      	blx	r3
  404b0c:	4602      	mov	r2, r0
		dj->dir = 0;
  404b0e:	f04f 0000 	mov.w	r0, #0
  404b12:	9900      	ldr	r1, [sp, #0]
  404b14:	6148      	str	r0, [r1, #20]
  404b16:	e1b7      	b.n	404e88 <follow_path+0x3b4>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  404b18:	f645 04f5 	movw	r4, #22773	; 0x58f5
  404b1c:	f2c0 0440 	movt	r4, #64	; 0x40
  404b20:	9405      	str	r4, [sp, #20]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  404b22:	f249 06e8 	movw	r6, #37096	; 0x90e8
  404b26:	f2c0 0640 	movt	r6, #64	; 0x40
  404b2a:	9603      	str	r6, [sp, #12]
  404b2c:	f643 074d 	movw	r7, #14413	; 0x384d
  404b30:	f2c0 0740 	movt	r7, #64	; 0x40
  404b34:	9702      	str	r7, [sp, #8]
  404b36:	465e      	mov	r6, fp
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
  404b38:	f81b 3b01 	ldrb.w	r3, [fp], #1
  404b3c:	2b2f      	cmp	r3, #47	; 0x2f
  404b3e:	d0fa      	beq.n	404b36 <follow_path+0x62>
  404b40:	2b5c      	cmp	r3, #92	; 0x5c
  404b42:	d0f8      	beq.n	404b36 <follow_path+0x62>
	lfn = dj->lfn;
  404b44:	9800      	ldr	r0, [sp, #0]
  404b46:	69c1      	ldr	r1, [r0, #28]
  404b48:	9101      	str	r1, [sp, #4]
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  404b4a:	7830      	ldrb	r0, [r6, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  404b4c:	281f      	cmp	r0, #31
  404b4e:	f240 8173 	bls.w	404e38 <follow_path+0x364>
  404b52:	282f      	cmp	r0, #47	; 0x2f
  404b54:	f000 815a 	beq.w	404e0c <follow_path+0x338>
  404b58:	285c      	cmp	r0, #92	; 0x5c
  404b5a:	f000 815c 	beq.w	404e16 <follow_path+0x342>
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
  404b5e:	460f      	mov	r7, r1
  404b60:	f1a7 0702 	sub.w	r7, r7, #2
  404b64:	4635      	mov	r5, r6
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  404b66:	f04f 0401 	mov.w	r4, #1
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  404b6a:	46a3      	mov	fp, r4
  404b6c:	9604      	str	r6, [sp, #16]
  404b6e:	f8dd a014 	ldr.w	sl, [sp, #20]
  404b72:	e012      	b.n	404b9a <follow_path+0xc6>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  404b74:	2b2f      	cmp	r3, #47	; 0x2f
  404b76:	f000 8153 	beq.w	404e20 <follow_path+0x34c>
  404b7a:	2b5c      	cmp	r3, #92	; 0x5c
  404b7c:	f000 8152 	beq.w	404e24 <follow_path+0x350>
		if (di >= _MAX_LFN)				/* Reject too long name */
  404b80:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  404b84:	f000 8175 	beq.w	404e72 <follow_path+0x39e>
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  404b88:	4689      	mov	r9, r1
  404b8a:	460c      	mov	r4, r1
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  404b8c:	4659      	mov	r1, fp
  404b8e:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  404b90:	4606      	mov	r6, r0
  404b92:	2800      	cmp	r0, #0
  404b94:	f040 81aa 	bne.w	404eec <follow_path+0x418>
  404b98:	e16b      	b.n	404e72 <follow_path+0x39e>
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
  404b9a:	4659      	mov	r1, fp
  404b9c:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
  404b9e:	4606      	mov	r6, r0
  404ba0:	2800      	cmp	r0, #0
  404ba2:	f000 8166 	beq.w	404e72 <follow_path+0x39e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  404ba6:	287f      	cmp	r0, #127	; 0x7f
  404ba8:	d806      	bhi.n	404bb8 <follow_path+0xe4>
  404baa:	9803      	ldr	r0, [sp, #12]
  404bac:	4631      	mov	r1, r6
  404bae:	9a02      	ldr	r2, [sp, #8]
  404bb0:	4790      	blx	r2
  404bb2:	2800      	cmp	r0, #0
  404bb4:	f040 815d 	bne.w	404e72 <follow_path+0x39e>
  404bb8:	f107 0802 	add.w	r8, r7, #2
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
  404bbc:	807e      	strh	r6, [r7, #2]
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  404bbe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  404bc2:	4618      	mov	r0, r3
  404bc4:	f104 0101 	add.w	r1, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  404bc8:	2b1f      	cmp	r3, #31
  404bca:	d8d3      	bhi.n	404b74 <follow_path+0xa0>
  404bcc:	9e04      	ldr	r6, [sp, #16]
  404bce:	e139      	b.n	404e44 <follow_path+0x370>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  404bd0:	2c00      	cmp	r4, #0
  404bd2:	f000 814e 	beq.w	404e72 <follow_path+0x39e>
  404bd6:	f104 30ff 	add.w	r0, r4, #4294967295
  404bda:	f000 0101 	and.w	r1, r0, #1
		w = lfn[di-1];
  404bde:	9b01      	ldr	r3, [sp, #4]
  404be0:	eb03 0244 	add.w	r2, r3, r4, lsl #1
  404be4:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  404be8:	2820      	cmp	r0, #32
  404bea:	f040 8165 	bne.w	404eb8 <follow_path+0x3e4>
  404bee:	e166      	b.n	404ebe <follow_path+0x3ea>
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
  404bf0:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  404bf4:	2b20      	cmp	r3, #32
  404bf6:	d001      	beq.n	404bfc <follow_path+0x128>
  404bf8:	2b2e      	cmp	r3, #46	; 0x2e
  404bfa:	d108      	bne.n	404c0e <follow_path+0x13a>
		di--;
  404bfc:	f104 30ff 	add.w	r0, r4, #4294967295
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  404c00:	1e04      	subs	r4, r0, #0
		w = lfn[di-1];
  404c02:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  404c06:	2920      	cmp	r1, #32
  404c08:	f040 8169 	bne.w	404ede <follow_path+0x40a>
  404c0c:	e16a      	b.n	404ee4 <follow_path+0x410>
  404c0e:	4626      	mov	r6, r4
		di--;
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
  404c10:	2c00      	cmp	r4, #0
  404c12:	f000 812e 	beq.w	404e72 <follow_path+0x39e>

	lfn[di] = 0;						/* LFN is created */
  404c16:	9a01      	ldr	r2, [sp, #4]
  404c18:	eb02 0844 	add.w	r8, r2, r4, lsl #1
  404c1c:	f04f 0500 	mov.w	r5, #0
  404c20:	f822 5014 	strh.w	r5, [r2, r4, lsl #1]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
  404c24:	9b00      	ldr	r3, [sp, #0]
  404c26:	6998      	ldr	r0, [r3, #24]
  404c28:	f04f 0120 	mov.w	r1, #32
  404c2c:	f04f 020b 	mov.w	r2, #11
  404c30:	f643 0315 	movw	r3, #14357	; 0x3815
  404c34:	f2c0 0340 	movt	r3, #64	; 0x40
  404c38:	4798      	blx	r3
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
  404c3a:	9a01      	ldr	r2, [sp, #4]
  404c3c:	f1a2 0202 	sub.w	r2, r2, #2
  404c40:	e001      	b.n	404c46 <follow_path+0x172>

	lfn[di] = 0;						/* LFN is created */

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
  404c42:	f105 0501 	add.w	r5, r5, #1
  404c46:	f832 0f02 	ldrh.w	r0, [r2, #2]!
  404c4a:	2820      	cmp	r0, #32
  404c4c:	d0f9      	beq.n	404c42 <follow_path+0x16e>
  404c4e:	282e      	cmp	r0, #46	; 0x2e
  404c50:	d0f7      	beq.n	404c42 <follow_path+0x16e>
	if (si) cf |= NS_LOSS | NS_LFN;
  404c52:	2d00      	cmp	r5, #0
  404c54:	f000 80fb 	beq.w	404e4e <follow_path+0x37a>
  404c58:	f047 0703 	orr.w	r7, r7, #3
  404c5c:	e0f7      	b.n	404e4e <follow_path+0x37a>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  404c5e:	f104 30ff 	add.w	r0, r4, #4294967295
  404c62:	4604      	mov	r4, r0
  404c64:	b950      	cbnz	r0, 404c7c <follow_path+0x1a8>
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
  404c66:	f04f 0908 	mov.w	r9, #8
  404c6a:	f04f 0800 	mov.w	r8, #0
  404c6e:	46c2      	mov	sl, r8
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  404c70:	f249 03f4 	movw	r3, #37108	; 0x90f4
  404c74:	f2c0 0340 	movt	r3, #64	; 0x40
  404c78:	9304      	str	r3, [sp, #16]
  404c7a:	e007      	b.n	404c8c <follow_path+0x1b8>
  404c7c:	f1a8 0602 	sub.w	r6, r8, #2

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  404c80:	f836 1c02 	ldrh.w	r1, [r6, #-2]
  404c84:	292e      	cmp	r1, #46	; 0x2e
  404c86:	f040 810d 	bne.w	404ea4 <follow_path+0x3d0>
  404c8a:	e7ec      	b.n	404c66 <follow_path+0x192>

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
  404c8c:	9801      	ldr	r0, [sp, #4]
  404c8e:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
  404c92:	f105 0501 	add.w	r5, r5, #1
		if (!w) break;					/* Break on end of the LFN */
  404c96:	2e00      	cmp	r6, #0
  404c98:	d05c      	beq.n	404d54 <follow_path+0x280>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
  404c9a:	2e20      	cmp	r6, #32
  404c9c:	d004      	beq.n	404ca8 <follow_path+0x1d4>
  404c9e:	2e2e      	cmp	r6, #46	; 0x2e
  404ca0:	d105      	bne.n	404cae <follow_path+0x1da>
  404ca2:	42ac      	cmp	r4, r5
  404ca4:	f000 80e8 	beq.w	404e78 <follow_path+0x3a4>
			cf |= NS_LOSS | NS_LFN; continue;
  404ca8:	f047 0703 	orr.w	r7, r7, #3
  404cac:	e7ee      	b.n	404c8c <follow_path+0x1b8>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
  404cae:	45c8      	cmp	r8, r9
  404cb0:	d202      	bcs.n	404cb8 <follow_path+0x1e4>
  404cb2:	42ac      	cmp	r4, r5
  404cb4:	d117      	bne.n	404ce6 <follow_path+0x212>
  404cb6:	e0d7      	b.n	404e68 <follow_path+0x394>
			if (ni == 11) {				/* Long extension */
  404cb8:	f1b9 0f0b 	cmp.w	r9, #11
  404cbc:	d103      	bne.n	404cc6 <follow_path+0x1f2>
				cf |= NS_LOSS | NS_LFN; break;
  404cbe:	f047 0703 	orr.w	r7, r7, #3
  404cc2:	4650      	mov	r0, sl
  404cc4:	e049      	b.n	404d5a <follow_path+0x286>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
  404cc6:	42ac      	cmp	r4, r5
  404cc8:	d003      	beq.n	404cd2 <follow_path+0x1fe>
  404cca:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
  404cce:	42a5      	cmp	r5, r4
  404cd0:	d842      	bhi.n	404d58 <follow_path+0x284>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
  404cd2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  404cd6:	fa5f fa8a 	uxtb.w	sl, sl
  404cda:	4625      	mov	r5, r4
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
  404cdc:	f04f 090b 	mov.w	r9, #11
  404ce0:	f04f 0808 	mov.w	r8, #8
  404ce4:	e7d2      	b.n	404c8c <follow_path+0x1b8>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII char */
  404ce6:	2e7f      	cmp	r6, #127	; 0x7f
  404ce8:	d911      	bls.n	404d0e <follow_path+0x23a>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
  404cea:	4630      	mov	r0, r6
  404cec:	f04f 0100 	mov.w	r1, #0
  404cf0:	9e05      	ldr	r6, [sp, #20]
  404cf2:	47b0      	blx	r6
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
  404cf4:	2800      	cmp	r0, #0
  404cf6:	f000 80c4 	beq.w	404e82 <follow_path+0x3ae>
  404cfa:	f249 0268 	movw	r2, #36968	; 0x9068
  404cfe:	f2c0 0240 	movt	r2, #64	; 0x40
  404d02:	1813      	adds	r3, r2, r0
  404d04:	f813 6c80 	ldrb.w	r6, [r3, #-128]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  404d08:	f047 0702 	orr.w	r7, r7, #2
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
  404d0c:	b126      	cbz	r6, 404d18 <follow_path+0x244>
  404d0e:	9804      	ldr	r0, [sp, #16]
  404d10:	4631      	mov	r1, r6
  404d12:	9a02      	ldr	r2, [sp, #8]
  404d14:	4790      	blx	r2
  404d16:	b120      	cbz	r0, 404d22 <follow_path+0x24e>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
  404d18:	f047 0703 	orr.w	r7, r7, #3
  404d1c:	f04f 065f 	mov.w	r6, #95	; 0x5f
  404d20:	e011      	b.n	404d46 <follow_path+0x272>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
  404d22:	f1a6 0041 	sub.w	r0, r6, #65	; 0x41
  404d26:	b281      	uxth	r1, r0
  404d28:	2919      	cmp	r1, #25
  404d2a:	d802      	bhi.n	404d32 <follow_path+0x25e>
					b |= 2;
  404d2c:	f04a 0a02 	orr.w	sl, sl, #2
  404d30:	e009      	b.n	404d46 <follow_path+0x272>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
  404d32:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
  404d36:	b29a      	uxth	r2, r3
  404d38:	2a19      	cmp	r2, #25
  404d3a:	d804      	bhi.n	404d46 <follow_path+0x272>
						b |= 1; w -= 0x20;
  404d3c:	f04a 0a01 	orr.w	sl, sl, #1
  404d40:	f1a6 0620 	sub.w	r6, r6, #32
  404d44:	b2b6      	uxth	r6, r6
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
  404d46:	9800      	ldr	r0, [sp, #0]
  404d48:	6981      	ldr	r1, [r0, #24]
  404d4a:	f801 6008 	strb.w	r6, [r1, r8]
  404d4e:	f108 0801 	add.w	r8, r8, #1
  404d52:	e79b      	b.n	404c8c <follow_path+0x1b8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	b = i = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
		if (!w) break;					/* Break on end of the LFN */
  404d54:	4650      	mov	r0, sl
  404d56:	e000      	b.n	404d5a <follow_path+0x286>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
  404d58:	4650      	mov	r0, sl
			}
		}
		dj->fn[i++] = (BYTE)w;
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
  404d5a:	9b00      	ldr	r3, [sp, #0]
  404d5c:	6999      	ldr	r1, [r3, #24]
  404d5e:	780a      	ldrb	r2, [r1, #0]
  404d60:	2ae5      	cmp	r2, #229	; 0xe5
  404d62:	bf04      	itt	eq
  404d64:	2205      	moveq	r2, #5
  404d66:	700a      	strbeq	r2, [r1, #0]

	if (ni == 8) b <<= 2;
  404d68:	f1b9 0f08 	cmp.w	r9, #8
  404d6c:	bf04      	itt	eq
  404d6e:	0080      	lsleq	r0, r0, #2
  404d70:	fa5f fa80 	uxtbeq.w	sl, r0
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
  404d74:	f00a 000c 	and.w	r0, sl, #12
  404d78:	280c      	cmp	r0, #12
  404d7a:	d003      	beq.n	404d84 <follow_path+0x2b0>
  404d7c:	f00a 0303 	and.w	r3, sl, #3
  404d80:	2b03      	cmp	r3, #3
  404d82:	d101      	bne.n	404d88 <follow_path+0x2b4>
		cf |= NS_LFN;
  404d84:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
  404d88:	f007 0102 	and.w	r1, r7, #2
  404d8c:	b2ca      	uxtb	r2, r1
  404d8e:	b952      	cbnz	r2, 404da6 <follow_path+0x2d2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
  404d90:	f00a 0a03 	and.w	sl, sl, #3
  404d94:	f1ba 0f01 	cmp.w	sl, #1
  404d98:	bf08      	it	eq
  404d9a:	f047 0710 	orreq.w	r7, r7, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
  404d9e:	2804      	cmp	r0, #4
  404da0:	bf08      	it	eq
  404da2:	f047 0708 	orreq.w	r7, r7, #8
	}

	dj->fn[NS] = cf;	/* SFN is created */
  404da6:	9800      	ldr	r0, [sp, #0]
  404da8:	6983      	ldr	r3, [r0, #24]
  404daa:	72df      	strb	r7, [r3, #11]

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
  404dac:	f244 6139 	movw	r1, #17977	; 0x4639
  404db0:	f2c0 0140 	movt	r1, #64	; 0x40
  404db4:	4788      	blx	r1
			ns = *(dj->fn+NS);
  404db6:	9a00      	ldr	r2, [sp, #0]
  404db8:	6993      	ldr	r3, [r2, #24]
  404dba:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
  404dbc:	4602      	mov	r2, r0
  404dbe:	b148      	cbz	r0, 404dd4 <follow_path+0x300>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
  404dc0:	2a04      	cmp	r2, #4
  404dc2:	d161      	bne.n	404e88 <follow_path+0x3b4>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
  404dc4:	f003 0304 	and.w	r3, r3, #4
  404dc8:	b2d9      	uxtb	r1, r3

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
  404dca:	2900      	cmp	r1, #0
  404dcc:	bf14      	ite	ne
  404dce:	4602      	movne	r2, r0
  404dd0:	2205      	moveq	r2, #5
  404dd2:	e059      	b.n	404e88 <follow_path+0x3b4>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
  404dd4:	f003 0004 	and.w	r0, r3, #4
  404dd8:	b2c1      	uxtb	r1, r0
  404dda:	2900      	cmp	r1, #0
  404ddc:	d154      	bne.n	404e88 <follow_path+0x3b4>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
  404dde:	9a00      	ldr	r2, [sp, #0]
  404de0:	6953      	ldr	r3, [r2, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
  404de2:	7ad8      	ldrb	r0, [r3, #11]
  404de4:	f000 0110 	and.w	r1, r0, #16
  404de8:	b2ca      	uxtb	r2, r1
  404dea:	b162      	cbz	r2, 404e06 <follow_path+0x332>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
  404dec:	7d5c      	ldrb	r4, [r3, #21]
  404dee:	7d1f      	ldrb	r7, [r3, #20]
  404df0:	ea47 2604 	orr.w	r6, r7, r4, lsl #8
  404df4:	7ed8      	ldrb	r0, [r3, #27]
  404df6:	7e9b      	ldrb	r3, [r3, #26]
  404df8:	ea43 2100 	orr.w	r1, r3, r0, lsl #8
  404dfc:	ea41 4406 	orr.w	r4, r1, r6, lsl #16
  404e00:	9a00      	ldr	r2, [sp, #0]
  404e02:	6094      	str	r4, [r2, #8]
		}
  404e04:	e697      	b.n	404b36 <follow_path+0x62>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
  404e06:	f04f 0205 	mov.w	r2, #5
  404e0a:	e03d      	b.n	404e88 <follow_path+0x3b4>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  404e0c:	f04f 0400 	mov.w	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
  404e10:	f04f 0101 	mov.w	r1, #1
  404e14:	e00b      	b.n	404e2e <follow_path+0x35a>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  404e16:	f04f 0400 	mov.w	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
  404e1a:	f04f 0101 	mov.w	r1, #1
  404e1e:	e006      	b.n	404e2e <follow_path+0x35a>
  404e20:	9e04      	ldr	r6, [sp, #16]
  404e22:	e004      	b.n	404e2e <follow_path+0x35a>
  404e24:	9e04      	ldr	r6, [sp, #16]
  404e26:	e002      	b.n	404e2e <follow_path+0x35a>
  404e28:	9e04      	ldr	r6, [sp, #16]
  404e2a:	e000      	b.n	404e2e <follow_path+0x35a>
  404e2c:	9e04      	ldr	r6, [sp, #16]
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  404e2e:	eb06 0b01 	add.w	fp, r6, r1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  404e32:	f04f 0700 	mov.w	r7, #0
  404e36:	e6cb      	b.n	404bd0 <follow_path+0xfc>
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
  404e38:	f04f 0400 	mov.w	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
  404e3c:	f04f 0101 	mov.w	r1, #1
  404e40:	e000      	b.n	404e44 <follow_path+0x370>
  404e42:	9e04      	ldr	r6, [sp, #16]
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
	}
	*path = &p[si];						/* Return pointer to the next segment */
  404e44:	eb06 0b01 	add.w	fp, r6, r1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
  404e48:	f04f 0704 	mov.w	r7, #4
  404e4c:	e6c0      	b.n	404bd0 <follow_path+0xfc>

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  404e4e:	f106 36ff 	add.w	r6, r6, #4294967295
  404e52:	9901      	ldr	r1, [sp, #4]
  404e54:	f831 2016 	ldrh.w	r2, [r1, r6, lsl #1]
  404e58:	2a2e      	cmp	r2, #46	; 0x2e
  404e5a:	f43f af04 	beq.w	404c66 <follow_path+0x192>
  404e5e:	f014 0f01 	tst.w	r4, #1
  404e62:	f47f aefc 	bne.w	404c5e <follow_path+0x18a>
  404e66:	e013      	b.n	404e90 <follow_path+0x3bc>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
  404e68:	f1b9 0f0b 	cmp.w	r9, #11
  404e6c:	f47f af31 	bne.w	404cd2 <follow_path+0x1fe>
  404e70:	e725      	b.n	404cbe <follow_path+0x1ea>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
  404e72:	f04f 0206 	mov.w	r2, #6
  404e76:	e007      	b.n	404e88 <follow_path+0x3b4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
  404e78:	f1b9 0f0b 	cmp.w	r9, #11
  404e7c:	f47f af29 	bne.w	404cd2 <follow_path+0x1fe>
  404e80:	e71d      	b.n	404cbe <follow_path+0x1ea>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
  404e82:	f047 0702 	orr.w	r7, r7, #2
  404e86:	e747      	b.n	404d18 <follow_path+0x244>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
  404e88:	4610      	mov	r0, r2
  404e8a:	b007      	add	sp, #28
  404e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
  404e90:	f104 34ff 	add.w	r4, r4, #4294967295
  404e94:	f1a8 0802 	sub.w	r8, r8, #2
  404e98:	f838 3c02 	ldrh.w	r3, [r8, #-2]
  404e9c:	2b2e      	cmp	r3, #46	; 0x2e
  404e9e:	f47f aede 	bne.w	404c5e <follow_path+0x18a>
  404ea2:	e6e0      	b.n	404c66 <follow_path+0x192>
  404ea4:	f100 34ff 	add.w	r4, r0, #4294967295
  404ea8:	f1a6 0802 	sub.w	r8, r6, #2
  404eac:	f838 2c02 	ldrh.w	r2, [r8, #-2]
  404eb0:	2a2e      	cmp	r2, #46	; 0x2e
  404eb2:	f47f aed4 	bne.w	404c5e <follow_path+0x18a>
  404eb6:	e6d6      	b.n	404c66 <follow_path+0x192>
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
  404eb8:	282e      	cmp	r0, #46	; 0x2e
  404eba:	f47f aea8 	bne.w	404c0e <follow_path+0x13a>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  404ebe:	3c01      	subs	r4, #1
  404ec0:	d0d7      	beq.n	404e72 <follow_path+0x39e>
  404ec2:	2900      	cmp	r1, #0
  404ec4:	f43f ae94 	beq.w	404bf0 <follow_path+0x11c>
		w = lfn[di-1];
  404ec8:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
  404ecc:	2920      	cmp	r1, #32
  404ece:	d002      	beq.n	404ed6 <follow_path+0x402>
  404ed0:	292e      	cmp	r1, #46	; 0x2e
  404ed2:	f47f ae9c 	bne.w	404c0e <follow_path+0x13a>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  404ed6:	3c01      	subs	r4, #1
  404ed8:	f47f ae8a 	bne.w	404bf0 <follow_path+0x11c>
  404edc:	e7c9      	b.n	404e72 <follow_path+0x39e>
		w = lfn[di-1];
		if (w != ' ' && w != '.') break;
  404ede:	292e      	cmp	r1, #46	; 0x2e
  404ee0:	f47f ae95 	bne.w	404c0e <follow_path+0x13a>
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
  404ee4:	1e44      	subs	r4, r0, #1
  404ee6:	f47f ae83 	bne.w	404bf0 <follow_path+0x11c>
  404eea:	e7c2      	b.n	404e72 <follow_path+0x39e>
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
  404eec:	287f      	cmp	r0, #127	; 0x7f
  404eee:	d805      	bhi.n	404efc <follow_path+0x428>
  404ef0:	9803      	ldr	r0, [sp, #12]
  404ef2:	4631      	mov	r1, r6
  404ef4:	9a02      	ldr	r2, [sp, #8]
  404ef6:	4790      	blx	r2
  404ef8:	2800      	cmp	r0, #0
  404efa:	d1ba      	bne.n	404e72 <follow_path+0x39e>
  404efc:	f108 0702 	add.w	r7, r8, #2
			return FR_INVALID_NAME;
		lfn[di++] = w;					/* Store the Unicode char */
  404f00:	f8a8 6002 	strh.w	r6, [r8, #2]
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  404f04:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  404f08:	4630      	mov	r0, r6
  404f0a:	f104 0101 	add.w	r1, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
  404f0e:	2e1f      	cmp	r6, #31
  404f10:	d997      	bls.n	404e42 <follow_path+0x36e>
  404f12:	2e2f      	cmp	r6, #47	; 0x2f
  404f14:	d088      	beq.n	404e28 <follow_path+0x354>
  404f16:	2e5c      	cmp	r6, #92	; 0x5c
  404f18:	d088      	beq.n	404e2c <follow_path+0x358>
	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	lfn = dj->lfn;
	si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
  404f1a:	f109 0401 	add.w	r4, r9, #1
  404f1e:	e63c      	b.n	404b9a <follow_path+0xc6>

00404f20 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
  404f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404f24:	b089      	sub	sp, #36	; 0x24
  404f26:	4683      	mov	fp, r0
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
  404f28:	6984      	ldr	r4, [r0, #24]
  404f2a:	69c6      	ldr	r6, [r0, #28]
  404f2c:	9601      	str	r6, [sp, #4]
	mem_cpy(sn, fn, 12);
  404f2e:	a805      	add	r0, sp, #20
  404f30:	4621      	mov	r1, r4
  404f32:	f04f 020c 	mov.w	r2, #12
  404f36:	f243 73c1 	movw	r3, #14273	; 0x37c1
  404f3a:	f2c0 0340 	movt	r3, #64	; 0x40
  404f3e:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
  404f40:	f89d 001f 	ldrb.w	r0, [sp, #31]
  404f44:	f010 0f01 	tst.w	r0, #1
  404f48:	f000 809f 	beq.w	40508a <dir_register+0x16a>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
  404f4c:	f04f 0100 	mov.w	r1, #0
  404f50:	72e1      	strb	r1, [r4, #11]
  404f52:	f8cb 101c 	str.w	r1, [fp, #28]
{
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  404f56:	4620      	mov	r0, r4
  404f58:	a905      	add	r1, sp, #20
  404f5a:	f04f 020b 	mov.w	r2, #11
  404f5e:	f243 75c1 	movw	r5, #14273	; 0x37c1
  404f62:	f2c0 0540 	movt	r5, #64	; 0x40
  404f66:	47a8      	blx	r5
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  404f68:	f04f 0501 	mov.w	r5, #1
  404f6c:	462a      	mov	r2, r5
  404f6e:	f04f 0907 	mov.w	r9, #7
		c = (seq % 16) + '0';
		if (c > '9') c += 7;
		ns[i--] = c;
		seq /= 16;
	} while (seq);
	ns[i] = '~';
  404f72:	f04f 087e 	mov.w	r8, #126	; 0x7e

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  404f76:	f04f 0a00 	mov.w	sl, #0

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  404f7a:	f244 6739 	movw	r7, #17977	; 0x4639
  404f7e:	f2c0 0740 	movt	r7, #64	; 0x40
{
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
  404f82:	f243 76c1 	movw	r6, #14273	; 0x37c1
  404f86:	f2c0 0640 	movt	r6, #64	; 0x40
  404f8a:	9600      	str	r6, [sp, #0]
  404f8c:	e019      	b.n	404fc2 <dir_register+0xa2>
  404f8e:	4620      	mov	r0, r4
  404f90:	a905      	add	r1, sp, #20
  404f92:	f04f 020b 	mov.w	r2, #11
  404f96:	9b00      	ldr	r3, [sp, #0]
  404f98:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
  404f9a:	2d05      	cmp	r5, #5
  404f9c:	d910      	bls.n	404fc0 <dir_register+0xa0>
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
  404f9e:	9801      	ldr	r0, [sp, #4]
  404fa0:	f1a0 0002 	sub.w	r0, r0, #2
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  404fa4:	462a      	mov	r2, r5


	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
  404fa6:	ea4f 36c2 	mov.w	r6, r2, lsl #15
  404faa:	ea46 0252 	orr.w	r2, r6, r2, lsr #1
  404fae:	f830 1f02 	ldrh.w	r1, [r0, #2]!
  404fb2:	fa11 f382 	uxtah	r3, r1, r2
  404fb6:	b29a      	uxth	r2, r3
  404fb8:	8846      	ldrh	r6, [r0, #2]
  404fba:	2e00      	cmp	r6, #0
  404fbc:	d1f3      	bne.n	404fa6 <dir_register+0x86>
  404fbe:	e000      	b.n	404fc2 <dir_register+0xa2>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  404fc0:	462a      	mov	r2, r5
  404fc2:	464b      	mov	r3, r9
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
  404fc4:	f002 000f 	and.w	r0, r2, #15
  404fc8:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
  404fcc:	2939      	cmp	r1, #57	; 0x39
  404fce:	bf88      	it	hi
  404fd0:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
  404fd4:	ae03      	add	r6, sp, #12
  404fd6:	5599      	strb	r1, [r3, r6]
  404fd8:	f103 33ff 	add.w	r3, r3, #4294967295
		seq /= 16;
  404fdc:	f3c2 120f 	ubfx	r2, r2, #4, #16
	} while (seq);
  404fe0:	2a00      	cmp	r2, #0
  404fe2:	d1ef      	bne.n	404fc4 <dir_register+0xa4>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
		if (c > '9') c += 7;
		ns[i--] = c;
  404fe4:	469e      	mov	lr, r3
		seq /= 16;
	} while (seq);
	ns[i] = '~';
  404fe6:	a808      	add	r0, sp, #32
  404fe8:	18c1      	adds	r1, r0, r3
  404fea:	f801 8c14 	strb.w	r8, [r1, #-20]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  404fee:	b1b3      	cbz	r3, 40501e <dir_register+0xfe>
  404ff0:	7826      	ldrb	r6, [r4, #0]
  404ff2:	2e20      	cmp	r6, #32
  404ff4:	d015      	beq.n	405022 <dir_register+0x102>
  404ff6:	4621      	mov	r1, r4
  404ff8:	4652      	mov	r2, sl
  404ffa:	ea6f 000a 	mvn.w	r0, sl
  404ffe:	18c6      	adds	r6, r0, r3
  405000:	f016 0f01 	tst.w	r6, #1
  405004:	f040 819b 	bne.w	40533e <dir_register+0x41e>
  405008:	f102 0001 	add.w	r0, r2, #1
  40500c:	4602      	mov	r2, r0
  40500e:	4570      	cmp	r0, lr
  405010:	d008      	beq.n	405024 <dir_register+0x104>
  405012:	f811 6f01 	ldrb.w	r6, [r1, #1]!
  405016:	2e20      	cmp	r6, #32
  405018:	f040 819a 	bne.w	405350 <dir_register+0x430>
  40501c:	e002      	b.n	405024 <dir_register+0x104>
  40501e:	4652      	mov	r2, sl
  405020:	e000      	b.n	405024 <dir_register+0x104>
  405022:	4652      	mov	r2, sl
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  405024:	f04f 0020 	mov.w	r0, #32
  405028:	f1c2 0107 	rsb	r1, r2, #7
  40502c:	f001 0601 	and.w	r6, r1, #1
  405030:	2b07      	cmp	r3, #7
  405032:	f200 8158 	bhi.w	4052e6 <dir_register+0x3c6>
  405036:	e14d      	b.n	4052d4 <dir_register+0x3b4>
  405038:	2b07      	cmp	r3, #7
  40503a:	d806      	bhi.n	40504a <dir_register+0x12a>
  40503c:	ae08      	add	r6, sp, #32
  40503e:	18f1      	adds	r1, r6, r3
  405040:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  405044:	f103 0301 	add.w	r3, r3, #1
  405048:	e000      	b.n	40504c <dir_register+0x12c>
  40504a:	4601      	mov	r1, r0
  40504c:	54a1      	strb	r1, [r4, r2]
  40504e:	f102 0201 	add.w	r2, r2, #1
  405052:	2b07      	cmp	r3, #7
  405054:	f200 816b 	bhi.w	40532e <dir_register+0x40e>
  405058:	e160      	b.n	40531c <dir_register+0x3fc>

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
  40505a:	4658      	mov	r0, fp
  40505c:	47b8      	blx	r7
			if (res != FR_OK) break;
  40505e:	4606      	mov	r6, r0
  405060:	b938      	cbnz	r0, 405072 <dir_register+0x152>
	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
		for (n = 1; n < 100; n++) {
  405062:	f105 0501 	add.w	r5, r5, #1
  405066:	b2ad      	uxth	r5, r5
  405068:	2d64      	cmp	r5, #100	; 0x64
  40506a:	d190      	bne.n	404f8e <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40506c:	f04f 0607 	mov.w	r6, #7
  405070:	e12c      	b.n	4052cc <dir_register+0x3ac>
  405072:	2d64      	cmp	r5, #100	; 0x64
  405074:	f000 810a 	beq.w	40528c <dir_register+0x36c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
  405078:	2804      	cmp	r0, #4
  40507a:	f040 8127 	bne.w	4052cc <dir_register+0x3ac>
		fn[NS] = sn[NS]; dj->lfn = lfn;
  40507e:	f89d 001f 	ldrb.w	r0, [sp, #31]
  405082:	72e0      	strb	r0, [r4, #11]
  405084:	9a01      	ldr	r2, [sp, #4]
  405086:	f8cb 201c 	str.w	r2, [fp, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
  40508a:	f89d 101f 	ldrb.w	r1, [sp, #31]
  40508e:	f001 0302 	and.w	r3, r1, #2
  405092:	b2de      	uxtb	r6, r3
  405094:	b1f6      	cbz	r6, 4050d4 <dir_register+0x1b4>
		for (ne = 0; lfn[ne]; ne++) ;
  405096:	9801      	ldr	r0, [sp, #4]
  405098:	8802      	ldrh	r2, [r0, #0]
  40509a:	b152      	cbz	r2, 4050b2 <dir_register+0x192>
  40509c:	f04f 0300 	mov.w	r3, #0
  4050a0:	4601      	mov	r1, r0
  4050a2:	f103 0301 	add.w	r3, r3, #1
  4050a6:	b29b      	uxth	r3, r3
  4050a8:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
  4050ac:	2e00      	cmp	r6, #0
  4050ae:	d1f8      	bne.n	4050a2 <dir_register+0x182>
  4050b0:	e001      	b.n	4050b6 <dir_register+0x196>
  4050b2:	f04f 0300 	mov.w	r3, #0
		ne = (ne + 25) / 13;
  4050b6:	f103 0319 	add.w	r3, r3, #25
  4050ba:	f64e 404f 	movw	r0, #60495	; 0xec4f
  4050be:	f6c4 60c4 	movt	r0, #20164	; 0x4ec4
  4050c2:	fb80 e203 	smull	lr, r2, r0, r3
  4050c6:	ea4f 73e3 	mov.w	r3, r3, asr #31
  4050ca:	ebc3 09a2 	rsb	r9, r3, r2, asr #2
  4050ce:	fa1f f989 	uxth.w	r9, r9
  4050d2:	e001      	b.n	4050d8 <dir_register+0x1b8>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
  4050d4:	f04f 0901 	mov.w	r9, #1
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
  4050d8:	4658      	mov	r0, fp
  4050da:	f04f 0100 	mov.w	r1, #0
  4050de:	f244 0661 	movw	r6, #16481	; 0x4061
  4050e2:	f2c0 0640 	movt	r6, #64	; 0x40
  4050e6:	47b0      	blx	r6
	if (res != FR_OK) return res;
  4050e8:	4606      	mov	r6, r0
  4050ea:	2800      	cmp	r0, #0
  4050ec:	f040 80ee 	bne.w	4052cc <dir_register+0x3ac>
  4050f0:	f04f 0a00 	mov.w	sl, #0
  4050f4:	4654      	mov	r4, sl
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
  4050f6:	f643 652d 	movw	r5, #15917	; 0x3e2d
  4050fa:	f2c0 0540 	movt	r5, #64	; 0x40
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
			if (++n == ne) break;	/* A contiguous entry that required count is found */
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  4050fe:	f04f 0801 	mov.w	r8, #1
  405102:	f244 37d1 	movw	r7, #17361	; 0x43d1
  405106:	f2c0 0740 	movt	r7, #64	; 0x40
	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
	if (res != FR_OK) return res;
	n = is = 0;
	do {
		res = move_window(dj->fs, dj->sect);
  40510a:	f8db 0000 	ldr.w	r0, [fp]
  40510e:	f8db 1010 	ldr.w	r1, [fp, #16]
  405112:	47a8      	blx	r5
		if (res != FR_OK) break;
  405114:	4606      	mov	r6, r0
  405116:	2800      	cmp	r0, #0
  405118:	f040 80d8 	bne.w	4052cc <dir_register+0x3ac>
		c = *dj->dir;				/* Check the entry status */
  40511c:	f8db 1014 	ldr.w	r1, [fp, #20]
  405120:	7808      	ldrb	r0, [r1, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
  405122:	28e5      	cmp	r0, #229	; 0xe5
  405124:	d000      	beq.n	405128 <dir_register+0x208>
  405126:	b940      	cbnz	r0, 40513a <dir_register+0x21a>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
  405128:	b90c      	cbnz	r4, 40512e <dir_register+0x20e>
  40512a:	f8bb a006 	ldrh.w	sl, [fp, #6]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
  40512e:	f104 0401 	add.w	r4, r4, #1
  405132:	b2a4      	uxth	r4, r4
  405134:	454c      	cmp	r4, r9
  405136:	d102      	bne.n	40513e <dir_register+0x21e>
  405138:	e0ab      	b.n	405292 <dir_register+0x372>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
  40513a:	f04f 0400 	mov.w	r4, #0
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
  40513e:	4658      	mov	r0, fp
  405140:	4641      	mov	r1, r8
  405142:	47b8      	blx	r7
	} while (res == FR_OK);
  405144:	4606      	mov	r6, r0
  405146:	2800      	cmp	r0, #0
  405148:	d0df      	beq.n	40510a <dir_register+0x1ea>
  40514a:	e0bf      	b.n	4052cc <dir_register+0x3ac>

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
		res = dir_sdi(dj, is);
  40514c:	4658      	mov	r0, fp
  40514e:	4651      	mov	r1, sl
  405150:	f244 0261 	movw	r2, #16481	; 0x4061
  405154:	f2c0 0240 	movt	r2, #64	; 0x40
  405158:	4790      	blx	r2
		if (res == FR_OK) {
  40515a:	4606      	mov	r6, r0
  40515c:	2800      	cmp	r0, #0
  40515e:	f040 80b5 	bne.w	4052cc <dir_register+0x3ac>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
  405162:	f8db 0018 	ldr.w	r0, [fp, #24]
  405166:	f643 0485 	movw	r4, #14469	; 0x3885
  40516a:	f2c0 0440 	movt	r4, #64	; 0x40
  40516e:	47a0      	blx	r4
  405170:	4605      	mov	r5, r0
			ne--;
  405172:	f109 37ff 	add.w	r7, r9, #4294967295
  405176:	b2bf      	uxth	r7, r7
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
  405178:	f249 1430 	movw	r4, #37168	; 0x9130
  40517c:	f2c0 0440 	movt	r4, #64	; 0x40
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
				res = dir_next(dj, 0);	/* Next entry */
  405180:	f244 33d1 	movw	r3, #17361	; 0x43d1
  405184:	f2c0 0340 	movt	r3, #64	; 0x40
  405188:	9300      	str	r3, [sp, #0]
		res = dir_sdi(dj, is);
		if (res == FR_OK) {
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
  40518a:	f8db 0000 	ldr.w	r0, [fp]
  40518e:	f8db 1010 	ldr.w	r1, [fp, #16]
  405192:	f643 662d 	movw	r6, #15917	; 0x3e2d
  405196:	f2c0 0640 	movt	r6, #64	; 0x40
  40519a:	47b0      	blx	r6
				if (res != FR_OK) break;
  40519c:	4606      	mov	r6, r0
  40519e:	2800      	cmp	r0, #0
  4051a0:	f040 8094 	bne.w	4052cc <dir_register+0x3ac>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
  4051a4:	f8db 801c 	ldr.w	r8, [fp, #28]
  4051a8:	f8db 1014 	ldr.w	r1, [fp, #20]
  4051ac:	fa5f fa87 	uxtb.w	sl, r7
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
  4051b0:	734d      	strb	r5, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
  4051b2:	f04f 000f 	mov.w	r0, #15
  4051b6:	72c8      	strb	r0, [r1, #11]
	dir[LDIR_Type] = 0;
  4051b8:	f04f 0300 	mov.w	r3, #0
  4051bc:	730b      	strb	r3, [r1, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
  4051be:	768b      	strb	r3, [r1, #26]
  4051c0:	76cb      	strb	r3, [r1, #27]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
  4051c2:	f10a 32ff 	add.w	r2, sl, #4294967295
  4051c6:	eb02 0642 	add.w	r6, r2, r2, lsl #1
  4051ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  4051ce:	f04f 0201 	mov.w	r2, #1
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4051d2:	f64f 7cff 	movw	ip, #65535	; 0xffff
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4051d6:	f04f 09ff 	mov.w	r9, #255	; 0xff
  4051da:	e002      	b.n	4051e2 <dir_register+0x2c2>
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  4051dc:	4663      	mov	r3, ip
  4051de:	f102 0201 	add.w	r2, r2, #1
	ST_WORD(dir+LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
  4051e2:	4563      	cmp	r3, ip
  4051e4:	d05a      	beq.n	40529c <dir_register+0x37c>
  4051e6:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
  4051ea:	f106 0601 	add.w	r6, r6, #1
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
  4051ee:	18a0      	adds	r0, r4, r2

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  4051f0:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  4051f4:	540b      	strb	r3, [r1, r0]
  4051f6:	1808      	adds	r0, r1, r0
  4051f8:	ea4f 2e13 	mov.w	lr, r3, lsr #8
  4051fc:	f880 e001 	strb.w	lr, [r0, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
  405200:	2b00      	cmp	r3, #0
  405202:	d054      	beq.n	4052ae <dir_register+0x38e>
	} while (++s < 13);
  405204:	2a0c      	cmp	r2, #12
  405206:	d9ea      	bls.n	4051de <dir_register+0x2be>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
  405208:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40520c:	4293      	cmp	r3, r2
  40520e:	d002      	beq.n	405216 <dir_register+0x2f6>
  405210:	f838 6016 	ldrh.w	r6, [r8, r6, lsl #1]
  405214:	b91e      	cbnz	r6, 40521e <dir_register+0x2fe>
  405216:	f047 0a40 	orr.w	sl, r7, #64	; 0x40
  40521a:	fa5f fa8a 	uxtb.w	sl, sl
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
  40521e:	f881 a000 	strb.w	sl, [r1]
			ne--;
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
				if (res != FR_OK) break;
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
				dj->fs->wflag = 1;
  405222:	f8db 1000 	ldr.w	r1, [fp]
  405226:	f04f 0301 	mov.w	r3, #1
  40522a:	710b      	strb	r3, [r1, #4]
				res = dir_next(dj, 0);	/* Next entry */
  40522c:	4658      	mov	r0, fp
  40522e:	f04f 0100 	mov.w	r1, #0
  405232:	9a00      	ldr	r2, [sp, #0]
  405234:	4790      	blx	r2
			} while (res == FR_OK && --ne);
  405236:	4606      	mov	r6, r0
  405238:	2800      	cmp	r0, #0
  40523a:	d147      	bne.n	4052cc <dir_register+0x3ac>
  40523c:	f107 37ff 	add.w	r7, r7, #4294967295
  405240:	b2bf      	uxth	r7, r7
  405242:	2f00      	cmp	r7, #0
  405244:	d1a1      	bne.n	40518a <dir_register+0x26a>
  405246:	e035      	b.n	4052b4 <dir_register+0x394>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
  405248:	f8db 4014 	ldr.w	r4, [fp, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
  40524c:	4620      	mov	r0, r4
  40524e:	f04f 0100 	mov.w	r1, #0
  405252:	f04f 0220 	mov.w	r2, #32
  405256:	f643 0315 	movw	r3, #14357	; 0x3815
  40525a:	f2c0 0340 	movt	r3, #64	; 0x40
  40525e:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
  405260:	4620      	mov	r0, r4
  405262:	f8db 1018 	ldr.w	r1, [fp, #24]
  405266:	f04f 020b 	mov.w	r2, #11
  40526a:	f243 73c1 	movw	r3, #14273	; 0x37c1
  40526e:	f2c0 0340 	movt	r3, #64	; 0x40
  405272:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
  405274:	f8db 0018 	ldr.w	r0, [fp, #24]
  405278:	7ac1      	ldrb	r1, [r0, #11]
  40527a:	f001 0218 	and.w	r2, r1, #24
  40527e:	7322      	strb	r2, [r4, #12]
#endif
			dj->fs->wflag = 1;
  405280:	f8db 3000 	ldr.w	r3, [fp]
  405284:	f04f 0001 	mov.w	r0, #1
  405288:	7118      	strb	r0, [r3, #4]
  40528a:	e01f      	b.n	4052cc <dir_register+0x3ac>
		for (n = 1; n < 100; n++) {
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
  40528c:	f04f 0607 	mov.w	r6, #7
  405290:	e01c      	b.n	4052cc <dir_register+0x3ac>
			n = 0;					/* Not a blank entry. Restart to search */
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
	} while (res == FR_OK);

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
  405292:	f1b9 0f01 	cmp.w	r9, #1
  405296:	f63f af59 	bhi.w	40514c <dir_register+0x22c>
  40529a:	e00b      	b.n	4052b4 <dir_register+0x394>
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
  40529c:	18a0      	adds	r0, r4, r2

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
  40529e:	f810 0c01 	ldrb.w	r0, [r0, #-1]
  4052a2:	f801 9000 	strb.w	r9, [r1, r0]
  4052a6:	1808      	adds	r0, r1, r0
  4052a8:	f880 9001 	strb.w	r9, [r0, #1]
  4052ac:	e7aa      	b.n	405204 <dir_register+0x2e4>
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
	} while (++s < 13);
  4052ae:	2a0c      	cmp	r2, #12
  4052b0:	d994      	bls.n	4051dc <dir_register+0x2bc>
  4052b2:	e7b0      	b.n	405216 <dir_register+0x2f6>
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
  4052b4:	f8db 0000 	ldr.w	r0, [fp]
  4052b8:	f8db 1010 	ldr.w	r1, [fp, #16]
  4052bc:	f643 662d 	movw	r6, #15917	; 0x3e2d
  4052c0:	f2c0 0640 	movt	r6, #64	; 0x40
  4052c4:	47b0      	blx	r6
		if (res == FR_OK) {
  4052c6:	4606      	mov	r6, r0
  4052c8:	2800      	cmp	r0, #0
  4052ca:	d0bd      	beq.n	405248 <dir_register+0x328>
			dj->fs->wflag = 1;
		}
	}

	return res;
}
  4052cc:	4630      	mov	r0, r6
  4052ce:	b009      	add	sp, #36	; 0x24
  4052d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4052d4:	f10d 0c20 	add.w	ip, sp, #32
  4052d8:	eb0c 0103 	add.w	r1, ip, r3
  4052dc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
  4052e0:	f103 0301 	add.w	r3, r3, #1
  4052e4:	e000      	b.n	4052e8 <dir_register+0x3c8>
  4052e6:	4601      	mov	r1, r0
  4052e8:	54a1      	strb	r1, [r4, r2]
  4052ea:	f102 0201 	add.w	r2, r2, #1
	} while (j < 8);
  4052ee:	2a07      	cmp	r2, #7
  4052f0:	f63f aeb3 	bhi.w	40505a <dir_register+0x13a>
  4052f4:	2e00      	cmp	r6, #0
  4052f6:	f43f ae9f 	beq.w	405038 <dir_register+0x118>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  4052fa:	2b07      	cmp	r3, #7
  4052fc:	d806      	bhi.n	40530c <dir_register+0x3ec>
  4052fe:	a908      	add	r1, sp, #32
  405300:	18ce      	adds	r6, r1, r3
  405302:	f816 6c14 	ldrb.w	r6, [r6, #-20]
  405306:	f103 0301 	add.w	r3, r3, #1
  40530a:	e000      	b.n	40530e <dir_register+0x3ee>
  40530c:	4606      	mov	r6, r0
  40530e:	54a6      	strb	r6, [r4, r2]
  405310:	f102 0201 	add.w	r2, r2, #1
	} while (j < 8);
  405314:	2a07      	cmp	r2, #7
  405316:	f67f ae8f 	bls.w	405038 <dir_register+0x118>
  40531a:	e69e      	b.n	40505a <dir_register+0x13a>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
  40531c:	f10d 0e20 	add.w	lr, sp, #32
  405320:	eb0e 0103 	add.w	r1, lr, r3
  405324:	f811 6c14 	ldrb.w	r6, [r1, #-20]
  405328:	f103 0301 	add.w	r3, r3, #1
  40532c:	e000      	b.n	405330 <dir_register+0x410>
  40532e:	4606      	mov	r6, r0
  405330:	54a6      	strb	r6, [r4, r2]
  405332:	f102 0201 	add.w	r2, r2, #1
	} while (j < 8);
  405336:	2a07      	cmp	r2, #7
  405338:	f67f ae7e 	bls.w	405038 <dir_register+0x118>
  40533c:	e68d      	b.n	40505a <dir_register+0x13a>
		seq /= 16;
	} while (seq);
	ns[i] = '~';

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
  40533e:	f102 0201 	add.w	r2, r2, #1
  405342:	7860      	ldrb	r0, [r4, #1]
  405344:	f101 0101 	add.w	r1, r1, #1
  405348:	2820      	cmp	r0, #32
  40534a:	f47f ae5d 	bne.w	405008 <dir_register+0xe8>
  40534e:	e669      	b.n	405024 <dir_register+0x104>
  405350:	f100 0201 	add.w	r2, r0, #1
  405354:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  405358:	2820      	cmp	r0, #32
  40535a:	f47f ae55 	bne.w	405008 <dir_register+0xe8>
  40535e:	e661      	b.n	405024 <dir_register+0x104>

00405360 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
  405360:	2807      	cmp	r0, #7
  405362:	d816      	bhi.n	405392 <f_mount+0x32>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
  405364:	f640 5370 	movw	r3, #3440	; 0xd70
  405368:	f2c2 0300 	movt	r3, #8192	; 0x2000
  40536c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (rfs) {
  405370:	b113      	cbz	r3, 405378 <f_mount+0x18>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
  405372:	f04f 0200 	mov.w	r2, #0
  405376:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
  405378:	b111      	cbz	r1, 405380 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
  40537a:	f04f 0300 	mov.w	r3, #0
  40537e:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
  405380:	f640 5270 	movw	r2, #3440	; 0xd70
  405384:	f2c2 0200 	movt	r2, #8192	; 0x2000
  405388:	f842 1020 	str.w	r1, [r2, r0, lsl #2]

	return FR_OK;
  40538c:	f04f 0000 	mov.w	r0, #0
  405390:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
  405392:	f04f 000b 	mov.w	r0, #11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
  405396:	4770      	bx	lr

00405398 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  405398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40539c:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
  4053a0:	4605      	mov	r5, r0
  4053a2:	9101      	str	r1, [sp, #4]
  4053a4:	4616      	mov	r6, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
  4053a6:	f04f 0300 	mov.w	r3, #0
  4053aa:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  4053ac:	f002 071f 	and.w	r7, r2, #31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
  4053b0:	a801      	add	r0, sp, #4
  4053b2:	a985      	add	r1, sp, #532	; 0x214
  4053b4:	f002 021e 	and.w	r2, r2, #30
  4053b8:	f643 2415 	movw	r4, #14869	; 0x3a15
  4053bc:	f2c0 0440 	movt	r4, #64	; 0x40
  4053c0:	47a0      	blx	r4
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
  4053c2:	a982      	add	r1, sp, #520	; 0x208
  4053c4:	918b      	str	r1, [sp, #556]	; 0x22c
  4053c6:	aa02      	add	r2, sp, #8
  4053c8:	928c      	str	r2, [sp, #560]	; 0x230
	if (res == FR_OK)
  4053ca:	4603      	mov	r3, r0
  4053cc:	2800      	cmp	r0, #0
  4053ce:	f040 80ac 	bne.w	40552a <f_open+0x192>
		res = follow_path(&dj, path);	/* Follow the file path */
  4053d2:	a885      	add	r0, sp, #532	; 0x214
  4053d4:	9901      	ldr	r1, [sp, #4]
  4053d6:	f644 23d5 	movw	r3, #19157	; 0x4ad5
  4053da:	f2c0 0340 	movt	r3, #64	; 0x40
  4053de:	4798      	blx	r3
	dir = dj.dir;
  4053e0:	9c8a      	ldr	r4, [sp, #552]	; 0x228

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
  4053e2:	4603      	mov	r3, r0
  4053e4:	2800      	cmp	r0, #0
  4053e6:	f040 80a9 	bne.w	40553c <f_open+0x1a4>
		if (!dir)	/* Current dir itself */
  4053ea:	2c00      	cmp	r4, #0
  4053ec:	f040 809f 	bne.w	40552e <f_open+0x196>
  4053f0:	e0a2      	b.n	405538 <f_open+0x1a0>
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
  4053f2:	b173      	cbz	r3, 405412 <f_open+0x7a>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
  4053f4:	2b04      	cmp	r3, #4
  4053f6:	f040 80b5 	bne.w	405564 <f_open+0x1cc>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
  4053fa:	a885      	add	r0, sp, #532	; 0x214
  4053fc:	f644 7421 	movw	r4, #20257	; 0x4f21
  405400:	f2c0 0440 	movt	r4, #64	; 0x40
  405404:	47a0      	blx	r4
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
  405406:	f047 0708 	orr.w	r7, r7, #8
			dir = dj.dir;					/* New entry */
  40540a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  40540c:	4603      	mov	r3, r0
  40540e:	b158      	cbz	r0, 405428 <f_open+0x90>
  405410:	e0a8      	b.n	405564 <f_open+0x1cc>
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
  405412:	7ae3      	ldrb	r3, [r4, #11]
  405414:	f013 0f11 	tst.w	r3, #17
  405418:	f040 8095 	bne.w	405546 <f_open+0x1ae>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
  40541c:	f006 0004 	and.w	r0, r6, #4
  405420:	b2c6      	uxtb	r6, r0
  405422:	2e00      	cmp	r6, #0
  405424:	f040 8092 	bne.w	40554c <f_open+0x1b4>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
  405428:	f007 0108 	and.w	r1, r7, #8
  40542c:	b2ca      	uxtb	r2, r1
  40542e:	2a00      	cmp	r2, #0
  405430:	f000 8095 	beq.w	40555e <f_open+0x1c6>
			dw = get_fattime();					/* Created time */
  405434:	f243 7661 	movw	r6, #14177	; 0x3761
  405438:	f2c0 0640 	movt	r6, #64	; 0x40
  40543c:	47b0      	blx	r6
			ST_DWORD(dir+DIR_CrtTime, dw);
  40543e:	73a0      	strb	r0, [r4, #14]
  405440:	f3c0 2307 	ubfx	r3, r0, #8, #8
  405444:	73e3      	strb	r3, [r4, #15]
  405446:	ea4f 4110 	mov.w	r1, r0, lsr #16
  40544a:	7421      	strb	r1, [r4, #16]
  40544c:	ea4f 6010 	mov.w	r0, r0, lsr #24
  405450:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
  405452:	f04f 0600 	mov.w	r6, #0
  405456:	72e6      	strb	r6, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
  405458:	7726      	strb	r6, [r4, #28]
  40545a:	7766      	strb	r6, [r4, #29]
  40545c:	77a6      	strb	r6, [r4, #30]
  40545e:	77e6      	strb	r6, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
  405460:	7d63      	ldrb	r3, [r4, #21]
  405462:	7d22      	ldrb	r2, [r4, #20]
  405464:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
  405468:	7ee0      	ldrb	r0, [r4, #27]
  40546a:	7ea3      	ldrb	r3, [r4, #26]
  40546c:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
			ST_CLUST(dir, 0);					/* cluster = 0 */
  405470:	76a6      	strb	r6, [r4, #26]
  405472:	76e6      	strb	r6, [r4, #27]
  405474:	7526      	strb	r6, [r4, #20]
  405476:	7566      	strb	r6, [r4, #21]
			dj.fs->wflag = 1;
  405478:	9885      	ldr	r0, [sp, #532]	; 0x214
  40547a:	f04f 0601 	mov.w	r6, #1
  40547e:	7106      	strb	r6, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
  405480:	ea52 4601 	orrs.w	r6, r2, r1, lsl #16
  405484:	d06b      	beq.n	40555e <f_open+0x1c6>
				dw = dj.fs->winsect;
  405486:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
  40548a:	4631      	mov	r1, r6
  40548c:	f244 3249 	movw	r2, #17225	; 0x4349
  405490:	f2c0 0240 	movt	r2, #64	; 0x40
  405494:	4790      	blx	r2
				if (res == FR_OK) {
  405496:	4603      	mov	r3, r0
  405498:	2800      	cmp	r0, #0
  40549a:	d163      	bne.n	405564 <f_open+0x1cc>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
  40549c:	9885      	ldr	r0, [sp, #532]	; 0x214
  40549e:	f106 36ff 	add.w	r6, r6, #4294967295
  4054a2:	60c6      	str	r6, [r0, #12]
					res = move_window(dj.fs, dw);
  4054a4:	4641      	mov	r1, r8
  4054a6:	f643 632d 	movw	r3, #15917	; 0x3e2d
  4054aa:	f2c0 0340 	movt	r3, #64	; 0x40
  4054ae:	4798      	blx	r3
  4054b0:	4603      	mov	r3, r0
  4054b2:	e00e      	b.n	4054d2 <f_open+0x13a>
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
  4054b4:	7ae0      	ldrb	r0, [r4, #11]
  4054b6:	f000 0110 	and.w	r1, r0, #16
  4054ba:	b2ca      	uxtb	r2, r1
  4054bc:	2a00      	cmp	r2, #0
  4054be:	d148      	bne.n	405552 <f_open+0x1ba>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  4054c0:	f006 0602 	and.w	r6, r6, #2
  4054c4:	b2f6      	uxtb	r6, r6
  4054c6:	2e00      	cmp	r6, #0
  4054c8:	d049      	beq.n	40555e <f_open+0x1c6>
  4054ca:	f010 0f01 	tst.w	r0, #1
  4054ce:	d143      	bne.n	405558 <f_open+0x1c0>
  4054d0:	e045      	b.n	40555e <f_open+0x1c6>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
  4054d2:	2b00      	cmp	r3, #0
  4054d4:	d146      	bne.n	405564 <f_open+0x1cc>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
  4054d6:	f007 0108 	and.w	r1, r7, #8
  4054da:	b2c8      	uxtb	r0, r1
  4054dc:	b108      	cbz	r0, 4054e2 <f_open+0x14a>
			mode |= FA__WRITTEN;
  4054de:	f047 0720 	orr.w	r7, r7, #32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
  4054e2:	9a85      	ldr	r2, [sp, #532]	; 0x214
  4054e4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  4054e6:	61ee      	str	r6, [r5, #28]
		fp->dir_ptr = dir;
  4054e8:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
  4054ea:	71af      	strb	r7, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
  4054ec:	7d60      	ldrb	r0, [r4, #21]
  4054ee:	7d21      	ldrb	r1, [r4, #20]
  4054f0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
  4054f4:	7ee6      	ldrb	r6, [r4, #27]
  4054f6:	7ea1      	ldrb	r1, [r4, #26]
  4054f8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  4054fc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
  405500:	6128      	str	r0, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  405502:	7fe0      	ldrb	r0, [r4, #31]
  405504:	7fa1      	ldrb	r1, [r4, #30]
  405506:	ea4f 4101 	mov.w	r1, r1, lsl #16
  40550a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  40550e:	7f20      	ldrb	r0, [r4, #28]
  405510:	4301      	orrs	r1, r0
  405512:	7f60      	ldrb	r0, [r4, #29]
  405514:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  405518:	60e9      	str	r1, [r5, #12]
		fp->fptr = 0;						/* File pointer */
  40551a:	f04f 0000 	mov.w	r0, #0
  40551e:	60a8      	str	r0, [r5, #8]
		fp->dsect = 0;
  405520:	61a8      	str	r0, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
  405522:	602a      	str	r2, [r5, #0]
  405524:	88d2      	ldrh	r2, [r2, #6]
  405526:	80aa      	strh	r2, [r5, #4]
  405528:	e01c      	b.n	405564 <f_open+0x1cc>
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
  40552a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
  40552c:	e006      	b.n	40553c <f_open+0x1a4>
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40552e:	f016 0f1c 	tst.w	r6, #28
  405532:	f47f af6e 	bne.w	405412 <f_open+0x7a>
  405536:	e7bd      	b.n	4054b4 <f_open+0x11c>
	dir = dj.dir;

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
		if (!dir)	/* Current dir itself */
			res = FR_INVALID_NAME;
  405538:	f04f 0306 	mov.w	r3, #6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  40553c:	f016 0f1c 	tst.w	r6, #28
  405540:	f47f af57 	bne.w	4053f2 <f_open+0x5a>
  405544:	e7c5      	b.n	4054d2 <f_open+0x13a>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
				res = FR_DENIED;
  405546:	f04f 0307 	mov.w	r3, #7
  40554a:	e00b      	b.n	405564 <f_open+0x1cc>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
  40554c:	f04f 0308 	mov.w	r3, #8
  405550:	e008      	b.n	405564 <f_open+0x1cc>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
  405552:	f04f 0304 	mov.w	r3, #4
  405556:	e005      	b.n	405564 <f_open+0x1cc>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
  405558:	f04f 0307 	mov.w	r3, #7
  40555c:	e002      	b.n	405564 <f_open+0x1cc>
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
  40555e:	f04f 0300 	mov.w	r3, #0
  405562:	e7b8      	b.n	4054d6 <f_open+0x13e>
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
  405564:	4618      	mov	r0, r3
  405566:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
  40556a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40556e:	bf00      	nop

00405570 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
  405570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405574:	b085      	sub	sp, #20
  405576:	4604      	mov	r4, r0
  405578:	4688      	mov	r8, r1
  40557a:	4615      	mov	r5, r2
  40557c:	461e      	mov	r6, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
  40557e:	f04f 0300 	mov.w	r3, #0
  405582:	6033      	str	r3, [r6, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
  405584:	6800      	ldr	r0, [r0, #0]
  405586:	88a1      	ldrh	r1, [r4, #4]
  405588:	f643 1229 	movw	r2, #14633	; 0x3929
  40558c:	f2c0 0240 	movt	r2, #64	; 0x40
  405590:	4790      	blx	r2
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
  405592:	4607      	mov	r7, r0
  405594:	2800      	cmp	r0, #0
  405596:	f040 810d 	bne.w	4057b4 <f_write+0x244>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
  40559a:	79a0      	ldrb	r0, [r4, #6]
  40559c:	f010 0f80 	tst.w	r0, #128	; 0x80
  4055a0:	f040 8103 	bne.w	4057aa <f_write+0x23a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
  4055a4:	f000 0102 	and.w	r1, r0, #2
  4055a8:	b2cb      	uxtb	r3, r1
  4055aa:	2b00      	cmp	r3, #0
  4055ac:	f000 8100 	beq.w	4057b0 <f_write+0x240>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
  4055b0:	68e2      	ldr	r2, [r4, #12]
  4055b2:	42d5      	cmn	r5, r2
  4055b4:	f080 80ef 	bcs.w	405796 <f_write+0x226>

	for ( ;  btw;							/* Repeat until all data written */
  4055b8:	2d00      	cmp	r5, #0
  4055ba:	f000 80ec 	beq.w	405796 <f_write+0x226>
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  4055be:	f643 602d 	movw	r0, #15917	; 0x3e2d
  4055c2:	f2c0 0040 	movt	r0, #64	; 0x40
  4055c6:	9000      	str	r0, [sp, #0]
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  4055c8:	f243 71c1 	movw	r1, #14273	; 0x37c1
  4055cc:	f2c0 0140 	movt	r1, #64	; 0x40
  4055d0:	9101      	str	r1, [sp, #4]
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  4055d2:	f643 0365 	movw	r3, #14437	; 0x3865
  4055d6:	f2c0 0340 	movt	r3, #64	; 0x40
  4055da:	9302      	str	r3, [sp, #8]
  4055dc:	9703      	str	r7, [sp, #12]
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
  4055de:	68a7      	ldr	r7, [r4, #8]
  4055e0:	ea4f 52c7 	mov.w	r2, r7, lsl #23
  4055e4:	ea4f 50d2 	mov.w	r0, r2, lsr #23
  4055e8:	2800      	cmp	r0, #0
  4055ea:	f040 809d 	bne.w	405728 <f_write+0x1b8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
  4055ee:	6820      	ldr	r0, [r4, #0]
  4055f0:	f890 a002 	ldrb.w	sl, [r0, #2]
  4055f4:	f10a 31ff 	add.w	r1, sl, #4294967295
  4055f8:	ea01 2357 	and.w	r3, r1, r7, lsr #9
			if (!csect) {					/* On the cluster boundary? */
  4055fc:	f013 0aff 	ands.w	sl, r3, #255	; 0xff
  405600:	d12a      	bne.n	405658 <f_write+0xe8>
				if (fp->fptr == 0) {		/* On the top of the file? */
  405602:	b95f      	cbnz	r7, 40561c <f_write+0xac>
					clst = fp->sclust;		/* Follow from the origin */
  405604:	6922      	ldr	r2, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
  405606:	b99a      	cbnz	r2, 405630 <f_write+0xc0>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
  405608:	f04f 0100 	mov.w	r1, #0
  40560c:	f244 2369 	movw	r3, #17001	; 0x4269
  405610:	f2c0 0340 	movt	r3, #64	; 0x40
  405614:	4798      	blx	r3
  405616:	4602      	mov	r2, r0
  405618:	6120      	str	r0, [r4, #16]
  40561a:	e006      	b.n	40562a <f_write+0xba>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
  40561c:	6961      	ldr	r1, [r4, #20]
  40561e:	f244 2769 	movw	r7, #17001	; 0x4269
  405622:	f2c0 0740 	movt	r7, #64	; 0x40
  405626:	47b8      	blx	r7
  405628:	4602      	mov	r2, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
  40562a:	2a00      	cmp	r2, #0
  40562c:	f000 80b2 	beq.w	405794 <f_write+0x224>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  405630:	2a01      	cmp	r2, #1
  405632:	d106      	bne.n	405642 <f_write+0xd2>
  405634:	79a7      	ldrb	r7, [r4, #6]
  405636:	f067 007f 	orn	r0, r7, #127	; 0x7f
  40563a:	71a0      	strb	r0, [r4, #6]
  40563c:	f04f 0702 	mov.w	r7, #2
  405640:	e0b8      	b.n	4057b4 <f_write+0x244>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  405642:	f1b2 3fff 	cmp.w	r2, #4294967295
  405646:	d106      	bne.n	405656 <f_write+0xe6>
  405648:	79a3      	ldrb	r3, [r4, #6]
  40564a:	f063 017f 	orn	r1, r3, #127	; 0x7f
  40564e:	71a1      	strb	r1, [r4, #6]
  405650:	f04f 0701 	mov.w	r7, #1
  405654:	e0ae      	b.n	4057b4 <f_write+0x244>
				fp->clust = clst;			/* Update current cluster */
  405656:	6162      	str	r2, [r4, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
  405658:	6820      	ldr	r0, [r4, #0]
  40565a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  40565c:	69a7      	ldr	r7, [r4, #24]
  40565e:	42b9      	cmp	r1, r7
  405660:	d10b      	bne.n	40567a <f_write+0x10a>
  405662:	f04f 0100 	mov.w	r1, #0
  405666:	9a00      	ldr	r2, [sp, #0]
  405668:	4790      	blx	r2
  40566a:	b130      	cbz	r0, 40567a <f_write+0x10a>
				ABORT(fp->fs, FR_DISK_ERR);
  40566c:	79a0      	ldrb	r0, [r4, #6]
  40566e:	f060 027f 	orn	r2, r0, #127	; 0x7f
  405672:	71a2      	strb	r2, [r4, #6]
  405674:	f04f 0701 	mov.w	r7, #1
  405678:	e09c      	b.n	4057b4 <f_write+0x244>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
  40567a:	6827      	ldr	r7, [r4, #0]
  40567c:	4638      	mov	r0, r7
  40567e:	6961      	ldr	r1, [r4, #20]
  405680:	9b02      	ldr	r3, [sp, #8]
  405682:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
  405684:	4683      	mov	fp, r0
  405686:	b930      	cbnz	r0, 405696 <f_write+0x126>
  405688:	79a1      	ldrb	r1, [r4, #6]
  40568a:	f061 077f 	orn	r7, r1, #127	; 0x7f
  40568e:	71a7      	strb	r7, [r4, #6]
  405690:	f04f 0702 	mov.w	r7, #2
  405694:	e08e      	b.n	4057b4 <f_write+0x244>
			sect += csect;
  405696:	eb00 0b0a 	add.w	fp, r0, sl
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
  40569a:	ea5f 2955 	movs.w	r9, r5, lsr #9
  40569e:	d02d      	beq.n	4056fc <f_write+0x18c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
  4056a0:	78b8      	ldrb	r0, [r7, #2]
  4056a2:	eb09 020a 	add.w	r2, r9, sl
  4056a6:	4282      	cmp	r2, r0
					cc = fp->fs->csize - csect;
  4056a8:	bf88      	it	hi
  4056aa:	ebca 0900 	rsbhi	r9, sl, r0
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
  4056ae:	7878      	ldrb	r0, [r7, #1]
  4056b0:	4641      	mov	r1, r8
  4056b2:	465a      	mov	r2, fp
  4056b4:	fa5f f389 	uxtb.w	r3, r9
  4056b8:	f243 57fd 	movw	r7, #13821	; 0x35fd
  4056bc:	f2c0 0740 	movt	r7, #64	; 0x40
  4056c0:	47b8      	blx	r7
  4056c2:	b130      	cbz	r0, 4056d2 <f_write+0x162>
					ABORT(fp->fs, FR_DISK_ERR);
  4056c4:	79a2      	ldrb	r2, [r4, #6]
  4056c6:	f062 037f 	orn	r3, r2, #127	; 0x7f
  4056ca:	71a3      	strb	r3, [r4, #6]
  4056cc:	f04f 0701 	mov.w	r7, #1
  4056d0:	e070      	b.n	4057b4 <f_write+0x244>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
  4056d2:	6820      	ldr	r0, [r4, #0]
  4056d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  4056d6:	ebcb 0103 	rsb	r1, fp, r3
  4056da:	4589      	cmp	r9, r1
  4056dc:	d90b      	bls.n	4056f6 <f_write+0x186>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
  4056de:	f100 0030 	add.w	r0, r0, #48	; 0x30
  4056e2:	eb08 2141 	add.w	r1, r8, r1, lsl #9
  4056e6:	f44f 7200 	mov.w	r2, #512	; 0x200
  4056ea:	9f01      	ldr	r7, [sp, #4]
  4056ec:	47b8      	blx	r7
					fp->fs->wflag = 0;
  4056ee:	6820      	ldr	r0, [r4, #0]
  4056f0:	f04f 0200 	mov.w	r2, #0
  4056f4:	7102      	strb	r2, [r0, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
  4056f6:	ea4f 2949 	mov.w	r9, r9, lsl #9
				continue;
  4056fa:	e03c      	b.n	405776 <f_write+0x206>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
  4056fc:	68a0      	ldr	r0, [r4, #8]
  4056fe:	68e1      	ldr	r1, [r4, #12]
  405700:	4288      	cmp	r0, r1
  405702:	d30f      	bcc.n	405724 <f_write+0x1b4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
  405704:	4638      	mov	r0, r7
  405706:	f04f 0100 	mov.w	r1, #0
  40570a:	9a00      	ldr	r2, [sp, #0]
  40570c:	4790      	blx	r2
  40570e:	b130      	cbz	r0, 40571e <f_write+0x1ae>
  405710:	79a7      	ldrb	r7, [r4, #6]
  405712:	f067 017f 	orn	r1, r7, #127	; 0x7f
  405716:	71a1      	strb	r1, [r4, #6]
  405718:	f04f 0701 	mov.w	r7, #1
  40571c:	e04a      	b.n	4057b4 <f_write+0x244>
				fp->fs->winsect = sect;
  40571e:	6827      	ldr	r7, [r4, #0]
  405720:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
  405724:	f8c4 b018 	str.w	fp, [r4, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  405728:	68a3      	ldr	r3, [r4, #8]
  40572a:	ea4f 59c3 	mov.w	r9, r3, lsl #23
  40572e:	ea4f 50d9 	mov.w	r0, r9, lsr #23
  405732:	f5c0 7900 	rsb	r9, r0, #512	; 0x200
  405736:	454d      	cmp	r5, r9
  405738:	bf38      	it	cc
  40573a:	46a9      	movcc	r9, r5
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
  40573c:	6820      	ldr	r0, [r4, #0]
  40573e:	69a1      	ldr	r1, [r4, #24]
  405740:	9a00      	ldr	r2, [sp, #0]
  405742:	4790      	blx	r2
  405744:	b130      	cbz	r0, 405754 <f_write+0x1e4>
			ABORT(fp->fs, FR_DISK_ERR);
  405746:	79a0      	ldrb	r0, [r4, #6]
  405748:	f060 037f 	orn	r3, r0, #127	; 0x7f
  40574c:	71a3      	strb	r3, [r4, #6]
  40574e:	f04f 0701 	mov.w	r7, #1
  405752:	e02f      	b.n	4057b4 <f_write+0x244>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
  405754:	68a1      	ldr	r1, [r4, #8]
  405756:	ea4f 57c1 	mov.w	r7, r1, lsl #23
  40575a:	ea4f 50d7 	mov.w	r0, r7, lsr #23
  40575e:	f100 0030 	add.w	r0, r0, #48	; 0x30
  405762:	6823      	ldr	r3, [r4, #0]
  405764:	1818      	adds	r0, r3, r0
  405766:	4641      	mov	r1, r8
  405768:	464a      	mov	r2, r9
  40576a:	9f01      	ldr	r7, [sp, #4]
  40576c:	47b8      	blx	r7
		fp->fs->wflag = 1;
  40576e:	6821      	ldr	r1, [r4, #0]
  405770:	f04f 0201 	mov.w	r2, #1
  405774:	710a      	strb	r2, [r1, #4]
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  405776:	44c8      	add	r8, r9
  405778:	68a3      	ldr	r3, [r4, #8]
  40577a:	eb03 0109 	add.w	r1, r3, r9
  40577e:	60a1      	str	r1, [r4, #8]
  405780:	6837      	ldr	r7, [r6, #0]
  405782:	eb07 0009 	add.w	r0, r7, r9
  405786:	6030      	str	r0, [r6, #0]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
  405788:	ebb5 0509 	subs.w	r5, r5, r9
  40578c:	f47f af27 	bne.w	4055de <f_write+0x6e>
  405790:	9f03      	ldr	r7, [sp, #12]
  405792:	e000      	b.n	405796 <f_write+0x226>
  405794:	9f03      	ldr	r7, [sp, #12]
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
  405796:	68a3      	ldr	r3, [r4, #8]
  405798:	68e2      	ldr	r2, [r4, #12]
  40579a:	4293      	cmp	r3, r2
  40579c:	bf88      	it	hi
  40579e:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
  4057a0:	79a1      	ldrb	r1, [r4, #6]
  4057a2:	f041 0020 	orr.w	r0, r1, #32
  4057a6:	71a0      	strb	r0, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
  4057a8:	e004      	b.n	4057b4 <f_write+0x244>
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
  4057aa:	f04f 0702 	mov.w	r7, #2
  4057ae:	e001      	b.n	4057b4 <f_write+0x244>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
  4057b0:	f04f 0707 	mov.w	r7, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
  4057b4:	4638      	mov	r0, r7
  4057b6:	b005      	add	sp, #20
  4057b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004057bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
  4057bc:	b538      	push	{r3, r4, r5, lr}
  4057be:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
  4057c0:	6800      	ldr	r0, [r0, #0]
  4057c2:	88a1      	ldrh	r1, [r4, #4]
  4057c4:	f643 1329 	movw	r3, #14633	; 0x3929
  4057c8:	f2c0 0340 	movt	r3, #64	; 0x40
  4057cc:	4798      	blx	r3
	if (res == FR_OK) {
  4057ce:	4603      	mov	r3, r0
  4057d0:	2800      	cmp	r0, #0
  4057d2:	d148      	bne.n	405866 <f_sync+0xaa>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
  4057d4:	79a2      	ldrb	r2, [r4, #6]
  4057d6:	f002 0020 	and.w	r0, r2, #32
  4057da:	b2c1      	uxtb	r1, r0
  4057dc:	2900      	cmp	r1, #0
  4057de:	d042      	beq.n	405866 <f_sync+0xaa>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
  4057e0:	6820      	ldr	r0, [r4, #0]
  4057e2:	69e1      	ldr	r1, [r4, #28]
  4057e4:	f643 632d 	movw	r3, #15917	; 0x3e2d
  4057e8:	f2c0 0340 	movt	r3, #64	; 0x40
  4057ec:	4798      	blx	r3
			if (res == FR_OK) {
  4057ee:	4603      	mov	r3, r0
  4057f0:	2800      	cmp	r0, #0
  4057f2:	d138      	bne.n	405866 <f_sync+0xaa>
				dir = fp->dir_ptr;
  4057f4:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
  4057f6:	7aea      	ldrb	r2, [r5, #11]
  4057f8:	f042 0020 	orr.w	r0, r2, #32
  4057fc:	72e8      	strb	r0, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
  4057fe:	68e1      	ldr	r1, [r4, #12]
  405800:	7729      	strb	r1, [r5, #28]
  405802:	89a3      	ldrh	r3, [r4, #12]
  405804:	ea4f 2213 	mov.w	r2, r3, lsr #8
  405808:	776a      	strb	r2, [r5, #29]
  40580a:	89e0      	ldrh	r0, [r4, #14]
  40580c:	77a8      	strb	r0, [r5, #30]
  40580e:	7be1      	ldrb	r1, [r4, #15]
  405810:	77e9      	strb	r1, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
  405812:	6923      	ldr	r3, [r4, #16]
  405814:	76ab      	strb	r3, [r5, #26]
  405816:	8a22      	ldrh	r2, [r4, #16]
  405818:	ea4f 2012 	mov.w	r0, r2, lsr #8
  40581c:	76e8      	strb	r0, [r5, #27]
  40581e:	8a61      	ldrh	r1, [r4, #18]
  405820:	7529      	strb	r1, [r5, #20]
  405822:	8a63      	ldrh	r3, [r4, #18]
  405824:	ea4f 2213 	mov.w	r2, r3, lsr #8
  405828:	756a      	strb	r2, [r5, #21]
				tim = get_fattime();						/* Update updated time */
  40582a:	f243 7061 	movw	r0, #14177	; 0x3761
  40582e:	f2c0 0040 	movt	r0, #64	; 0x40
  405832:	4780      	blx	r0
				ST_DWORD(dir+DIR_WrtTime, tim);
  405834:	75a8      	strb	r0, [r5, #22]
  405836:	f3c0 2107 	ubfx	r1, r0, #8, #8
  40583a:	75e9      	strb	r1, [r5, #23]
  40583c:	ea4f 4310 	mov.w	r3, r0, lsr #16
  405840:	762b      	strb	r3, [r5, #24]
  405842:	ea4f 6210 	mov.w	r2, r0, lsr #24
  405846:	766a      	strb	r2, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
  405848:	79a0      	ldrb	r0, [r4, #6]
  40584a:	f020 0120 	bic.w	r1, r0, #32
  40584e:	71a1      	strb	r1, [r4, #6]
				fp->fs->wflag = 1;
  405850:	6823      	ldr	r3, [r4, #0]
  405852:	f04f 0201 	mov.w	r2, #1
  405856:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
  405858:	6820      	ldr	r0, [r4, #0]
  40585a:	f244 5149 	movw	r1, #17737	; 0x4549
  40585e:	f2c0 0140 	movt	r1, #64	; 0x40
  405862:	4788      	blx	r1
  405864:	4603      	mov	r3, r0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
  405866:	4618      	mov	r0, r3
  405868:	bd38      	pop	{r3, r4, r5, pc}
  40586a:	bf00      	nop

0040586c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
  40586c:	b510      	push	{r4, lr}
  40586e:	4604      	mov	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
  405870:	f245 73bd 	movw	r3, #22461	; 0x57bd
  405874:	f2c0 0340 	movt	r3, #64	; 0x40
  405878:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
  40587a:	4601      	mov	r1, r0
  40587c:	b910      	cbnz	r0, 405884 <f_close+0x18>
  40587e:	f04f 0200 	mov.w	r2, #0
  405882:	6022      	str	r2, [r4, #0]
	return res;
#endif
}
  405884:	4608      	mov	r0, r1
  405886:	bd10      	pop	{r4, pc}

00405888 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
  405888:	b510      	push	{r4, lr}
  40588a:	b082      	sub	sp, #8
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
  40588c:	ab02      	add	r3, sp, #8
  40588e:	f803 0d08 	strb.w	r0, [r3, #-8]!
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
  405892:	4608      	mov	r0, r1
  405894:	4669      	mov	r1, sp
  405896:	f04f 0201 	mov.w	r2, #1
  40589a:	ab01      	add	r3, sp, #4
  40589c:	f245 5471 	movw	r4, #21873	; 0x5571
  4058a0:	f2c0 0440 	movt	r4, #64	; 0x40
  4058a4:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
}
  4058a6:	9801      	ldr	r0, [sp, #4]
  4058a8:	2801      	cmp	r0, #1
  4058aa:	bf14      	ite	ne
  4058ac:	f04f 30ff 	movne.w	r0, #4294967295
  4058b0:	2001      	moveq	r0, #1
  4058b2:	b002      	add	sp, #8
  4058b4:	bd10      	pop	{r4, pc}
  4058b6:	bf00      	nop

004058b8 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
  4058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4058ba:	4605      	mov	r5, r0
  4058bc:	460e      	mov	r6, r1
	int n;


	for (n = 0; *str; str++, n++) {
  4058be:	7800      	ldrb	r0, [r0, #0]
  4058c0:	b188      	cbz	r0, 4058e6 <f_puts+0x2e>
  4058c2:	f04f 0400 	mov.w	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
  4058c6:	f645 0789 	movw	r7, #22665	; 0x5889
  4058ca:	f2c0 0740 	movt	r7, #64	; 0x40
  4058ce:	4631      	mov	r1, r6
  4058d0:	47b8      	blx	r7
  4058d2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4058d6:	d009      	beq.n	4058ec <f_puts+0x34>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
  4058d8:	f104 0401 	add.w	r4, r4, #1
  4058dc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
  4058e0:	2800      	cmp	r0, #0
  4058e2:	d1f4      	bne.n	4058ce <f_puts+0x16>
  4058e4:	e004      	b.n	4058f0 <f_puts+0x38>
  4058e6:	f04f 0400 	mov.w	r4, #0
  4058ea:	e001      	b.n	4058f0 <f_puts+0x38>
		if (f_putc(*str, fil) == EOF) return EOF;
  4058ec:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return n;
}
  4058f0:	4620      	mov	r0, r4
  4058f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

004058f4 <ff_convert>:
)
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
  4058f4:	287f      	cmp	r0, #127	; 0x7f
  4058f6:	d92d      	bls.n	405954 <ff_convert+0x60>
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
  4058f8:	b911      	cbnz	r1, 405900 <ff_convert+0xc>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
  4058fa:	28c7      	cmp	r0, #199	; 0xc7
  4058fc:	d10b      	bne.n	405916 <ff_convert+0x22>
  4058fe:	e021      	b.n	405944 <ff_convert+0x50>
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  405900:	28ff      	cmp	r0, #255	; 0xff
  405902:	d825      	bhi.n	405950 <ff_convert+0x5c>
  405904:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
  405908:	f249 1240 	movw	r2, #37184	; 0x9140
  40590c:	f2c0 0240 	movt	r2, #64	; 0x40
  405910:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
  405914:	4770      	bx	lr

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  405916:	f04f 0301 	mov.w	r3, #1
				if (src == Tbl[c]) break;
  40591a:	f249 1240 	movw	r2, #37184	; 0x9140
  40591e:	f2c0 0240 	movt	r2, #64	; 0x40
  405922:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  405926:	4281      	cmp	r1, r0
  405928:	d115      	bne.n	405956 <ff_convert+0x62>
  40592a:	e00d      	b.n	405948 <ff_convert+0x54>
  40592c:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  405930:	4281      	cmp	r1, r0
  405932:	d009      	beq.n	405948 <ff_convert+0x54>
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  405934:	f103 0301 	add.w	r3, r3, #1
  405938:	b29b      	uxth	r3, r3
				if (src == Tbl[c]) break;
  40593a:	f832 1f02 	ldrh.w	r1, [r2, #2]!
  40593e:	4281      	cmp	r1, r0
  405940:	d10d      	bne.n	40595e <ff_convert+0x6a>
  405942:	e001      	b.n	405948 <ff_convert+0x54>
  405944:	f04f 0300 	mov.w	r3, #0
			}
			c = (c + 0x80) & 0xFF;
  405948:	f103 0080 	add.w	r0, r3, #128	; 0x80
  40594c:	b2c0      	uxtb	r0, r0
  40594e:	4770      	bx	lr
	if (src < 0x80) {	/* ASCII */
		c = src;

	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
  405950:	f04f 0000 	mov.w	r0, #0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
  405954:	4770      	bx	lr
	} else {
		if (dir) {		/* OEMCP to Unicode */
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
  405956:	f103 0301 	add.w	r3, r3, #1
  40595a:	b29b      	uxth	r3, r3
  40595c:	e7e6      	b.n	40592c <ff_convert+0x38>
  40595e:	f103 0301 	add.w	r3, r3, #1
  405962:	b29b      	uxth	r3, r3
  405964:	2b80      	cmp	r3, #128	; 0x80
  405966:	d1e1      	bne.n	40592c <ff_convert+0x38>
  405968:	e7ee      	b.n	405948 <ff_convert+0x54>
  40596a:	bf00      	nop

0040596c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40596c:	2861      	cmp	r0, #97	; 0x61
  40596e:	d00e      	beq.n	40598e <ff_wtoupper+0x22>
  405970:	f249 4120 	movw	r1, #37920	; 0x9420
  405974:	f2c0 0140 	movt	r1, #64	; 0x40
  405978:	f04f 0200 	mov.w	r2, #0
  40597c:	f102 0201 	add.w	r2, r2, #1
  405980:	f831 3f02 	ldrh.w	r3, [r1, #2]!
  405984:	b15b      	cbz	r3, 40599e <ff_wtoupper+0x32>
  405986:	4283      	cmp	r3, r0
  405988:	d1f8      	bne.n	40597c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
  40598a:	b913      	cbnz	r3, 405992 <ff_wtoupper+0x26>
  40598c:	4770      	bx	lr
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
  40598e:	f04f 0200 	mov.w	r2, #0

	return tbl_lower[i] ? tbl_upper[i] : chr;
  405992:	f249 2040 	movw	r0, #37440	; 0x9240
  405996:	f2c0 0040 	movt	r0, #64	; 0x40
  40599a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
}
  40599e:	4770      	bx	lr

004059a0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4059a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4059a2:	b083      	sub	sp, #12
  4059a4:	4604      	mov	r4, r0
  4059a6:	460d      	mov	r5, r1
	uint32_t val = 0;
  4059a8:	f04f 0300 	mov.w	r3, #0
  4059ac:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4059ae:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  4059b2:	f2c4 000e 	movt	r0, #16398	; 0x400e
  4059b6:	4284      	cmp	r4, r0
  4059b8:	d10d      	bne.n	4059d6 <usart_serial_getchar+0x36>
		while (uart_read((Uart*)p_usart, data));
  4059ba:	f44f 66c0 	mov.w	r6, #1536	; 0x600
  4059be:	f2c4 060e 	movt	r6, #16398	; 0x400e
  4059c2:	f642 77c1 	movw	r7, #12225	; 0x2fc1
  4059c6:	f2c0 0740 	movt	r7, #64	; 0x40
  4059ca:	4630      	mov	r0, r6
  4059cc:	4629      	mov	r1, r5
  4059ce:	47b8      	blx	r7
  4059d0:	2800      	cmp	r0, #0
  4059d2:	d1fa      	bne.n	4059ca <usart_serial_getchar+0x2a>
  4059d4:	e029      	b.n	405a2a <usart_serial_getchar+0x8a>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4059d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4059da:	f2c4 010e 	movt	r1, #16398	; 0x400e
  4059de:	428c      	cmp	r4, r1
  4059e0:	d10d      	bne.n	4059fe <usart_serial_getchar+0x5e>
		while (uart_read((Uart*)p_usart, data));
  4059e2:	f44f 6400 	mov.w	r4, #2048	; 0x800
  4059e6:	f2c4 040e 	movt	r4, #16398	; 0x400e
  4059ea:	f642 76c1 	movw	r6, #12225	; 0x2fc1
  4059ee:	f2c0 0640 	movt	r6, #64	; 0x40
  4059f2:	4620      	mov	r0, r4
  4059f4:	4629      	mov	r1, r5
  4059f6:	47b0      	blx	r6
  4059f8:	2800      	cmp	r0, #0
  4059fa:	d1fa      	bne.n	4059f2 <usart_serial_getchar+0x52>
  4059fc:	e02a      	b.n	405a54 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4059fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  405a02:	f2c4 0202 	movt	r2, #16386	; 0x4002
  405a06:	4294      	cmp	r4, r2
  405a08:	d10f      	bne.n	405a2a <usart_serial_getchar+0x8a>
		while (usart_read(p_usart, &val));
  405a0a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  405a0e:	f2c4 0402 	movt	r4, #16386	; 0x4002
  405a12:	f642 76f9 	movw	r6, #12281	; 0x2ff9
  405a16:	f2c0 0640 	movt	r6, #64	; 0x40
  405a1a:	4620      	mov	r0, r4
  405a1c:	a901      	add	r1, sp, #4
  405a1e:	47b0      	blx	r6
  405a20:	2800      	cmp	r0, #0
  405a22:	d1fa      	bne.n	405a1a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
  405a24:	9b01      	ldr	r3, [sp, #4]
  405a26:	702b      	strb	r3, [r5, #0]
  405a28:	e014      	b.n	405a54 <usart_serial_getchar+0xb4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  405a2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  405a2e:	f2c4 0002 	movt	r0, #16386	; 0x4002
  405a32:	4284      	cmp	r4, r0
  405a34:	d10e      	bne.n	405a54 <usart_serial_getchar+0xb4>
		while (usart_read(p_usart, &val));
  405a36:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  405a3a:	f2c4 0402 	movt	r4, #16386	; 0x4002
  405a3e:	f642 76f9 	movw	r6, #12281	; 0x2ff9
  405a42:	f2c0 0640 	movt	r6, #64	; 0x40
  405a46:	4620      	mov	r0, r4
  405a48:	a901      	add	r1, sp, #4
  405a4a:	47b0      	blx	r6
  405a4c:	2800      	cmp	r0, #0
  405a4e:	d1fa      	bne.n	405a46 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  405a50:	9901      	ldr	r1, [sp, #4]
  405a52:	7029      	strb	r1, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  405a54:	b003      	add	sp, #12
  405a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00405a58 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  405a58:	b570      	push	{r4, r5, r6, lr}
  405a5a:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405a5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  405a60:	f2c4 030e 	movt	r3, #16398	; 0x400e
  405a64:	4298      	cmp	r0, r3
  405a66:	d10f      	bne.n	405a88 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
  405a68:	f44f 65c0 	mov.w	r5, #1536	; 0x600
  405a6c:	f2c4 050e 	movt	r5, #16398	; 0x400e
  405a70:	f642 76a9 	movw	r6, #12201	; 0x2fa9
  405a74:	f2c0 0640 	movt	r6, #64	; 0x40
  405a78:	4628      	mov	r0, r5
  405a7a:	4621      	mov	r1, r4
  405a7c:	47b0      	blx	r6
  405a7e:	2800      	cmp	r0, #0
  405a80:	d1fa      	bne.n	405a78 <usart_serial_putchar+0x20>
		return 1;
  405a82:	f04f 0001 	mov.w	r0, #1
  405a86:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405a8c:	f2c4 010e 	movt	r1, #16398	; 0x400e
  405a90:	4288      	cmp	r0, r1
  405a92:	d10f      	bne.n	405ab4 <usart_serial_putchar+0x5c>
		while (uart_write((Uart*)p_usart, c)!=0);
  405a94:	f44f 6500 	mov.w	r5, #2048	; 0x800
  405a98:	f2c4 050e 	movt	r5, #16398	; 0x400e
  405a9c:	f642 76a9 	movw	r6, #12201	; 0x2fa9
  405aa0:	f2c0 0640 	movt	r6, #64	; 0x40
  405aa4:	4628      	mov	r0, r5
  405aa6:	4621      	mov	r1, r4
  405aa8:	47b0      	blx	r6
  405aaa:	2800      	cmp	r0, #0
  405aac:	d1fa      	bne.n	405aa4 <usart_serial_putchar+0x4c>
		return 1;
  405aae:	f04f 0001 	mov.w	r0, #1
  405ab2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405ab4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  405ab8:	f2c4 0202 	movt	r2, #16386	; 0x4002
  405abc:	4290      	cmp	r0, r2
  405abe:	d10f      	bne.n	405ae0 <usart_serial_putchar+0x88>
		while (usart_write(p_usart, c)!=0);
  405ac0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  405ac4:	f2c4 0502 	movt	r5, #16386	; 0x4002
  405ac8:	f642 76d9 	movw	r6, #12249	; 0x2fd9
  405acc:	f2c0 0640 	movt	r6, #64	; 0x40
  405ad0:	4628      	mov	r0, r5
  405ad2:	4621      	mov	r1, r4
  405ad4:	47b0      	blx	r6
  405ad6:	2800      	cmp	r0, #0
  405ad8:	d1fa      	bne.n	405ad0 <usart_serial_putchar+0x78>
		return 1;
  405ada:	f04f 0001 	mov.w	r0, #1
  405ade:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  405ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  405ae4:	f2c4 0302 	movt	r3, #16386	; 0x4002
  405ae8:	4298      	cmp	r0, r3
  405aea:	d10f      	bne.n	405b0c <usart_serial_putchar+0xb4>
		while (usart_write(p_usart, c)!=0);
  405aec:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  405af0:	f2c4 0502 	movt	r5, #16386	; 0x4002
  405af4:	f642 76d9 	movw	r6, #12249	; 0x2fd9
  405af8:	f2c0 0640 	movt	r6, #64	; 0x40
  405afc:	4628      	mov	r0, r5
  405afe:	4621      	mov	r1, r4
  405b00:	47b0      	blx	r6
  405b02:	2800      	cmp	r0, #0
  405b04:	d1fa      	bne.n	405afc <usart_serial_putchar+0xa4>
		return 1;
  405b06:	f04f 0001 	mov.w	r0, #1
  405b0a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  405b0c:	f04f 0000 	mov.w	r0, #0
}
  405b10:	bd70      	pop	{r4, r5, r6, pc}
  405b12:	bf00      	nop

00405b14 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  405b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b18:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
	
	char test_file_name[] = "0:sd_mmc_test.txt";
  405b1c:	ac99      	add	r4, sp, #612	; 0x264
  405b1e:	f249 75d0 	movw	r5, #38864	; 0x97d0
  405b22:	f2c0 0540 	movt	r5, #64	; 0x40
  405b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  405b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  405b2a:	682b      	ldr	r3, [r5, #0]
  405b2c:	8023      	strh	r3, [r4, #0]
		.paritytype = CONF_TEST_PARITY,
		.stopbits   = CONF_TEST_STOPBITS,
	};

	irq_initialize_vectors();
	cpu_irq_enable();
  405b2e:	f04f 0401 	mov.w	r4, #1
  405b32:	f240 0030 	movw	r0, #48	; 0x30
  405b36:	f2c2 0000 	movt	r0, #8192	; 0x2000
  405b3a:	7004      	strb	r4, [r0, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  405b3c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  405b40:	b662      	cpsie	i

	sysclk_init();
  405b42:	f241 0179 	movw	r1, #4217	; 0x1079
  405b46:	f2c0 0140 	movt	r1, #64	; 0x40
  405b4a:	4788      	blx	r1
	board_init();
  405b4c:	f241 22a5 	movw	r2, #4773	; 0x12a5
  405b50:	f2c0 0240 	movt	r2, #64	; 0x40
  405b54:	4790      	blx	r2
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  405b56:	f640 5bd0 	movw	fp, #3536	; 0xdd0
  405b5a:	f2c2 0b00 	movt	fp, #8192	; 0x2000
  405b5e:	f44f 65c0 	mov.w	r5, #1536	; 0x600
  405b62:	f2c4 050e 	movt	r5, #16398	; 0x400e
  405b66:	f8cb 5000 	str.w	r5, [fp]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  405b6a:	f645 2659 	movw	r6, #23129	; 0x5a59
  405b6e:	f2c0 0640 	movt	r6, #64	; 0x40
  405b72:	f640 57cc 	movw	r7, #3532	; 0xdcc
  405b76:	f2c2 0700 	movt	r7, #8192	; 0x2000
  405b7a:	603e      	str	r6, [r7, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  405b7c:	f640 53c8 	movw	r3, #3528	; 0xdc8
  405b80:	469a      	mov	sl, r3
  405b82:	f2c2 0a00 	movt	sl, #8192	; 0x2000
  405b86:	f645 10a1 	movw	r0, #22945	; 0x59a1
  405b8a:	f2c0 0040 	movt	r0, #64	; 0x40
  405b8e:	f8ca 0000 	str.w	r0, [sl]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  405b92:	f44f 6960 	mov.w	r9, #3584	; 0xe00
  405b96:	f2c0 7927 	movt	r9, #1831	; 0x727
  405b9a:	f8cd 9000 	str.w	r9, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  405b9e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  405ba2:	9101      	str	r1, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  405ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405ba8:	9202      	str	r2, [sp, #8]
  405baa:	f04f 0008 	mov.w	r0, #8
  405bae:	f642 56e1 	movw	r6, #11745	; 0x2de1
  405bb2:	f2c0 0640 	movt	r6, #64	; 0x40
  405bb6:	47b0      	blx	r6
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  405bb8:	4628      	mov	r0, r5
  405bba:	4669      	mov	r1, sp
  405bbc:	f642 7765 	movw	r7, #12133	; 0x2f65
  405bc0:	f2c0 0740 	movt	r7, #64	; 0x40
  405bc4:	47b8      	blx	r7
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  405bc6:	f240 0840 	movw	r8, #64	; 0x40
  405bca:	f2c2 0800 	movt	r8, #8192	; 0x2000
  405bce:	f8d8 3000 	ldr.w	r3, [r8]
  405bd2:	6898      	ldr	r0, [r3, #8]
  405bd4:	f04f 0100 	mov.w	r1, #0
  405bd8:	f246 2729 	movw	r7, #25129	; 0x6229
  405bdc:	f2c0 0740 	movt	r7, #64	; 0x40
  405be0:	47b8      	blx	r7
	setbuf(stdin, NULL);
  405be2:	f8d8 0000 	ldr.w	r0, [r8]
  405be6:	6840      	ldr	r0, [r0, #4]
  405be8:	f04f 0100 	mov.w	r1, #0
  405bec:	47b8      	blx	r7
	stdio_serial_init(CONF_TEST_USART, &usart_serial_options);

	/* Initialize SD MMC stack */
	sd_mmc_init();
  405bee:	f240 31a9 	movw	r1, #937	; 0x3a9
  405bf2:	f2c0 0140 	movt	r1, #64	; 0x40
  405bf6:	4788      	blx	r1
  405bf8:	f04f 0008 	mov.w	r0, #8
  405bfc:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  405bfe:	f8cb 5000 	str.w	r5, [fp]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  405c02:	f645 2259 	movw	r2, #23129	; 0x5a59
  405c06:	f2c0 0240 	movt	r2, #64	; 0x40
  405c0a:	f640 53cc 	movw	r3, #3532	; 0xdcc
  405c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  405c12:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  405c14:	f645 10a1 	movw	r0, #22945	; 0x59a1
  405c18:	f2c0 0040 	movt	r0, #64	; 0x40
  405c1c:	f8ca 0000 	str.w	r0, [sl]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  405c20:	f8cd 9000 	str.w	r9, [sp]
	uart_settings.ul_baudrate = opt->baudrate;
  405c24:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  405c28:	9101      	str	r1, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
  405c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405c2e:	9202      	str	r2, [sp, #8]
  405c30:	f04f 0008 	mov.w	r0, #8
  405c34:	47b0      	blx	r6
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  405c36:	4628      	mov	r0, r5
  405c38:	4669      	mov	r1, sp
  405c3a:	f642 7565 	movw	r5, #12133	; 0x2f65
  405c3e:	f2c0 0540 	movt	r5, #64	; 0x40
  405c42:	47a8      	blx	r5
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  405c44:	f8d8 3000 	ldr.w	r3, [r8]
  405c48:	6898      	ldr	r0, [r3, #8]
  405c4a:	f04f 0100 	mov.w	r1, #0
  405c4e:	47b8      	blx	r7
	setbuf(stdin, NULL);
  405c50:	f8d8 0000 	ldr.w	r0, [r8]
  405c54:	6840      	ldr	r0, [r0, #4]
  405c56:	f04f 0100 	mov.w	r1, #0
  405c5a:	47b8      	blx	r7
	
	/** Initialize debug console */
	configure_console();

	/** Enable peripheral clock */
	pmc_enable_periph_clk(ID_SMC);
  405c5c:	f04f 000a 	mov.w	r0, #10
  405c60:	47b0      	blx	r6

	/** Configure SMC interface for Lcd */
	smc_set_setup_timing(SMC, ILI93XX_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  405c62:	f04f 0600 	mov.w	r6, #0
  405c66:	f2c4 060e 	movt	r6, #16398	; 0x400e
  405c6a:	4630      	mov	r0, r6
  405c6c:	4621      	mov	r1, r4
  405c6e:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  405c72:	f242 2701 	movw	r7, #8705	; 0x2201
  405c76:	f2c0 0740 	movt	r7, #64	; 0x40
  405c7a:	47b8      	blx	r7
	| SMC_SETUP_NCS_WR_SETUP(2)
	| SMC_SETUP_NRD_SETUP(2)
	| SMC_SETUP_NCS_RD_SETUP(2));
	smc_set_pulse_timing(SMC, ILI93XX_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  405c7c:	4630      	mov	r0, r6
  405c7e:	4621      	mov	r1, r4
  405c80:	f240 4204 	movw	r2, #1028	; 0x404
  405c84:	f6c0 220a 	movt	r2, #2570	; 0xa0a
  405c88:	f242 2509 	movw	r5, #8713	; 0x2209
  405c8c:	f2c0 0540 	movt	r5, #64	; 0x40
  405c90:	47a8      	blx	r5
	| SMC_PULSE_NCS_WR_PULSE(4)
	| SMC_PULSE_NRD_PULSE(10)
	| SMC_PULSE_NCS_RD_PULSE(10));
	smc_set_cycle_timing(SMC, ILI93XX_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  405c92:	4630      	mov	r0, r6
  405c94:	4621      	mov	r1, r4
  405c96:	f04f 020a 	mov.w	r2, #10
  405c9a:	f2c0 0216 	movt	r2, #22
  405c9e:	f242 2311 	movw	r3, #8721	; 0x2211
  405ca2:	f2c0 0340 	movt	r3, #64	; 0x40
  405ca6:	4798      	blx	r3
	#if ((!defined(SAM4S)) && (!defined(SAM4E)))
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
	| SMC_MODE_WRITE_MODE
	| SMC_MODE_DBW_8_BIT);
	#else
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
  405ca8:	4630      	mov	r0, r6
  405caa:	4621      	mov	r1, r4
  405cac:	f04f 0203 	mov.w	r2, #3
  405cb0:	f242 2419 	movw	r4, #8729	; 0x2219
  405cb4:	f2c0 0440 	movt	r4, #64	; 0x40
  405cb8:	47a0      	blx	r4
	| SMC_MODE_WRITE_MODE);
	#endif
	/** Initialize display parameter */
	g_ili93xx_display_opt.ul_width = ILI93XX_LCD_WIDTH;
  405cba:	f640 55d8 	movw	r5, #3544	; 0xdd8
  405cbe:	f2c2 0500 	movt	r5, #8192	; 0x2000
  405cc2:	f04f 07f0 	mov.w	r7, #240	; 0xf0
  405cc6:	602f      	str	r7, [r5, #0]
	g_ili93xx_display_opt.ul_height = ILI93XX_LCD_HEIGHT;
  405cc8:	f44f 76a0 	mov.w	r6, #320	; 0x140
  405ccc:	606e      	str	r6, [r5, #4]
	g_ili93xx_display_opt.foreground_color = COLOR_BLACK;
  405cce:	f04f 0400 	mov.w	r4, #0
  405cd2:	60ac      	str	r4, [r5, #8]
	g_ili93xx_display_opt.background_color = COLOR_WHITE;
  405cd4:	f06f 4b7f 	mvn.w	fp, #4278190080	; 0xff000000
  405cd8:	f8c5 b00c 	str.w	fp, [r5, #12]

	/** Switch off backlight */
	aat31xx_disable_backlight();
  405cdc:	f241 414d 	movw	r1, #5197	; 0x144d
  405ce0:	f2c0 0140 	movt	r1, #64	; 0x40
  405ce4:	4788      	blx	r1

	/** Initialize LCD */
	ili93xx_init(&g_ili93xx_display_opt);
  405ce6:	4628      	mov	r0, r5
  405ce8:	f641 1291 	movw	r2, #6545	; 0x1991
  405cec:	f2c0 0240 	movt	r2, #64	; 0x40
  405cf0:	4790      	blx	r2

	/** Set backlight level */
	aat31xx_set_backlight(AAT31XX_AVG_BACKLIGHT_LEVEL);
  405cf2:	f04f 0008 	mov.w	r0, #8
  405cf6:	f241 33e1 	movw	r3, #5089	; 0x13e1
  405cfa:	f2c0 0340 	movt	r3, #64	; 0x40
  405cfe:	4798      	blx	r3

	ili93xx_set_foreground_color(COLOR_WHITE);
  405d00:	4658      	mov	r0, fp
  405d02:	f641 0a6d 	movw	sl, #6253	; 0x186d
  405d06:	f2c0 0a40 	movt	sl, #64	; 0x40
  405d0a:	47d0      	blx	sl
	ili93xx_draw_filled_rectangle(0, 0, ILI93XX_LCD_WIDTH,
  405d0c:	4620      	mov	r0, r4
  405d0e:	4621      	mov	r1, r4
  405d10:	463a      	mov	r2, r7
  405d12:	4633      	mov	r3, r6
  405d14:	f641 7531 	movw	r5, #7985	; 0x1f31
  405d18:	f2c0 0540 	movt	r5, #64	; 0x40
  405d1c:	47a8      	blx	r5
	ILI93XX_LCD_HEIGHT);
	/** Turn on LCD */
	ili93xx_display_on();
  405d1e:	f641 002d 	movw	r0, #6189	; 0x182d
  405d22:	f2c0 0040 	movt	r0, #64	; 0x40
  405d26:	4780      	blx	r0
	ili93xx_set_cursor_position(0, 0);
  405d28:	4620      	mov	r0, r4
  405d2a:	4621      	mov	r1, r4
  405d2c:	f641 1761 	movw	r7, #6497	; 0x1961
  405d30:	f2c0 0740 	movt	r7, #64	; 0x40
  405d34:	47b8      	blx	r7

	ili93xx_set_foreground_color(COLOR_VIOLET);
	ili93xx_draw_line(0, 0, 240, 320); */
	
	/* Output example information */
	printf("-- NAND Flash Raw Example --\n\r");
  405d36:	f249 6000 	movw	r0, #38400	; 0x9600
  405d3a:	f2c0 0040 	movt	r0, #64	; 0x40
  405d3e:	f246 15d9 	movw	r5, #25049	; 0x61d9
  405d42:	f2c0 0540 	movt	r5, #64	; 0x40
  405d46:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  405d48:	f249 6020 	movw	r0, #38432	; 0x9620
  405d4c:	f2c0 0040 	movt	r0, #64	; 0x40
  405d50:	f249 6128 	movw	r1, #38440	; 0x9628
  405d54:	f2c0 0140 	movt	r1, #64	; 0x40
  405d58:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  405d5a:	f249 6934 	movw	r9, #38452	; 0x9634
  405d5e:	f2c0 0940 	movt	r9, #64	; 0x40
  405d62:	f249 674c 	movw	r7, #38476	; 0x964c
  405d66:	f2c0 0740 	movt	r7, #64	; 0x40
  405d6a:	f249 6658 	movw	r6, #38488	; 0x9658
  405d6e:	f2c0 0640 	movt	r6, #64	; 0x40
  405d72:	4648      	mov	r0, r9
  405d74:	4639      	mov	r1, r7
  405d76:	4632      	mov	r2, r6
  405d78:	47a8      	blx	r5

	ili93xx_set_foreground_color(COLOR_BLACK);
  405d7a:	4620      	mov	r0, r4
  405d7c:	47d0      	blx	sl
	ili93xx_draw_string(10,70,(uint8_t *)"success");
  405d7e:	f04f 000a 	mov.w	r0, #10
  405d82:	f04f 0146 	mov.w	r1, #70	; 0x46
  405d86:	f249 6264 	movw	r2, #38500	; 0x9664
  405d8a:	f2c0 0240 	movt	r2, #64	; 0x40
  405d8e:	f242 0459 	movw	r4, #8281	; 0x2059
  405d92:	f2c0 0440 	movt	r4, #64	; 0x40
  405d96:	47a0      	blx	r4
	

	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
  405d98:	f249 606c 	movw	r0, #38508	; 0x966c
  405d9c:	f2c0 0040 	movt	r0, #64	; 0x40
  405da0:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  405da2:	4648      	mov	r0, r9
  405da4:	4639      	mov	r1, r7
  405da6:	4632      	mov	r2, r6
  405da8:	47a8      	blx	r5
	while (1) {
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  405daa:	f249 689c 	movw	r8, #38556	; 0x969c
  405dae:	f2c0 0840 	movt	r8, #64	; 0x40
  405db2:	f246 15d9 	movw	r5, #25049	; 0x61d9
  405db6:	f2c0 0540 	movt	r5, #64	; 0x40

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
  405dba:	f645 7729 	movw	r7, #24361	; 0x5f29
  405dbe:	f2c0 0740 	movt	r7, #64	; 0x40
			if (CTRL_FAIL == status) {
				printf("Card install FAIL\n\r");
  405dc2:	f249 6bcc 	movw	fp, #38604	; 0x96cc
  405dc6:	f2c0 0b40 	movt	fp, #64	; 0x40
	

	printf("\x0C\n\r-- SD/MMC/SDIO Card Example on FatFs --\n\r");
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
	while (1) {
		printf("Please plug an SD, MMC or SDIO card in slot.\n\r");
  405dca:	4640      	mov	r0, r8
  405dcc:	47a8      	blx	r5

		/* Wait card present and ready */
		do {
			status = sd_mmc_test_unit_ready(0);
  405dce:	f04f 0400 	mov.w	r4, #0
  405dd2:	4620      	mov	r0, r4
  405dd4:	47b8      	blx	r7
			if (CTRL_FAIL == status) {
  405dd6:	2801      	cmp	r0, #1
  405dd8:	d10f      	bne.n	405dfa <main+0x2e6>
				printf("Card install FAIL\n\r");
  405dda:	4658      	mov	r0, fp
  405ddc:	47a8      	blx	r5
				printf("Please unplug and re-plug the card.\n\r");
  405dde:	f249 60e0 	movw	r0, #38624	; 0x96e0
  405de2:	f2c0 0040 	movt	r0, #64	; 0x40
  405de6:	47a8      	blx	r5
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  405de8:	f240 36d5 	movw	r6, #981	; 0x3d5
  405dec:	f2c0 0640 	movt	r6, #64	; 0x40
  405df0:	4620      	mov	r0, r4
  405df2:	47b0      	blx	r6
  405df4:	2802      	cmp	r0, #2
  405df6:	d1fb      	bne.n	405df0 <main+0x2dc>
  405df8:	e7eb      	b.n	405dd2 <main+0x2be>
				}
			}
		} while (CTRL_GOOD != status);
  405dfa:	2800      	cmp	r0, #0
  405dfc:	d1e9      	bne.n	405dd2 <main+0x2be>

		printf("Mount disk (f_mount)...\r\n");
  405dfe:	f249 7008 	movw	r0, #38664	; 0x9708
  405e02:	f2c0 0040 	movt	r0, #64	; 0x40
  405e06:	47a8      	blx	r5
		memset(&fs, 0, sizeof(FATFS));
  405e08:	a80d      	add	r0, sp, #52	; 0x34
  405e0a:	f04f 0100 	mov.w	r1, #0
  405e0e:	f44f 720c 	mov.w	r2, #560	; 0x230
  405e12:	f246 2319 	movw	r3, #25113	; 0x6219
  405e16:	f2c0 0340 	movt	r3, #64	; 0x40
  405e1a:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
  405e1c:	f04f 0000 	mov.w	r0, #0
  405e20:	a90d      	add	r1, sp, #52	; 0x34
  405e22:	f245 3261 	movw	r2, #21345	; 0x5361
  405e26:	f2c0 0240 	movt	r2, #64	; 0x40
  405e2a:	4790      	blx	r2
		if (FR_INVALID_DRIVE == res) {
  405e2c:	280b      	cmp	r0, #11
  405e2e:	d107      	bne.n	405e40 <main+0x32c>
			printf("[FAIL] res %d\r\n", res);
  405e30:	f249 7024 	movw	r0, #38692	; 0x9724
  405e34:	f2c0 0040 	movt	r0, #64	; 0x40
  405e38:	f04f 010b 	mov.w	r1, #11
  405e3c:	47a8      	blx	r5
			goto main_end_of_test;
  405e3e:	e063      	b.n	405f08 <main+0x3f4>
		}
		printf("[OK]\r\n");
  405e40:	f249 7034 	movw	r0, #38708	; 0x9734
  405e44:	f2c0 0040 	movt	r0, #64	; 0x40
  405e48:	47a8      	blx	r5

		printf("Create a file (f_open)...\r\n");
  405e4a:	f249 703c 	movw	r0, #38716	; 0x973c
  405e4e:	f2c0 0040 	movt	r0, #64	; 0x40
  405e52:	47a8      	blx	r5
		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
  405e54:	f04f 0130 	mov.w	r1, #48	; 0x30
  405e58:	f88d 1264 	strb.w	r1, [sp, #612]	; 0x264
		res = f_open(&file_object,
  405e5c:	a804      	add	r0, sp, #16
  405e5e:	a999      	add	r1, sp, #612	; 0x264
  405e60:	f04f 0201 	mov.w	r2, #1
  405e64:	f245 3699 	movw	r6, #21401	; 0x5399
  405e68:	f2c0 0640 	movt	r6, #64	; 0x40
  405e6c:	47b0      	blx	r6
				(char const *)test_file_name,
				FA_READ);
		if (res != FR_OK) {
  405e6e:	4601      	mov	r1, r0
  405e70:	b128      	cbz	r0, 405e7e <main+0x36a>
			printf("[FAIL] res %d\r\n", res);
  405e72:	f249 7024 	movw	r0, #38692	; 0x9724
  405e76:	f2c0 0040 	movt	r0, #64	; 0x40
  405e7a:	47a8      	blx	r5
			goto main_end_of_test;
  405e7c:	e044      	b.n	405f08 <main+0x3f4>
		}
		printf("[OK]\r\n");
  405e7e:	f249 7034 	movw	r0, #38708	; 0x9734
  405e82:	f2c0 0040 	movt	r0, #64	; 0x40
  405e86:	47a8      	blx	r5

		printf("Write to test file (f_puts)...\r\n");
  405e88:	f249 7058 	movw	r0, #38744	; 0x9758
  405e8c:	f2c0 0040 	movt	r0, #64	; 0x40
  405e90:	47a8      	blx	r5
		if (0 == f_puts("Test SD/MMC stack\n", &file_object)) {
  405e92:	f249 707c 	movw	r0, #38780	; 0x977c
  405e96:	f2c0 0040 	movt	r0, #64	; 0x40
  405e9a:	a904      	add	r1, sp, #16
  405e9c:	f645 04b9 	movw	r4, #22713	; 0x58b9
  405ea0:	f2c0 0440 	movt	r4, #64	; 0x40
  405ea4:	47a0      	blx	r4
  405ea6:	b958      	cbnz	r0, 405ec0 <main+0x3ac>
			f_close(&file_object);
  405ea8:	a804      	add	r0, sp, #16
  405eaa:	f645 016d 	movw	r1, #22637	; 0x586d
  405eae:	f2c0 0140 	movt	r1, #64	; 0x40
  405eb2:	4788      	blx	r1
			printf("[FAIL]\r\n");
  405eb4:	f249 7090 	movw	r0, #38800	; 0x9790
  405eb8:	f2c0 0040 	movt	r0, #64	; 0x40
  405ebc:	47a8      	blx	r5
			goto main_end_of_test;
  405ebe:	e023      	b.n	405f08 <main+0x3f4>
		}
		printf("[OK]\r\n");
  405ec0:	f249 7034 	movw	r0, #38708	; 0x9734
  405ec4:	f2c0 0040 	movt	r0, #64	; 0x40
  405ec8:	47a8      	blx	r5
		f_close(&file_object);
  405eca:	a804      	add	r0, sp, #16
  405ecc:	f645 036d 	movw	r3, #22637	; 0x586d
  405ed0:	f2c0 0340 	movt	r3, #64	; 0x40
  405ed4:	4798      	blx	r3
		printf("Test is successful.\n\r");
  405ed6:	f249 709c 	movw	r0, #38812	; 0x979c
  405eda:	f2c0 0040 	movt	r0, #64	; 0x40
  405ede:	47a8      	blx	r5

		
		ili93xx_set_foreground_color(COLOR_BLACK);
  405ee0:	f04f 0000 	mov.w	r0, #0
  405ee4:	f641 026d 	movw	r2, #6253	; 0x186d
  405ee8:	f2c0 0240 	movt	r2, #64	; 0x40
  405eec:	4790      	blx	r2
		
		
		ili93xx_draw_string(10, 50, (uint8_t *)"success");
  405eee:	f04f 000a 	mov.w	r0, #10
  405ef2:	f04f 0132 	mov.w	r1, #50	; 0x32
  405ef6:	f249 6264 	movw	r2, #38500	; 0x9664
  405efa:	f2c0 0240 	movt	r2, #64	; 0x40
  405efe:	f242 0659 	movw	r6, #8281	; 0x2059
  405f02:	f2c0 0640 	movt	r6, #64	; 0x40
  405f06:	47b0      	blx	r6

main_end_of_test:
		printf("Please unplug the card.\n\r");
  405f08:	f249 70b4 	movw	r0, #38836	; 0x97b4
  405f0c:	f2c0 0040 	movt	r0, #64	; 0x40
  405f10:	47a8      	blx	r5
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
  405f12:	f04f 0600 	mov.w	r6, #0
  405f16:	f240 34d5 	movw	r4, #981	; 0x3d5
  405f1a:	f2c0 0440 	movt	r4, #64	; 0x40
  405f1e:	4630      	mov	r0, r6
  405f20:	47a0      	blx	r4
  405f22:	2802      	cmp	r0, #2
  405f24:	d1fb      	bne.n	405f1e <main+0x40a>
  405f26:	e750      	b.n	405dca <main+0x2b6>

00405f28 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
  405f28:	b510      	push	{r4, lr}
  405f2a:	4604      	mov	r4, r0
	switch (sd_mmc_check(slot))
  405f2c:	f240 33d5 	movw	r3, #981	; 0x3d5
  405f30:	f2c0 0340 	movt	r3, #64	; 0x40
  405f34:	4798      	blx	r3
  405f36:	2801      	cmp	r0, #1
  405f38:	d003      	beq.n	405f42 <sd_mmc_test_unit_ready+0x1a>
  405f3a:	b128      	cbz	r0, 405f48 <sd_mmc_test_unit_ready+0x20>
  405f3c:	2802      	cmp	r0, #2
  405f3e:	d120      	bne.n	405f82 <sd_mmc_test_unit_ready+0x5a>
  405f40:	e015      	b.n	405f6e <sd_mmc_test_unit_ready+0x46>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
  405f42:	f04f 0003 	mov.w	r0, #3
  405f46:	bd10      	pop	{r4, pc}
Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
  405f48:	f640 5190 	movw	r1, #3472	; 0xd90
  405f4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  405f50:	5d0b      	ldrb	r3, [r1, r4]
  405f52:	b9cb      	cbnz	r3, 405f88 <sd_mmc_test_unit_ready+0x60>
			return CTRL_NO_PRESENT;
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
  405f54:	4620      	mov	r0, r4
  405f56:	f640 4289 	movw	r2, #3209	; 0xc89
  405f5a:	f2c0 0240 	movt	r2, #64	; 0x40
  405f5e:	4790      	blx	r2
  405f60:	f000 0003 	and.w	r0, r0, #3
			return CTRL_GOOD;
  405f64:	2800      	cmp	r0, #0
  405f66:	bf0c      	ite	eq
  405f68:	2002      	moveq	r0, #2
  405f6a:	2000      	movne	r0, #0
  405f6c:	bd10      	pop	{r4, pc}

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
  405f6e:	f640 5090 	movw	r0, #3472	; 0xd90
  405f72:	f2c2 0000 	movt	r0, #8192	; 0x2000
  405f76:	f04f 0200 	mov.w	r2, #0
  405f7a:	5502      	strb	r2, [r0, r4]
		return CTRL_NO_PRESENT;
  405f7c:	f04f 0002 	mov.w	r0, #2
  405f80:	bd10      	pop	{r4, pc}

	default:
		return CTRL_FAIL;
  405f82:	f04f 0001 	mov.w	r0, #1
  405f86:	bd10      	pop	{r4, pc}
{
	switch (sd_mmc_check(slot))
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
			return CTRL_NO_PRESENT;
  405f88:	f04f 0002 	mov.w	r0, #2
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
	}
}
  405f8c:	bd10      	pop	{r4, pc}
  405f8e:	bf00      	nop

00405f90 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
  405f90:	b508      	push	{r3, lr}
	return sd_mmc_test_unit_ready(0);
  405f92:	f04f 0000 	mov.w	r0, #0
  405f96:	f645 7329 	movw	r3, #24361	; 0x5f29
  405f9a:	f2c0 0340 	movt	r3, #64	; 0x40
  405f9e:	4798      	blx	r3
}
  405fa0:	bd08      	pop	{r3, pc}
  405fa2:	bf00      	nop

00405fa4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
  405fa4:	b538      	push	{r3, r4, r5, lr}
  405fa6:	4604      	mov	r4, r0
  405fa8:	460d      	mov	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
  405faa:	f640 43b5 	movw	r3, #3253	; 0xcb5
  405fae:	f2c0 0340 	movt	r3, #64	; 0x40
  405fb2:	4798      	blx	r3
  405fb4:	ea4f 0040 	mov.w	r0, r0, lsl #1
  405fb8:	f100 31ff 	add.w	r1, r0, #4294967295
  405fbc:	6029      	str	r1, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
  405fbe:	4620      	mov	r0, r4
  405fc0:	f645 7229 	movw	r2, #24361	; 0x5f29
  405fc4:	f2c0 0240 	movt	r2, #64	; 0x40
  405fc8:	4790      	blx	r2
}
  405fca:	bd38      	pop	{r3, r4, r5, pc}

00405fcc <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
  405fcc:	b508      	push	{r3, lr}
  405fce:	4601      	mov	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
  405fd0:	f04f 0000 	mov.w	r0, #0
  405fd4:	f645 73a5 	movw	r3, #24485	; 0x5fa5
  405fd8:	f2c0 0340 	movt	r3, #64	; 0x40
  405fdc:	4798      	blx	r3
}
  405fde:	bd08      	pop	{r3, pc}

00405fe0 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
  405fe0:	b508      	push	{r3, lr}
	return sd_mmc_is_write_protected(slot);
  405fe2:	f640 43e1 	movw	r3, #3297	; 0xce1
  405fe6:	f2c0 0340 	movt	r3, #64	; 0x40
  405fea:	4798      	blx	r3
}
  405fec:	bd08      	pop	{r3, pc}
  405fee:	bf00      	nop

00405ff0 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
  405ff0:	b508      	push	{r3, lr}
	return sd_mmc_wr_protect(0);
  405ff2:	f04f 0000 	mov.w	r0, #0
  405ff6:	f645 73e1 	movw	r3, #24545	; 0x5fe1
  405ffa:	f2c0 0340 	movt	r3, #64	; 0x40
  405ffe:	4798      	blx	r3
}
  406000:	bd08      	pop	{r3, pc}
  406002:	bf00      	nop

00406004 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
  406004:	b510      	push	{r4, lr}
  406006:	4614      	mov	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
  406008:	f04f 0201 	mov.w	r2, #1
  40600c:	f640 43e9 	movw	r3, #3305	; 0xce9
  406010:	f2c0 0340 	movt	r3, #64	; 0x40
  406014:	4798      	blx	r3
  406016:	b120      	cbz	r0, 406022 <sd_mmc_mem_2_ram+0x1e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  406018:	2802      	cmp	r0, #2
  40601a:	bf0c      	ite	eq
  40601c:	2002      	moveq	r0, #2
  40601e:	2001      	movne	r0, #1
  406020:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
  406022:	4620      	mov	r0, r4
  406024:	f04f 0101 	mov.w	r1, #1
  406028:	f640 6239 	movw	r2, #3641	; 0xe39
  40602c:	f2c0 0240 	movt	r2, #64	; 0x40
  406030:	4790      	blx	r2
  406032:	b940      	cbnz	r0, 406046 <sd_mmc_mem_2_ram+0x42>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
  406034:	f640 6071 	movw	r0, #3697	; 0xe71
  406038:	f2c0 0040 	movt	r0, #64	; 0x40
  40603c:	4780      	blx	r0
{
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  40603e:	3000      	adds	r0, #0
  406040:	bf18      	it	ne
  406042:	2001      	movne	r0, #1
  406044:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
		return CTRL_FAIL;
  406046:	f04f 0001 	mov.w	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks()) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  40604a:	bd10      	pop	{r4, pc}

0040604c <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
  40604c:	b508      	push	{r3, lr}
  40604e:	4603      	mov	r3, r0
  406050:	460a      	mov	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
  406052:	f04f 0000 	mov.w	r0, #0
  406056:	4619      	mov	r1, r3
  406058:	f246 0305 	movw	r3, #24581	; 0x6005
  40605c:	f2c0 0340 	movt	r3, #64	; 0x40
  406060:	4798      	blx	r3
}
  406062:	bd08      	pop	{r3, pc}

00406064 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
  406064:	b510      	push	{r4, lr}
  406066:	4614      	mov	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
  406068:	f04f 0201 	mov.w	r2, #1
  40606c:	f640 63f1 	movw	r3, #3825	; 0xef1
  406070:	f2c0 0340 	movt	r3, #64	; 0x40
  406074:	4798      	blx	r3
  406076:	b120      	cbz	r0, 406082 <sd_mmc_ram_2_mem+0x1e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
  406078:	2802      	cmp	r0, #2
  40607a:	bf0c      	ite	eq
  40607c:	2002      	moveq	r0, #2
  40607e:	2001      	movne	r0, #1
  406080:	bd10      	pop	{r4, pc}
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
  406082:	4620      	mov	r0, r4
  406084:	f04f 0101 	mov.w	r1, #1
  406088:	f640 72c5 	movw	r2, #4037	; 0xfc5
  40608c:	f2c0 0240 	movt	r2, #64	; 0x40
  406090:	4790      	blx	r2
  406092:	b940      	cbnz	r0, 4060a6 <sd_mmc_ram_2_mem+0x42>
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
  406094:	f640 70fd 	movw	r0, #4093	; 0xffd
  406098:	f2c0 0040 	movt	r0, #64	; 0x40
  40609c:	4780      	blx	r0
{
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
  40609e:	3000      	adds	r0, #0
  4060a0:	bf18      	it	ne
  4060a2:	2001      	movne	r0, #1
  4060a4:	bd10      	pop	{r4, pc}
	default:
		return CTRL_FAIL;
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
		return CTRL_FAIL;
  4060a6:	f04f 0001 	mov.w	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks()) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
  4060aa:	bd10      	pop	{r4, pc}

004060ac <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
  4060ac:	b508      	push	{r3, lr}
  4060ae:	4603      	mov	r3, r0
  4060b0:	460a      	mov	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
  4060b2:	f04f 0000 	mov.w	r0, #0
  4060b6:	4619      	mov	r1, r3
  4060b8:	f246 0365 	movw	r3, #24677	; 0x6065
  4060bc:	f2c0 0340 	movt	r3, #64	; 0x40
  4060c0:	4798      	blx	r3
}
  4060c2:	bd08      	pop	{r3, pc}

004060c4 <__register_exitproc>:
  4060c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4060c8:	4698      	mov	r8, r3
  4060ca:	4b23      	ldr	r3, [pc, #140]	; (406158 <__register_exitproc+0x94>)
  4060cc:	681c      	ldr	r4, [r3, #0]
  4060ce:	4606      	mov	r6, r0
  4060d0:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  4060d4:	460f      	mov	r7, r1
  4060d6:	4691      	mov	r9, r2
  4060d8:	b918      	cbnz	r0, 4060e2 <__register_exitproc+0x1e>
  4060da:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  4060de:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4060e2:	6841      	ldr	r1, [r0, #4]
  4060e4:	291f      	cmp	r1, #31
  4060e6:	dd16      	ble.n	406116 <__register_exitproc+0x52>
  4060e8:	481c      	ldr	r0, [pc, #112]	; (40615c <__register_exitproc+0x98>)
  4060ea:	b918      	cbnz	r0, 4060f4 <__register_exitproc+0x30>
  4060ec:	f04f 30ff 	mov.w	r0, #4294967295
  4060f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4060f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4060f8:	f001 fb42 	bl	407780 <malloc>
  4060fc:	2800      	cmp	r0, #0
  4060fe:	d0f5      	beq.n	4060ec <__register_exitproc+0x28>
  406100:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406104:	2500      	movs	r5, #0
  406106:	6045      	str	r5, [r0, #4]
  406108:	6002      	str	r2, [r0, #0]
  40610a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40610e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  406112:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  406116:	b1b6      	cbz	r6, 406146 <__register_exitproc+0x82>
  406118:	6844      	ldr	r4, [r0, #4]
  40611a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  40611e:	2201      	movs	r2, #1
  406120:	eb00 0384 	add.w	r3, r0, r4, lsl #2
  406124:	fa02 f204 	lsl.w	r2, r2, r4
  406128:	4311      	orrs	r1, r2
  40612a:	2e02      	cmp	r6, #2
  40612c:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
  406130:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406134:	461c      	mov	r4, r3
  406136:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
  40613a:	d104      	bne.n	406146 <__register_exitproc+0x82>
  40613c:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  406140:	431a      	orrs	r2, r3
  406142:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  406146:	6841      	ldr	r1, [r0, #4]
  406148:	1c8b      	adds	r3, r1, #2
  40614a:	1c4a      	adds	r2, r1, #1
  40614c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
  406150:	6042      	str	r2, [r0, #4]
  406152:	2000      	movs	r0, #0
  406154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406158:	004097e4 	.word	0x004097e4
  40615c:	00407781 	.word	0x00407781

00406160 <__libc_fini_array>:
  406160:	b570      	push	{r4, r5, r6, lr}
  406162:	4b08      	ldr	r3, [pc, #32]	; (406184 <__libc_fini_array+0x24>)
  406164:	4c08      	ldr	r4, [pc, #32]	; (406188 <__libc_fini_array+0x28>)
  406166:	1ae0      	subs	r0, r4, r3
  406168:	1084      	asrs	r4, r0, #2
  40616a:	eb03 0684 	add.w	r6, r3, r4, lsl #2
  40616e:	2500      	movs	r5, #0
  406170:	3d04      	subs	r5, #4
  406172:	b11c      	cbz	r4, 40617c <__libc_fini_array+0x1c>
  406174:	5972      	ldr	r2, [r6, r5]
  406176:	4790      	blx	r2
  406178:	3c01      	subs	r4, #1
  40617a:	e7f9      	b.n	406170 <__libc_fini_array+0x10>
  40617c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  406180:	f003 bb62 	b.w	409848 <_fini>
  406184:	00409854 	.word	0x00409854
  406188:	00409858 	.word	0x00409858

0040618c <__libc_init_array>:
  40618c:	b538      	push	{r3, r4, r5, lr}
  40618e:	4d0e      	ldr	r5, [pc, #56]	; (4061c8 <__libc_init_array+0x3c>)
  406190:	4b0e      	ldr	r3, [pc, #56]	; (4061cc <__libc_init_array+0x40>)
  406192:	1ae8      	subs	r0, r5, r3
  406194:	1085      	asrs	r5, r0, #2
  406196:	2400      	movs	r4, #0
  406198:	42ac      	cmp	r4, r5
  40619a:	d005      	beq.n	4061a8 <__libc_init_array+0x1c>
  40619c:	490b      	ldr	r1, [pc, #44]	; (4061cc <__libc_init_array+0x40>)
  40619e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
  4061a2:	4790      	blx	r2
  4061a4:	3401      	adds	r4, #1
  4061a6:	e7f7      	b.n	406198 <__libc_init_array+0xc>
  4061a8:	f003 fb44 	bl	409834 <_init>
  4061ac:	4908      	ldr	r1, [pc, #32]	; (4061d0 <__libc_init_array+0x44>)
  4061ae:	4a09      	ldr	r2, [pc, #36]	; (4061d4 <__libc_init_array+0x48>)
  4061b0:	1a54      	subs	r4, r2, r1
  4061b2:	10a5      	asrs	r5, r4, #2
  4061b4:	2400      	movs	r4, #0
  4061b6:	42ac      	cmp	r4, r5
  4061b8:	d005      	beq.n	4061c6 <__libc_init_array+0x3a>
  4061ba:	4b05      	ldr	r3, [pc, #20]	; (4061d0 <__libc_init_array+0x44>)
  4061bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4061c0:	4780      	blx	r0
  4061c2:	3401      	adds	r4, #1
  4061c4:	e7f7      	b.n	4061b6 <__libc_init_array+0x2a>
  4061c6:	bd38      	pop	{r3, r4, r5, pc}
  4061c8:	00409840 	.word	0x00409840
  4061cc:	00409840 	.word	0x00409840
  4061d0:	00409840 	.word	0x00409840
  4061d4:	00409848 	.word	0x00409848

004061d8 <iprintf>:
  4061d8:	b40f      	push	{r0, r1, r2, r3}
  4061da:	b507      	push	{r0, r1, r2, lr}
  4061dc:	4906      	ldr	r1, [pc, #24]	; (4061f8 <iprintf+0x20>)
  4061de:	ab04      	add	r3, sp, #16
  4061e0:	6808      	ldr	r0, [r1, #0]
  4061e2:	f853 2b04 	ldr.w	r2, [r3], #4
  4061e6:	6881      	ldr	r1, [r0, #8]
  4061e8:	9301      	str	r3, [sp, #4]
  4061ea:	f000 f8cf 	bl	40638c <_vfiprintf_r>
  4061ee:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}
  4061f2:	b004      	add	sp, #16
  4061f4:	4770      	bx	lr
  4061f6:	bf00      	nop
  4061f8:	20000040 	.word	0x20000040

004061fc <_iprintf_r>:
  4061fc:	b40e      	push	{r1, r2, r3}
  4061fe:	b503      	push	{r0, r1, lr}
  406200:	ab03      	add	r3, sp, #12
  406202:	6881      	ldr	r1, [r0, #8]
  406204:	f853 2b04 	ldr.w	r2, [r3], #4
  406208:	9301      	str	r3, [sp, #4]
  40620a:	f000 f8bf 	bl	40638c <_vfiprintf_r>
  40620e:	e8bd 400c 	ldmia.w	sp!, {r2, r3, lr}
  406212:	b003      	add	sp, #12
  406214:	4770      	bx	lr
  406216:	bf00      	nop

00406218 <memset>:
  406218:	1882      	adds	r2, r0, r2
  40621a:	4603      	mov	r3, r0
  40621c:	4293      	cmp	r3, r2
  40621e:	d002      	beq.n	406226 <memset+0xe>
  406220:	f803 1b01 	strb.w	r1, [r3], #1
  406224:	e7fa      	b.n	40621c <memset+0x4>
  406226:	4770      	bx	lr

00406228 <setbuf>:
  406228:	2900      	cmp	r1, #0
  40622a:	bf0c      	ite	eq
  40622c:	2202      	moveq	r2, #2
  40622e:	2200      	movne	r2, #0
  406230:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406234:	f000 b800 	b.w	406238 <setvbuf>

00406238 <setvbuf>:
  406238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40623c:	461d      	mov	r5, r3
  40623e:	4b37      	ldr	r3, [pc, #220]	; (40631c <setvbuf+0xe4>)
  406240:	4604      	mov	r4, r0
  406242:	6818      	ldr	r0, [r3, #0]
  406244:	460e      	mov	r6, r1
  406246:	4617      	mov	r7, r2
  406248:	4698      	mov	r8, r3
  40624a:	b118      	cbz	r0, 406254 <setvbuf+0x1c>
  40624c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  40624e:	b90a      	cbnz	r2, 406254 <setvbuf+0x1c>
  406250:	f000 fe54 	bl	406efc <__sinit>
  406254:	2f02      	cmp	r7, #2
  406256:	d85d      	bhi.n	406314 <setvbuf+0xdc>
  406258:	2d00      	cmp	r5, #0
  40625a:	db5b      	blt.n	406314 <setvbuf+0xdc>
  40625c:	4621      	mov	r1, r4
  40625e:	f8d8 0000 	ldr.w	r0, [r8]
  406262:	f000 fd57 	bl	406d14 <_fflush_r>
  406266:	89a1      	ldrh	r1, [r4, #12]
  406268:	f001 0380 	and.w	r3, r1, #128	; 0x80
  40626c:	2000      	movs	r0, #0
  40626e:	b21a      	sxth	r2, r3
  406270:	6060      	str	r0, [r4, #4]
  406272:	61a0      	str	r0, [r4, #24]
  406274:	b122      	cbz	r2, 406280 <setvbuf+0x48>
  406276:	4829      	ldr	r0, [pc, #164]	; (40631c <setvbuf+0xe4>)
  406278:	6921      	ldr	r1, [r4, #16]
  40627a:	6800      	ldr	r0, [r0, #0]
  40627c:	f000 ff7c 	bl	407178 <_free_r>
  406280:	89a1      	ldrh	r1, [r4, #12]
  406282:	2f02      	cmp	r7, #2
  406284:	f021 0383 	bic.w	r3, r1, #131	; 0x83
  406288:	81a3      	strh	r3, [r4, #12]
  40628a:	d012      	beq.n	4062b2 <setvbuf+0x7a>
  40628c:	bb36      	cbnz	r6, 4062dc <setvbuf+0xa4>
  40628e:	2d00      	cmp	r5, #0
  406290:	bf08      	it	eq
  406292:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  406296:	4628      	mov	r0, r5
  406298:	f001 fa72 	bl	407780 <malloc>
  40629c:	4606      	mov	r6, r0
  40629e:	b9c8      	cbnz	r0, 4062d4 <setvbuf+0x9c>
  4062a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4062a4:	f001 fa6c 	bl	407780 <malloc>
  4062a8:	4606      	mov	r6, r0
  4062aa:	b988      	cbnz	r0, 4062d0 <setvbuf+0x98>
  4062ac:	f04f 30ff 	mov.w	r0, #4294967295
  4062b0:	e000      	b.n	4062b4 <setvbuf+0x7c>
  4062b2:	2000      	movs	r0, #0
  4062b4:	89a1      	ldrh	r1, [r4, #12]
  4062b6:	f041 0302 	orr.w	r3, r1, #2
  4062ba:	81a3      	strh	r3, [r4, #12]
  4062bc:	f104 0143 	add.w	r1, r4, #67	; 0x43
  4062c0:	2200      	movs	r2, #0
  4062c2:	2301      	movs	r3, #1
  4062c4:	60a2      	str	r2, [r4, #8]
  4062c6:	6021      	str	r1, [r4, #0]
  4062c8:	6121      	str	r1, [r4, #16]
  4062ca:	6163      	str	r3, [r4, #20]
  4062cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4062d0:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4062d4:	89a2      	ldrh	r2, [r4, #12]
  4062d6:	f042 0080 	orr.w	r0, r2, #128	; 0x80
  4062da:	81a0      	strh	r0, [r4, #12]
  4062dc:	2f01      	cmp	r7, #1
  4062de:	d105      	bne.n	4062ec <setvbuf+0xb4>
  4062e0:	89a1      	ldrh	r1, [r4, #12]
  4062e2:	426a      	negs	r2, r5
  4062e4:	f041 0301 	orr.w	r3, r1, #1
  4062e8:	81a3      	strh	r3, [r4, #12]
  4062ea:	61a2      	str	r2, [r4, #24]
  4062ec:	480b      	ldr	r0, [pc, #44]	; (40631c <setvbuf+0xe4>)
  4062ee:	89a2      	ldrh	r2, [r4, #12]
  4062f0:	6801      	ldr	r1, [r0, #0]
  4062f2:	4b0b      	ldr	r3, [pc, #44]	; (406320 <setvbuf+0xe8>)
  4062f4:	f002 0008 	and.w	r0, r2, #8
  4062f8:	b200      	sxth	r0, r0
  4062fa:	63cb      	str	r3, [r1, #60]	; 0x3c
  4062fc:	6026      	str	r6, [r4, #0]
  4062fe:	6126      	str	r6, [r4, #16]
  406300:	6165      	str	r5, [r4, #20]
  406302:	b148      	cbz	r0, 406318 <setvbuf+0xe0>
  406304:	f012 0f03 	tst.w	r2, #3
  406308:	bf18      	it	ne
  40630a:	2500      	movne	r5, #0
  40630c:	60a5      	str	r5, [r4, #8]
  40630e:	2000      	movs	r0, #0
  406310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406314:	f04f 30ff 	mov.w	r0, #4294967295
  406318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40631c:	20000040 	.word	0x20000040
  406320:	00406e71 	.word	0x00406e71

00406324 <__sprint_r>:
  406324:	6893      	ldr	r3, [r2, #8]
  406326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40632a:	4681      	mov	r9, r0
  40632c:	460f      	mov	r7, r1
  40632e:	4614      	mov	r4, r2
  406330:	b91b      	cbnz	r3, 40633a <__sprint_r+0x16>
  406332:	6053      	str	r3, [r2, #4]
  406334:	4618      	mov	r0, r3
  406336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40633a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40633c:	049b      	lsls	r3, r3, #18
  40633e:	d51e      	bpl.n	40637e <__sprint_r+0x5a>
  406340:	6815      	ldr	r5, [r2, #0]
  406342:	68a0      	ldr	r0, [r4, #8]
  406344:	3508      	adds	r5, #8
  406346:	b1c8      	cbz	r0, 40637c <__sprint_r+0x58>
  406348:	f855 1c04 	ldr.w	r1, [r5, #-4]
  40634c:	f855 ac08 	ldr.w	sl, [r5, #-8]
  406350:	ea4f 0891 	mov.w	r8, r1, lsr #2
  406354:	2600      	movs	r6, #0
  406356:	4546      	cmp	r6, r8
  406358:	da09      	bge.n	40636e <__sprint_r+0x4a>
  40635a:	4648      	mov	r0, r9
  40635c:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
  406360:	463a      	mov	r2, r7
  406362:	f000 fe47 	bl	406ff4 <_fputwc_r>
  406366:	1c43      	adds	r3, r0, #1
  406368:	d00b      	beq.n	406382 <__sprint_r+0x5e>
  40636a:	3601      	adds	r6, #1
  40636c:	e7f3      	b.n	406356 <__sprint_r+0x32>
  40636e:	68a2      	ldr	r2, [r4, #8]
  406370:	ea4f 0888 	mov.w	r8, r8, lsl #2
  406374:	ebc8 0302 	rsb	r3, r8, r2
  406378:	60a3      	str	r3, [r4, #8]
  40637a:	e7e2      	b.n	406342 <__sprint_r+0x1e>
  40637c:	e001      	b.n	406382 <__sprint_r+0x5e>
  40637e:	f000 ffb1 	bl	4072e4 <__sfvwrite_r>
  406382:	2100      	movs	r1, #0
  406384:	60a1      	str	r1, [r4, #8]
  406386:	6061      	str	r1, [r4, #4]
  406388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040638c <_vfiprintf_r>:
  40638c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406390:	4689      	mov	r9, r1
  406392:	b0a9      	sub	sp, #164	; 0xa4
  406394:	4614      	mov	r4, r2
  406396:	461d      	mov	r5, r3
  406398:	461e      	mov	r6, r3
  40639a:	4682      	mov	sl, r0
  40639c:	b118      	cbz	r0, 4063a6 <_vfiprintf_r+0x1a>
  40639e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4063a0:	b90b      	cbnz	r3, 4063a6 <_vfiprintf_r+0x1a>
  4063a2:	f000 fdab 	bl	406efc <__sinit>
  4063a6:	f8b9 000c 	ldrh.w	r0, [r9, #12]
  4063aa:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  4063ae:	b211      	sxth	r1, r2
  4063b0:	b949      	cbnz	r1, 4063c6 <_vfiprintf_r+0x3a>
  4063b2:	f440 5300 	orr.w	r3, r0, #8192	; 0x2000
  4063b6:	f8d9 0064 	ldr.w	r0, [r9, #100]	; 0x64
  4063ba:	f8a9 300c 	strh.w	r3, [r9, #12]
  4063be:	f420 5200 	bic.w	r2, r0, #8192	; 0x2000
  4063c2:	f8c9 2064 	str.w	r2, [r9, #100]	; 0x64
  4063c6:	f8b9 100c 	ldrh.w	r1, [r9, #12]
  4063ca:	f001 0308 	and.w	r3, r1, #8
  4063ce:	b218      	sxth	r0, r3
  4063d0:	b148      	cbz	r0, 4063e6 <_vfiprintf_r+0x5a>
  4063d2:	f8d9 2010 	ldr.w	r2, [r9, #16]
  4063d6:	b132      	cbz	r2, 4063e6 <_vfiprintf_r+0x5a>
  4063d8:	f8b9 100c 	ldrh.w	r1, [r9, #12]
  4063dc:	f001 031a 	and.w	r3, r1, #26
  4063e0:	2b0a      	cmp	r3, #10
  4063e2:	d116      	bne.n	406412 <_vfiprintf_r+0x86>
  4063e4:	e009      	b.n	4063fa <_vfiprintf_r+0x6e>
  4063e6:	4650      	mov	r0, sl
  4063e8:	4649      	mov	r1, r9
  4063ea:	f000 fc27 	bl	406c3c <__swsetup_r>
  4063ee:	2800      	cmp	r0, #0
  4063f0:	d0f2      	beq.n	4063d8 <_vfiprintf_r+0x4c>
  4063f2:	f04f 32ff 	mov.w	r2, #4294967295
  4063f6:	9203      	str	r2, [sp, #12]
  4063f8:	e3d5      	b.n	406ba6 <_vfiprintf_r+0x81a>
  4063fa:	f9b9 000e 	ldrsh.w	r0, [r9, #14]
  4063fe:	2800      	cmp	r0, #0
  406400:	db07      	blt.n	406412 <_vfiprintf_r+0x86>
  406402:	4650      	mov	r0, sl
  406404:	4649      	mov	r1, r9
  406406:	4622      	mov	r2, r4
  406408:	462b      	mov	r3, r5
  40640a:	f000 fbd0 	bl	406bae <__sbprintf>
  40640e:	9003      	str	r0, [sp, #12]
  406410:	e3c9      	b.n	406ba6 <_vfiprintf_r+0x81a>
  406412:	2200      	movs	r2, #0
  406414:	ad18      	add	r5, sp, #96	; 0x60
  406416:	950b      	str	r5, [sp, #44]	; 0x2c
  406418:	920d      	str	r2, [sp, #52]	; 0x34
  40641a:	920c      	str	r2, [sp, #48]	; 0x30
  40641c:	9401      	str	r4, [sp, #4]
  40641e:	9205      	str	r2, [sp, #20]
  406420:	9203      	str	r2, [sp, #12]
  406422:	46a8      	mov	r8, r5
  406424:	9901      	ldr	r1, [sp, #4]
  406426:	460c      	mov	r4, r1
  406428:	f811 3b01 	ldrb.w	r3, [r1], #1
  40642c:	b10b      	cbz	r3, 406432 <_vfiprintf_r+0xa6>
  40642e:	2b25      	cmp	r3, #37	; 0x25
  406430:	d1f9      	bne.n	406426 <_vfiprintf_r+0x9a>
  406432:	9a01      	ldr	r2, [sp, #4]
  406434:	1aa5      	subs	r5, r4, r2
  406436:	d019      	beq.n	40646c <_vfiprintf_r+0xe0>
  406438:	990c      	ldr	r1, [sp, #48]	; 0x30
  40643a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40643c:	1c4b      	adds	r3, r1, #1
  40643e:	e888 0024 	stmia.w	r8, {r2, r5}
  406442:	2b07      	cmp	r3, #7
  406444:	eb00 0205 	add.w	r2, r0, r5
  406448:	920d      	str	r2, [sp, #52]	; 0x34
  40644a:	f108 0808 	add.w	r8, r8, #8
  40644e:	930c      	str	r3, [sp, #48]	; 0x30
  406450:	dd09      	ble.n	406466 <_vfiprintf_r+0xda>
  406452:	4650      	mov	r0, sl
  406454:	4649      	mov	r1, r9
  406456:	aa0b      	add	r2, sp, #44	; 0x2c
  406458:	f7ff ff64 	bl	406324 <__sprint_r>
  40645c:	2800      	cmp	r0, #0
  40645e:	f040 839a 	bne.w	406b96 <_vfiprintf_r+0x80a>
  406462:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406466:	9803      	ldr	r0, [sp, #12]
  406468:	1942      	adds	r2, r0, r5
  40646a:	9203      	str	r2, [sp, #12]
  40646c:	7821      	ldrb	r1, [r4, #0]
  40646e:	2900      	cmp	r1, #0
  406470:	f000 838a 	beq.w	406b88 <_vfiprintf_r+0x7fc>
  406474:	2200      	movs	r2, #0
  406476:	3401      	adds	r4, #1
  406478:	9401      	str	r4, [sp, #4]
  40647a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  40647e:	f04f 3cff 	mov.w	ip, #4294967295
  406482:	9204      	str	r2, [sp, #16]
  406484:	4617      	mov	r7, r2
  406486:	9801      	ldr	r0, [sp, #4]
  406488:	f810 3b01 	ldrb.w	r3, [r0], #1
  40648c:	9001      	str	r0, [sp, #4]
  40648e:	2b63      	cmp	r3, #99	; 0x63
  406490:	f000 80b3 	beq.w	4065fa <_vfiprintf_r+0x26e>
  406494:	dc33      	bgt.n	4064fe <_vfiprintf_r+0x172>
  406496:	2b39      	cmp	r3, #57	; 0x39
  406498:	dc1a      	bgt.n	4064d0 <_vfiprintf_r+0x144>
  40649a:	2b31      	cmp	r3, #49	; 0x31
  40649c:	f280 8091 	bge.w	4065c2 <_vfiprintf_r+0x236>
  4064a0:	2b2b      	cmp	r3, #43	; 0x2b
  4064a2:	d101      	bne.n	4064a8 <_vfiprintf_r+0x11c>
  4064a4:	461a      	mov	r2, r3
  4064a6:	e7ee      	b.n	406486 <_vfiprintf_r+0xfa>
  4064a8:	dc0a      	bgt.n	4064c0 <_vfiprintf_r+0x134>
  4064aa:	2b23      	cmp	r3, #35	; 0x23
  4064ac:	d055      	beq.n	40655a <_vfiprintf_r+0x1ce>
  4064ae:	2b2a      	cmp	r3, #42	; 0x2a
  4064b0:	d056      	beq.n	406560 <_vfiprintf_r+0x1d4>
  4064b2:	2b20      	cmp	r3, #32
  4064b4:	f040 81f7 	bne.w	4068a6 <_vfiprintf_r+0x51a>
  4064b8:	2a00      	cmp	r2, #0
  4064ba:	bf08      	it	eq
  4064bc:	2220      	moveq	r2, #32
  4064be:	e7e2      	b.n	406486 <_vfiprintf_r+0xfa>
  4064c0:	2b2e      	cmp	r3, #46	; 0x2e
  4064c2:	d058      	beq.n	406576 <_vfiprintf_r+0x1ea>
  4064c4:	2b30      	cmp	r3, #48	; 0x30
  4064c6:	d079      	beq.n	4065bc <_vfiprintf_r+0x230>
  4064c8:	2b2d      	cmp	r3, #45	; 0x2d
  4064ca:	f040 81ec 	bne.w	4068a6 <_vfiprintf_r+0x51a>
  4064ce:	e04f      	b.n	406570 <_vfiprintf_r+0x1e4>
  4064d0:	2b4f      	cmp	r3, #79	; 0x4f
  4064d2:	f000 80de 	beq.w	406692 <_vfiprintf_r+0x306>
  4064d6:	dc07      	bgt.n	4064e8 <_vfiprintf_r+0x15c>
  4064d8:	2b44      	cmp	r3, #68	; 0x44
  4064da:	f040 81e4 	bne.w	4068a6 <_vfiprintf_r+0x51a>
  4064de:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  4064e2:	f047 0710 	orr.w	r7, r7, #16
  4064e6:	e090      	b.n	40660a <_vfiprintf_r+0x27e>
  4064e8:	2b55      	cmp	r3, #85	; 0x55
  4064ea:	f000 811f 	beq.w	40672c <_vfiprintf_r+0x3a0>
  4064ee:	2b58      	cmp	r3, #88	; 0x58
  4064f0:	f040 81d9 	bne.w	4068a6 <_vfiprintf_r+0x51a>
  4064f4:	4daf      	ldr	r5, [pc, #700]	; (4067b4 <_vfiprintf_r+0x428>)
  4064f6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  4064fa:	9505      	str	r5, [sp, #20]
  4064fc:	e131      	b.n	406762 <_vfiprintf_r+0x3d6>
  4064fe:	2b6f      	cmp	r3, #111	; 0x6f
  406500:	f000 80c9 	beq.w	406696 <_vfiprintf_r+0x30a>
  406504:	dc10      	bgt.n	406528 <_vfiprintf_r+0x19c>
  406506:	2b69      	cmp	r3, #105	; 0x69
  406508:	d024      	beq.n	406554 <_vfiprintf_r+0x1c8>
  40650a:	dc07      	bgt.n	40651c <_vfiprintf_r+0x190>
  40650c:	2b64      	cmp	r3, #100	; 0x64
  40650e:	d021      	beq.n	406554 <_vfiprintf_r+0x1c8>
  406510:	2b68      	cmp	r3, #104	; 0x68
  406512:	f040 81c8 	bne.w	4068a6 <_vfiprintf_r+0x51a>
  406516:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40651a:	e7b4      	b.n	406486 <_vfiprintf_r+0xfa>
  40651c:	2b6c      	cmp	r3, #108	; 0x6c
  40651e:	d05f      	beq.n	4065e0 <_vfiprintf_r+0x254>
  406520:	2b6e      	cmp	r3, #110	; 0x6e
  406522:	f040 81c0 	bne.w	4068a6 <_vfiprintf_r+0x51a>
  406526:	e096      	b.n	406656 <_vfiprintf_r+0x2ca>
  406528:	2b73      	cmp	r3, #115	; 0x73
  40652a:	f000 80df 	beq.w	4066ec <_vfiprintf_r+0x360>
  40652e:	dc06      	bgt.n	40653e <_vfiprintf_r+0x1b2>
  406530:	2b70      	cmp	r3, #112	; 0x70
  406532:	f000 80cd 	beq.w	4066d0 <_vfiprintf_r+0x344>
  406536:	2b71      	cmp	r3, #113	; 0x71
  406538:	f040 81b5 	bne.w	4068a6 <_vfiprintf_r+0x51a>
  40653c:	e05a      	b.n	4065f4 <_vfiprintf_r+0x268>
  40653e:	2b75      	cmp	r3, #117	; 0x75
  406540:	f000 80f6 	beq.w	406730 <_vfiprintf_r+0x3a4>
  406544:	2b78      	cmp	r3, #120	; 0x78
  406546:	f040 81ae 	bne.w	4068a6 <_vfiprintf_r+0x51a>
  40654a:	4d9b      	ldr	r5, [pc, #620]	; (4067b8 <_vfiprintf_r+0x42c>)
  40654c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  406550:	9505      	str	r5, [sp, #20]
  406552:	e106      	b.n	406762 <_vfiprintf_r+0x3d6>
  406554:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  406558:	e057      	b.n	40660a <_vfiprintf_r+0x27e>
  40655a:	f047 0701 	orr.w	r7, r7, #1
  40655e:	e792      	b.n	406486 <_vfiprintf_r+0xfa>
  406560:	1d33      	adds	r3, r6, #4
  406562:	6836      	ldr	r6, [r6, #0]
  406564:	2e00      	cmp	r6, #0
  406566:	9604      	str	r6, [sp, #16]
  406568:	da15      	bge.n	406596 <_vfiprintf_r+0x20a>
  40656a:	4270      	negs	r0, r6
  40656c:	9004      	str	r0, [sp, #16]
  40656e:	461e      	mov	r6, r3
  406570:	f047 0704 	orr.w	r7, r7, #4
  406574:	e787      	b.n	406486 <_vfiprintf_r+0xfa>
  406576:	9901      	ldr	r1, [sp, #4]
  406578:	f811 3b01 	ldrb.w	r3, [r1], #1
  40657c:	2b2a      	cmp	r3, #42	; 0x2a
  40657e:	9101      	str	r1, [sp, #4]
  406580:	d10b      	bne.n	40659a <_vfiprintf_r+0x20e>
  406582:	f8d6 c000 	ldr.w	ip, [r6]
  406586:	1d33      	adds	r3, r6, #4
  406588:	f1bc 0f00 	cmp.w	ip, #0
  40658c:	da03      	bge.n	406596 <_vfiprintf_r+0x20a>
  40658e:	461e      	mov	r6, r3
  406590:	f04f 3cff 	mov.w	ip, #4294967295
  406594:	e777      	b.n	406486 <_vfiprintf_r+0xfa>
  406596:	461e      	mov	r6, r3
  406598:	e775      	b.n	406486 <_vfiprintf_r+0xfa>
  40659a:	f04f 0c00 	mov.w	ip, #0
  40659e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4065a2:	2809      	cmp	r0, #9
  4065a4:	d807      	bhi.n	4065b6 <_vfiprintf_r+0x22a>
  4065a6:	9901      	ldr	r1, [sp, #4]
  4065a8:	230a      	movs	r3, #10
  4065aa:	fb03 0c0c 	mla	ip, r3, ip, r0
  4065ae:	f811 3b01 	ldrb.w	r3, [r1], #1
  4065b2:	9101      	str	r1, [sp, #4]
  4065b4:	e7f3      	b.n	40659e <_vfiprintf_r+0x212>
  4065b6:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
  4065ba:	e768      	b.n	40648e <_vfiprintf_r+0x102>
  4065bc:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  4065c0:	e761      	b.n	406486 <_vfiprintf_r+0xfa>
  4065c2:	9801      	ldr	r0, [sp, #4]
  4065c4:	2100      	movs	r1, #0
  4065c6:	3b30      	subs	r3, #48	; 0x30
  4065c8:	240a      	movs	r4, #10
  4065ca:	fb04 3101 	mla	r1, r4, r1, r3
  4065ce:	f810 3b01 	ldrb.w	r3, [r0], #1
  4065d2:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  4065d6:	2c09      	cmp	r4, #9
  4065d8:	9001      	str	r0, [sp, #4]
  4065da:	d9f4      	bls.n	4065c6 <_vfiprintf_r+0x23a>
  4065dc:	9104      	str	r1, [sp, #16]
  4065de:	e756      	b.n	40648e <_vfiprintf_r+0x102>
  4065e0:	9901      	ldr	r1, [sp, #4]
  4065e2:	780b      	ldrb	r3, [r1, #0]
  4065e4:	2b6c      	cmp	r3, #108	; 0x6c
  4065e6:	d102      	bne.n	4065ee <_vfiprintf_r+0x262>
  4065e8:	1c48      	adds	r0, r1, #1
  4065ea:	9001      	str	r0, [sp, #4]
  4065ec:	e002      	b.n	4065f4 <_vfiprintf_r+0x268>
  4065ee:	f047 0710 	orr.w	r7, r7, #16
  4065f2:	e748      	b.n	406486 <_vfiprintf_r+0xfa>
  4065f4:	f047 0720 	orr.w	r7, r7, #32
  4065f8:	e745      	b.n	406486 <_vfiprintf_r+0xfa>
  4065fa:	6832      	ldr	r2, [r6, #0]
  4065fc:	2500      	movs	r5, #0
  4065fe:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  406602:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  406606:	3604      	adds	r6, #4
  406608:	e157      	b.n	4068ba <_vfiprintf_r+0x52e>
  40660a:	06ba      	lsls	r2, r7, #26
  40660c:	d507      	bpl.n	40661e <_vfiprintf_r+0x292>
  40660e:	3607      	adds	r6, #7
  406610:	f026 0507 	bic.w	r5, r6, #7
  406614:	f105 0608 	add.w	r6, r5, #8
  406618:	e9d5 4500 	ldrd	r4, r5, [r5]
  40661c:	e00f      	b.n	40663e <_vfiprintf_r+0x2b2>
  40661e:	f017 0f10 	tst.w	r7, #16
  406622:	f106 0104 	add.w	r1, r6, #4
  406626:	d001      	beq.n	40662c <_vfiprintf_r+0x2a0>
  406628:	6832      	ldr	r2, [r6, #0]
  40662a:	e005      	b.n	406638 <_vfiprintf_r+0x2ac>
  40662c:	f017 0f40 	tst.w	r7, #64	; 0x40
  406630:	6832      	ldr	r2, [r6, #0]
  406632:	d001      	beq.n	406638 <_vfiprintf_r+0x2ac>
  406634:	b214      	sxth	r4, r2
  406636:	e000      	b.n	40663a <_vfiprintf_r+0x2ae>
  406638:	4614      	mov	r4, r2
  40663a:	17e5      	asrs	r5, r4, #31
  40663c:	460e      	mov	r6, r1
  40663e:	2c00      	cmp	r4, #0
  406640:	f175 0200 	sbcs.w	r2, r5, #0
  406644:	f280 80ba 	bge.w	4067bc <_vfiprintf_r+0x430>
  406648:	232d      	movs	r3, #45	; 0x2d
  40664a:	4264      	negs	r4, r4
  40664c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406650:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  406654:	e0b2      	b.n	4067bc <_vfiprintf_r+0x430>
  406656:	f017 0f20 	tst.w	r7, #32
  40665a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  40665e:	f106 0204 	add.w	r2, r6, #4
  406662:	d005      	beq.n	406670 <_vfiprintf_r+0x2e4>
  406664:	9c03      	ldr	r4, [sp, #12]
  406666:	6835      	ldr	r5, [r6, #0]
  406668:	17e0      	asrs	r0, r4, #31
  40666a:	602c      	str	r4, [r5, #0]
  40666c:	6068      	str	r0, [r5, #4]
  40666e:	e004      	b.n	40667a <_vfiprintf_r+0x2ee>
  406670:	06fb      	lsls	r3, r7, #27
  406672:	d504      	bpl.n	40667e <_vfiprintf_r+0x2f2>
  406674:	6833      	ldr	r3, [r6, #0]
  406676:	9903      	ldr	r1, [sp, #12]
  406678:	6019      	str	r1, [r3, #0]
  40667a:	4616      	mov	r6, r2
  40667c:	e6d2      	b.n	406424 <_vfiprintf_r+0x98>
  40667e:	6830      	ldr	r0, [r6, #0]
  406680:	9c03      	ldr	r4, [sp, #12]
  406682:	f017 0f40 	tst.w	r7, #64	; 0x40
  406686:	f106 0604 	add.w	r6, r6, #4
  40668a:	bf14      	ite	ne
  40668c:	8004      	strhne	r4, [r0, #0]
  40668e:	6004      	streq	r4, [r0, #0]
  406690:	e6c8      	b.n	406424 <_vfiprintf_r+0x98>
  406692:	f047 0710 	orr.w	r7, r7, #16
  406696:	f017 0020 	ands.w	r0, r7, #32
  40669a:	d008      	beq.n	4066ae <_vfiprintf_r+0x322>
  40669c:	1df3      	adds	r3, r6, #7
  40669e:	f023 0507 	bic.w	r5, r3, #7
  4066a2:	f105 0608 	add.w	r6, r5, #8
  4066a6:	e9d5 4500 	ldrd	r4, r5, [r5]
  4066aa:	2000      	movs	r0, #0
  4066ac:	e07d      	b.n	4067aa <_vfiprintf_r+0x41e>
  4066ae:	f017 0110 	ands.w	r1, r7, #16
  4066b2:	f106 0204 	add.w	r2, r6, #4
  4066b6:	d106      	bne.n	4066c6 <_vfiprintf_r+0x33a>
  4066b8:	f017 0040 	ands.w	r0, r7, #64	; 0x40
  4066bc:	d003      	beq.n	4066c6 <_vfiprintf_r+0x33a>
  4066be:	8834      	ldrh	r4, [r6, #0]
  4066c0:	2500      	movs	r5, #0
  4066c2:	4616      	mov	r6, r2
  4066c4:	e7f1      	b.n	4066aa <_vfiprintf_r+0x31e>
  4066c6:	6836      	ldr	r6, [r6, #0]
  4066c8:	2500      	movs	r5, #0
  4066ca:	4634      	mov	r4, r6
  4066cc:	4616      	mov	r6, r2
  4066ce:	e06c      	b.n	4067aa <_vfiprintf_r+0x41e>
  4066d0:	4b39      	ldr	r3, [pc, #228]	; (4067b8 <_vfiprintf_r+0x42c>)
  4066d2:	6834      	ldr	r4, [r6, #0]
  4066d4:	9305      	str	r3, [sp, #20]
  4066d6:	2130      	movs	r1, #48	; 0x30
  4066d8:	2278      	movs	r2, #120	; 0x78
  4066da:	2500      	movs	r5, #0
  4066dc:	f047 0702 	orr.w	r7, r7, #2
  4066e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
  4066e4:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  4066e8:	3604      	adds	r6, #4
  4066ea:	e05d      	b.n	4067a8 <_vfiprintf_r+0x41c>
  4066ec:	4631      	mov	r1, r6
  4066ee:	2500      	movs	r5, #0
  4066f0:	f8d1 b000 	ldr.w	fp, [r1]
  4066f4:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  4066f8:	3604      	adds	r6, #4
  4066fa:	45ac      	cmp	ip, r5
  4066fc:	4658      	mov	r0, fp
  4066fe:	db11      	blt.n	406724 <_vfiprintf_r+0x398>
  406700:	4662      	mov	r2, ip
  406702:	4629      	mov	r1, r5
  406704:	f8cd c000 	str.w	ip, [sp]
  406708:	f001 fa4c 	bl	407ba4 <memchr>
  40670c:	f8dd c000 	ldr.w	ip, [sp]
  406710:	2800      	cmp	r0, #0
  406712:	f000 80d6 	beq.w	4068c2 <_vfiprintf_r+0x536>
  406716:	ebcb 0400 	rsb	r4, fp, r0
  40671a:	4564      	cmp	r4, ip
  40671c:	f340 80d3 	ble.w	4068c6 <_vfiprintf_r+0x53a>
  406720:	4664      	mov	r4, ip
  406722:	e0d0      	b.n	4068c6 <_vfiprintf_r+0x53a>
  406724:	f001 fc42 	bl	407fac <strlen>
  406728:	4604      	mov	r4, r0
  40672a:	e0cc      	b.n	4068c6 <_vfiprintf_r+0x53a>
  40672c:	f047 0710 	orr.w	r7, r7, #16
  406730:	06bd      	lsls	r5, r7, #26
  406732:	d507      	bpl.n	406744 <_vfiprintf_r+0x3b8>
  406734:	1df0      	adds	r0, r6, #7
  406736:	f020 0407 	bic.w	r4, r0, #7
  40673a:	f104 0608 	add.w	r6, r4, #8
  40673e:	e9d4 4500 	ldrd	r4, r5, [r4]
  406742:	e00c      	b.n	40675e <_vfiprintf_r+0x3d2>
  406744:	f017 0f10 	tst.w	r7, #16
  406748:	f106 0304 	add.w	r3, r6, #4
  40674c:	d103      	bne.n	406756 <_vfiprintf_r+0x3ca>
  40674e:	067c      	lsls	r4, r7, #25
  406750:	d501      	bpl.n	406756 <_vfiprintf_r+0x3ca>
  406752:	8834      	ldrh	r4, [r6, #0]
  406754:	e001      	b.n	40675a <_vfiprintf_r+0x3ce>
  406756:	6835      	ldr	r5, [r6, #0]
  406758:	462c      	mov	r4, r5
  40675a:	2500      	movs	r5, #0
  40675c:	461e      	mov	r6, r3
  40675e:	2001      	movs	r0, #1
  406760:	e023      	b.n	4067aa <_vfiprintf_r+0x41e>
  406762:	06b8      	lsls	r0, r7, #26
  406764:	d507      	bpl.n	406776 <_vfiprintf_r+0x3ea>
  406766:	1df4      	adds	r4, r6, #7
  406768:	f024 0107 	bic.w	r1, r4, #7
  40676c:	f101 0608 	add.w	r6, r1, #8
  406770:	e9d1 4500 	ldrd	r4, r5, [r1]
  406774:	e00c      	b.n	406790 <_vfiprintf_r+0x404>
  406776:	f017 0f10 	tst.w	r7, #16
  40677a:	f106 0004 	add.w	r0, r6, #4
  40677e:	d103      	bne.n	406788 <_vfiprintf_r+0x3fc>
  406780:	0679      	lsls	r1, r7, #25
  406782:	d501      	bpl.n	406788 <_vfiprintf_r+0x3fc>
  406784:	8834      	ldrh	r4, [r6, #0]
  406786:	e001      	b.n	40678c <_vfiprintf_r+0x400>
  406788:	6836      	ldr	r6, [r6, #0]
  40678a:	4634      	mov	r4, r6
  40678c:	2500      	movs	r5, #0
  40678e:	4606      	mov	r6, r0
  406790:	07fa      	lsls	r2, r7, #31
  406792:	d509      	bpl.n	4067a8 <_vfiprintf_r+0x41c>
  406794:	ea54 0205 	orrs.w	r2, r4, r5
  406798:	d006      	beq.n	4067a8 <_vfiprintf_r+0x41c>
  40679a:	2230      	movs	r2, #48	; 0x30
  40679c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
  4067a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  4067a4:	f047 0702 	orr.w	r7, r7, #2
  4067a8:	2002      	movs	r0, #2
  4067aa:	2100      	movs	r1, #0
  4067ac:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
  4067b0:	e005      	b.n	4067be <_vfiprintf_r+0x432>
  4067b2:	bf00      	nop
  4067b4:	0040980a 	.word	0x0040980a
  4067b8:	0040981b 	.word	0x0040981b
  4067bc:	2001      	movs	r0, #1
  4067be:	f1bc 0f00 	cmp.w	ip, #0
  4067c2:	bfa8      	it	ge
  4067c4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  4067c8:	ea54 0105 	orrs.w	r1, r4, r5
  4067cc:	d102      	bne.n	4067d4 <_vfiprintf_r+0x448>
  4067ce:	f1bc 0f00 	cmp.w	ip, #0
  4067d2:	d058      	beq.n	406886 <_vfiprintf_r+0x4fa>
  4067d4:	2801      	cmp	r0, #1
  4067d6:	d01d      	beq.n	406814 <_vfiprintf_r+0x488>
  4067d8:	2802      	cmp	r0, #2
  4067da:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
  4067de:	d041      	beq.n	406864 <_vfiprintf_r+0x4d8>
  4067e0:	f004 0207 	and.w	r2, r4, #7
  4067e4:	08e4      	lsrs	r4, r4, #3
  4067e6:	ea44 7045 	orr.w	r0, r4, r5, lsl #29
  4067ea:	08e9      	lsrs	r1, r5, #3
  4067ec:	4604      	mov	r4, r0
  4067ee:	460d      	mov	r5, r1
  4067f0:	3230      	adds	r2, #48	; 0x30
  4067f2:	ea54 0105 	orrs.w	r1, r4, r5
  4067f6:	469b      	mov	fp, r3
  4067f8:	701a      	strb	r2, [r3, #0]
  4067fa:	f103 33ff 	add.w	r3, r3, #4294967295
  4067fe:	d1ef      	bne.n	4067e0 <_vfiprintf_r+0x454>
  406800:	07f8      	lsls	r0, r7, #31
  406802:	465d      	mov	r5, fp
  406804:	d54a      	bpl.n	40689c <_vfiprintf_r+0x510>
  406806:	2a30      	cmp	r2, #48	; 0x30
  406808:	d048      	beq.n	40689c <_vfiprintf_r+0x510>
  40680a:	2230      	movs	r2, #48	; 0x30
  40680c:	469b      	mov	fp, r3
  40680e:	f805 2c01 	strb.w	r2, [r5, #-1]
  406812:	e043      	b.n	40689c <_vfiprintf_r+0x510>
  406814:	2d00      	cmp	r5, #0
  406816:	bf08      	it	eq
  406818:	2c0a      	cmpeq	r4, #10
  40681a:	d203      	bcs.n	406824 <_vfiprintf_r+0x498>
  40681c:	3430      	adds	r4, #48	; 0x30
  40681e:	f88d 405f 	strb.w	r4, [sp, #95]	; 0x5f
  406822:	e036      	b.n	406892 <_vfiprintf_r+0x506>
  406824:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
  406828:	9302      	str	r3, [sp, #8]
  40682a:	4620      	mov	r0, r4
  40682c:	4629      	mov	r1, r5
  40682e:	220a      	movs	r2, #10
  406830:	2300      	movs	r3, #0
  406832:	f8cd c000 	str.w	ip, [sp]
  406836:	f001 fd23 	bl	408280 <__aeabi_uldivmod>
  40683a:	9802      	ldr	r0, [sp, #8]
  40683c:	f8dd b008 	ldr.w	fp, [sp, #8]
  406840:	3230      	adds	r2, #48	; 0x30
  406842:	f800 2901 	strb.w	r2, [r0], #-1
  406846:	4629      	mov	r1, r5
  406848:	9002      	str	r0, [sp, #8]
  40684a:	220a      	movs	r2, #10
  40684c:	4620      	mov	r0, r4
  40684e:	2300      	movs	r3, #0
  406850:	f001 fd16 	bl	408280 <__aeabi_uldivmod>
  406854:	4604      	mov	r4, r0
  406856:	460d      	mov	r5, r1
  406858:	ea54 0105 	orrs.w	r1, r4, r5
  40685c:	f8dd c000 	ldr.w	ip, [sp]
  406860:	d1e3      	bne.n	40682a <_vfiprintf_r+0x49e>
  406862:	e01b      	b.n	40689c <_vfiprintf_r+0x510>
  406864:	f004 000f 	and.w	r0, r4, #15
  406868:	9905      	ldr	r1, [sp, #20]
  40686a:	0924      	lsrs	r4, r4, #4
  40686c:	5c0a      	ldrb	r2, [r1, r0]
  40686e:	ea44 7005 	orr.w	r0, r4, r5, lsl #28
  406872:	0929      	lsrs	r1, r5, #4
  406874:	4604      	mov	r4, r0
  406876:	460d      	mov	r5, r1
  406878:	469b      	mov	fp, r3
  40687a:	f803 2901 	strb.w	r2, [r3], #-1
  40687e:	ea54 0205 	orrs.w	r2, r4, r5
  406882:	d1ef      	bne.n	406864 <_vfiprintf_r+0x4d8>
  406884:	e00a      	b.n	40689c <_vfiprintf_r+0x510>
  406886:	b938      	cbnz	r0, 406898 <_vfiprintf_r+0x50c>
  406888:	07f9      	lsls	r1, r7, #31
  40688a:	d505      	bpl.n	406898 <_vfiprintf_r+0x50c>
  40688c:	2030      	movs	r0, #48	; 0x30
  40688e:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
  406892:	f10d 0b5f 	add.w	fp, sp, #95	; 0x5f
  406896:	e001      	b.n	40689c <_vfiprintf_r+0x510>
  406898:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
  40689c:	ad18      	add	r5, sp, #96	; 0x60
  40689e:	ebcb 0405 	rsb	r4, fp, r5
  4068a2:	4665      	mov	r5, ip
  4068a4:	e00f      	b.n	4068c6 <_vfiprintf_r+0x53a>
  4068a6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
  4068aa:	2b00      	cmp	r3, #0
  4068ac:	f000 816c 	beq.w	406b88 <_vfiprintf_r+0x7fc>
  4068b0:	2500      	movs	r5, #0
  4068b2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  4068b6:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  4068ba:	2401      	movs	r4, #1
  4068bc:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
  4068c0:	e001      	b.n	4068c6 <_vfiprintf_r+0x53a>
  4068c2:	4664      	mov	r4, ip
  4068c4:	4605      	mov	r5, r0
  4068c6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
  4068ca:	42ac      	cmp	r4, r5
  4068cc:	bfac      	ite	ge
  4068ce:	4621      	movge	r1, r4
  4068d0:	4629      	movlt	r1, r5
  4068d2:	9102      	str	r1, [sp, #8]
  4068d4:	b113      	cbz	r3, 4068dc <_vfiprintf_r+0x550>
  4068d6:	9802      	ldr	r0, [sp, #8]
  4068d8:	1c42      	adds	r2, r0, #1
  4068da:	9202      	str	r2, [sp, #8]
  4068dc:	f017 0102 	ands.w	r1, r7, #2
  4068e0:	9106      	str	r1, [sp, #24]
  4068e2:	d002      	beq.n	4068ea <_vfiprintf_r+0x55e>
  4068e4:	9b02      	ldr	r3, [sp, #8]
  4068e6:	1c98      	adds	r0, r3, #2
  4068e8:	9002      	str	r0, [sp, #8]
  4068ea:	f017 0284 	ands.w	r2, r7, #132	; 0x84
  4068ee:	9207      	str	r2, [sp, #28]
  4068f0:	d13a      	bne.n	406968 <_vfiprintf_r+0x5dc>
  4068f2:	9904      	ldr	r1, [sp, #16]
  4068f4:	9b02      	ldr	r3, [sp, #8]
  4068f6:	1acb      	subs	r3, r1, r3
  4068f8:	2b00      	cmp	r3, #0
  4068fa:	dd35      	ble.n	406968 <_vfiprintf_r+0x5dc>
  4068fc:	48a0      	ldr	r0, [pc, #640]	; (406b80 <_vfiprintf_r+0x7f4>)
  4068fe:	2b10      	cmp	r3, #16
  406900:	f8c8 0000 	str.w	r0, [r8]
  406904:	dd1a      	ble.n	40693c <_vfiprintf_r+0x5b0>
  406906:	990c      	ldr	r1, [sp, #48]	; 0x30
  406908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40690a:	2010      	movs	r0, #16
  40690c:	f8c8 0004 	str.w	r0, [r8, #4]
  406910:	1c48      	adds	r0, r1, #1
  406912:	3210      	adds	r2, #16
  406914:	2807      	cmp	r0, #7
  406916:	920d      	str	r2, [sp, #52]	; 0x34
  406918:	f108 0808 	add.w	r8, r8, #8
  40691c:	900c      	str	r0, [sp, #48]	; 0x30
  40691e:	dd0b      	ble.n	406938 <_vfiprintf_r+0x5ac>
  406920:	4650      	mov	r0, sl
  406922:	4649      	mov	r1, r9
  406924:	aa0b      	add	r2, sp, #44	; 0x2c
  406926:	9300      	str	r3, [sp, #0]
  406928:	f7ff fcfc 	bl	406324 <__sprint_r>
  40692c:	9b00      	ldr	r3, [sp, #0]
  40692e:	2800      	cmp	r0, #0
  406930:	f040 8131 	bne.w	406b96 <_vfiprintf_r+0x80a>
  406934:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406938:	3b10      	subs	r3, #16
  40693a:	e7df      	b.n	4068fc <_vfiprintf_r+0x570>
  40693c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40693e:	f8c8 3004 	str.w	r3, [r8, #4]
  406942:	18d1      	adds	r1, r2, r3
  406944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406946:	910d      	str	r1, [sp, #52]	; 0x34
  406948:	1c58      	adds	r0, r3, #1
  40694a:	2807      	cmp	r0, #7
  40694c:	f108 0808 	add.w	r8, r8, #8
  406950:	900c      	str	r0, [sp, #48]	; 0x30
  406952:	dd09      	ble.n	406968 <_vfiprintf_r+0x5dc>
  406954:	4650      	mov	r0, sl
  406956:	4649      	mov	r1, r9
  406958:	aa0b      	add	r2, sp, #44	; 0x2c
  40695a:	f7ff fce3 	bl	406324 <__sprint_r>
  40695e:	2800      	cmp	r0, #0
  406960:	f040 8119 	bne.w	406b96 <_vfiprintf_r+0x80a>
  406964:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406968:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
  40696c:	b1d2      	cbz	r2, 4069a4 <_vfiprintf_r+0x618>
  40696e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
  406972:	f8c8 1000 	str.w	r1, [r8]
  406976:	990c      	ldr	r1, [sp, #48]	; 0x30
  406978:	980d      	ldr	r0, [sp, #52]	; 0x34
  40697a:	2301      	movs	r3, #1
  40697c:	f8c8 3004 	str.w	r3, [r8, #4]
  406980:	1c4b      	adds	r3, r1, #1
  406982:	1c42      	adds	r2, r0, #1
  406984:	2b07      	cmp	r3, #7
  406986:	920d      	str	r2, [sp, #52]	; 0x34
  406988:	f108 0808 	add.w	r8, r8, #8
  40698c:	930c      	str	r3, [sp, #48]	; 0x30
  40698e:	dd09      	ble.n	4069a4 <_vfiprintf_r+0x618>
  406990:	4650      	mov	r0, sl
  406992:	4649      	mov	r1, r9
  406994:	aa0b      	add	r2, sp, #44	; 0x2c
  406996:	f7ff fcc5 	bl	406324 <__sprint_r>
  40699a:	2800      	cmp	r0, #0
  40699c:	f040 80fb 	bne.w	406b96 <_vfiprintf_r+0x80a>
  4069a0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4069a4:	9806      	ldr	r0, [sp, #24]
  4069a6:	b1c8      	cbz	r0, 4069dc <_vfiprintf_r+0x650>
  4069a8:	aa0a      	add	r2, sp, #40	; 0x28
  4069aa:	f8c8 2000 	str.w	r2, [r8]
  4069ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4069b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4069b2:	2102      	movs	r1, #2
  4069b4:	f8c8 1004 	str.w	r1, [r8, #4]
  4069b8:	1c51      	adds	r1, r2, #1
  4069ba:	1c98      	adds	r0, r3, #2
  4069bc:	2907      	cmp	r1, #7
  4069be:	900d      	str	r0, [sp, #52]	; 0x34
  4069c0:	f108 0808 	add.w	r8, r8, #8
  4069c4:	910c      	str	r1, [sp, #48]	; 0x30
  4069c6:	dd09      	ble.n	4069dc <_vfiprintf_r+0x650>
  4069c8:	4650      	mov	r0, sl
  4069ca:	4649      	mov	r1, r9
  4069cc:	aa0b      	add	r2, sp, #44	; 0x2c
  4069ce:	f7ff fca9 	bl	406324 <__sprint_r>
  4069d2:	2800      	cmp	r0, #0
  4069d4:	f040 80df 	bne.w	406b96 <_vfiprintf_r+0x80a>
  4069d8:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  4069dc:	9b07      	ldr	r3, [sp, #28]
  4069de:	2b80      	cmp	r3, #128	; 0x80
  4069e0:	d13a      	bne.n	406a58 <_vfiprintf_r+0x6cc>
  4069e2:	9804      	ldr	r0, [sp, #16]
  4069e4:	9a02      	ldr	r2, [sp, #8]
  4069e6:	1a83      	subs	r3, r0, r2
  4069e8:	2b00      	cmp	r3, #0
  4069ea:	dd35      	ble.n	406a58 <_vfiprintf_r+0x6cc>
  4069ec:	4965      	ldr	r1, [pc, #404]	; (406b84 <_vfiprintf_r+0x7f8>)
  4069ee:	2b10      	cmp	r3, #16
  4069f0:	f8c8 1000 	str.w	r1, [r8]
  4069f4:	dd1a      	ble.n	406a2c <_vfiprintf_r+0x6a0>
  4069f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4069f8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4069fa:	2110      	movs	r1, #16
  4069fc:	f8c8 1004 	str.w	r1, [r8, #4]
  406a00:	1c51      	adds	r1, r2, #1
  406a02:	3010      	adds	r0, #16
  406a04:	2907      	cmp	r1, #7
  406a06:	900d      	str	r0, [sp, #52]	; 0x34
  406a08:	f108 0808 	add.w	r8, r8, #8
  406a0c:	910c      	str	r1, [sp, #48]	; 0x30
  406a0e:	dd0b      	ble.n	406a28 <_vfiprintf_r+0x69c>
  406a10:	4650      	mov	r0, sl
  406a12:	4649      	mov	r1, r9
  406a14:	aa0b      	add	r2, sp, #44	; 0x2c
  406a16:	9300      	str	r3, [sp, #0]
  406a18:	f7ff fc84 	bl	406324 <__sprint_r>
  406a1c:	9b00      	ldr	r3, [sp, #0]
  406a1e:	2800      	cmp	r0, #0
  406a20:	f040 80b9 	bne.w	406b96 <_vfiprintf_r+0x80a>
  406a24:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406a28:	3b10      	subs	r3, #16
  406a2a:	e7df      	b.n	4069ec <_vfiprintf_r+0x660>
  406a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406a2e:	980d      	ldr	r0, [sp, #52]	; 0x34
  406a30:	f8c8 3004 	str.w	r3, [r8, #4]
  406a34:	1c51      	adds	r1, r2, #1
  406a36:	18c3      	adds	r3, r0, r3
  406a38:	2907      	cmp	r1, #7
  406a3a:	930d      	str	r3, [sp, #52]	; 0x34
  406a3c:	f108 0808 	add.w	r8, r8, #8
  406a40:	910c      	str	r1, [sp, #48]	; 0x30
  406a42:	dd09      	ble.n	406a58 <_vfiprintf_r+0x6cc>
  406a44:	4650      	mov	r0, sl
  406a46:	4649      	mov	r1, r9
  406a48:	aa0b      	add	r2, sp, #44	; 0x2c
  406a4a:	f7ff fc6b 	bl	406324 <__sprint_r>
  406a4e:	2800      	cmp	r0, #0
  406a50:	f040 80a1 	bne.w	406b96 <_vfiprintf_r+0x80a>
  406a54:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406a58:	1b2d      	subs	r5, r5, r4
  406a5a:	2d00      	cmp	r5, #0
  406a5c:	dd32      	ble.n	406ac4 <_vfiprintf_r+0x738>
  406a5e:	4849      	ldr	r0, [pc, #292]	; (406b84 <_vfiprintf_r+0x7f8>)
  406a60:	2d10      	cmp	r5, #16
  406a62:	f8c8 0000 	str.w	r0, [r8]
  406a66:	dd18      	ble.n	406a9a <_vfiprintf_r+0x70e>
  406a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406a6a:	980d      	ldr	r0, [sp, #52]	; 0x34
  406a6c:	1c53      	adds	r3, r2, #1
  406a6e:	2110      	movs	r1, #16
  406a70:	3010      	adds	r0, #16
  406a72:	2b07      	cmp	r3, #7
  406a74:	f8c8 1004 	str.w	r1, [r8, #4]
  406a78:	900d      	str	r0, [sp, #52]	; 0x34
  406a7a:	f108 0808 	add.w	r8, r8, #8
  406a7e:	930c      	str	r3, [sp, #48]	; 0x30
  406a80:	dd09      	ble.n	406a96 <_vfiprintf_r+0x70a>
  406a82:	4650      	mov	r0, sl
  406a84:	4649      	mov	r1, r9
  406a86:	aa0b      	add	r2, sp, #44	; 0x2c
  406a88:	f7ff fc4c 	bl	406324 <__sprint_r>
  406a8c:	2800      	cmp	r0, #0
  406a8e:	f040 8082 	bne.w	406b96 <_vfiprintf_r+0x80a>
  406a92:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406a96:	3d10      	subs	r5, #16
  406a98:	e7e1      	b.n	406a5e <_vfiprintf_r+0x6d2>
  406a9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406a9e:	f8c8 5004 	str.w	r5, [r8, #4]
  406aa2:	1c51      	adds	r1, r2, #1
  406aa4:	195d      	adds	r5, r3, r5
  406aa6:	2907      	cmp	r1, #7
  406aa8:	950d      	str	r5, [sp, #52]	; 0x34
  406aaa:	f108 0808 	add.w	r8, r8, #8
  406aae:	910c      	str	r1, [sp, #48]	; 0x30
  406ab0:	dd08      	ble.n	406ac4 <_vfiprintf_r+0x738>
  406ab2:	4650      	mov	r0, sl
  406ab4:	4649      	mov	r1, r9
  406ab6:	aa0b      	add	r2, sp, #44	; 0x2c
  406ab8:	f7ff fc34 	bl	406324 <__sprint_r>
  406abc:	2800      	cmp	r0, #0
  406abe:	d16a      	bne.n	406b96 <_vfiprintf_r+0x80a>
  406ac0:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406ac4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406ac6:	980d      	ldr	r0, [sp, #52]	; 0x34
  406ac8:	f8c8 4004 	str.w	r4, [r8, #4]
  406acc:	1c51      	adds	r1, r2, #1
  406ace:	1904      	adds	r4, r0, r4
  406ad0:	2907      	cmp	r1, #7
  406ad2:	f8c8 b000 	str.w	fp, [r8]
  406ad6:	940d      	str	r4, [sp, #52]	; 0x34
  406ad8:	f108 0308 	add.w	r3, r8, #8
  406adc:	910c      	str	r1, [sp, #48]	; 0x30
  406ade:	dd07      	ble.n	406af0 <_vfiprintf_r+0x764>
  406ae0:	4650      	mov	r0, sl
  406ae2:	4649      	mov	r1, r9
  406ae4:	aa0b      	add	r2, sp, #44	; 0x2c
  406ae6:	f7ff fc1d 	bl	406324 <__sprint_r>
  406aea:	2800      	cmp	r0, #0
  406aec:	d153      	bne.n	406b96 <_vfiprintf_r+0x80a>
  406aee:	ab18      	add	r3, sp, #96	; 0x60
  406af0:	077a      	lsls	r2, r7, #29
  406af2:	d40b      	bmi.n	406b0c <_vfiprintf_r+0x780>
  406af4:	9b03      	ldr	r3, [sp, #12]
  406af6:	9a02      	ldr	r2, [sp, #8]
  406af8:	9904      	ldr	r1, [sp, #16]
  406afa:	980d      	ldr	r0, [sp, #52]	; 0x34
  406afc:	428a      	cmp	r2, r1
  406afe:	bfac      	ite	ge
  406b00:	189b      	addge	r3, r3, r2
  406b02:	185b      	addlt	r3, r3, r1
  406b04:	9303      	str	r3, [sp, #12]
  406b06:	2800      	cmp	r0, #0
  406b08:	d035      	beq.n	406b76 <_vfiprintf_r+0x7ea>
  406b0a:	e02e      	b.n	406b6a <_vfiprintf_r+0x7de>
  406b0c:	9c04      	ldr	r4, [sp, #16]
  406b0e:	9802      	ldr	r0, [sp, #8]
  406b10:	1a24      	subs	r4, r4, r0
  406b12:	2c00      	cmp	r4, #0
  406b14:	ddee      	ble.n	406af4 <_vfiprintf_r+0x768>
  406b16:	4a1a      	ldr	r2, [pc, #104]	; (406b80 <_vfiprintf_r+0x7f4>)
  406b18:	2c10      	cmp	r4, #16
  406b1a:	601a      	str	r2, [r3, #0]
  406b1c:	dd14      	ble.n	406b48 <_vfiprintf_r+0x7bc>
  406b1e:	980c      	ldr	r0, [sp, #48]	; 0x30
  406b20:	990d      	ldr	r1, [sp, #52]	; 0x34
  406b22:	2210      	movs	r2, #16
  406b24:	605a      	str	r2, [r3, #4]
  406b26:	1c42      	adds	r2, r0, #1
  406b28:	3110      	adds	r1, #16
  406b2a:	3308      	adds	r3, #8
  406b2c:	2a07      	cmp	r2, #7
  406b2e:	910d      	str	r1, [sp, #52]	; 0x34
  406b30:	920c      	str	r2, [sp, #48]	; 0x30
  406b32:	dd07      	ble.n	406b44 <_vfiprintf_r+0x7b8>
  406b34:	4650      	mov	r0, sl
  406b36:	4649      	mov	r1, r9
  406b38:	aa0b      	add	r2, sp, #44	; 0x2c
  406b3a:	f7ff fbf3 	bl	406324 <__sprint_r>
  406b3e:	2800      	cmp	r0, #0
  406b40:	d129      	bne.n	406b96 <_vfiprintf_r+0x80a>
  406b42:	ab18      	add	r3, sp, #96	; 0x60
  406b44:	3c10      	subs	r4, #16
  406b46:	e7e6      	b.n	406b16 <_vfiprintf_r+0x78a>
  406b48:	990c      	ldr	r1, [sp, #48]	; 0x30
  406b4a:	605c      	str	r4, [r3, #4]
  406b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406b4e:	1c48      	adds	r0, r1, #1
  406b50:	191c      	adds	r4, r3, r4
  406b52:	2807      	cmp	r0, #7
  406b54:	940d      	str	r4, [sp, #52]	; 0x34
  406b56:	900c      	str	r0, [sp, #48]	; 0x30
  406b58:	ddcc      	ble.n	406af4 <_vfiprintf_r+0x768>
  406b5a:	4650      	mov	r0, sl
  406b5c:	4649      	mov	r1, r9
  406b5e:	aa0b      	add	r2, sp, #44	; 0x2c
  406b60:	f7ff fbe0 	bl	406324 <__sprint_r>
  406b64:	2800      	cmp	r0, #0
  406b66:	d0c5      	beq.n	406af4 <_vfiprintf_r+0x768>
  406b68:	e015      	b.n	406b96 <_vfiprintf_r+0x80a>
  406b6a:	4650      	mov	r0, sl
  406b6c:	4649      	mov	r1, r9
  406b6e:	aa0b      	add	r2, sp, #44	; 0x2c
  406b70:	f7ff fbd8 	bl	406324 <__sprint_r>
  406b74:	b978      	cbnz	r0, 406b96 <_vfiprintf_r+0x80a>
  406b76:	2500      	movs	r5, #0
  406b78:	950c      	str	r5, [sp, #48]	; 0x30
  406b7a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
  406b7e:	e451      	b.n	406424 <_vfiprintf_r+0x98>
  406b80:	004097ea 	.word	0x004097ea
  406b84:	004097fa 	.word	0x004097fa
  406b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406b8a:	b122      	cbz	r2, 406b96 <_vfiprintf_r+0x80a>
  406b8c:	4650      	mov	r0, sl
  406b8e:	4649      	mov	r1, r9
  406b90:	aa0b      	add	r2, sp, #44	; 0x2c
  406b92:	f7ff fbc7 	bl	406324 <__sprint_r>
  406b96:	f8b9 100c 	ldrh.w	r1, [r9, #12]
  406b9a:	f001 0040 	and.w	r0, r1, #64	; 0x40
  406b9e:	b203      	sxth	r3, r0
  406ba0:	2b00      	cmp	r3, #0
  406ba2:	f47f ac26 	bne.w	4063f2 <_vfiprintf_r+0x66>
  406ba6:	9803      	ldr	r0, [sp, #12]
  406ba8:	b029      	add	sp, #164	; 0xa4
  406baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406bae <__sbprintf>:
  406bae:	b570      	push	{r4, r5, r6, lr}
  406bb0:	460c      	mov	r4, r1
  406bb2:	8989      	ldrh	r1, [r1, #12]
  406bb4:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406bb8:	f021 0502 	bic.w	r5, r1, #2
  406bbc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406bbe:	f8ad 500c 	strh.w	r5, [sp, #12]
  406bc2:	9119      	str	r1, [sp, #100]	; 0x64
  406bc4:	89e5      	ldrh	r5, [r4, #14]
  406bc6:	69e1      	ldr	r1, [r4, #28]
  406bc8:	f8ad 500e 	strh.w	r5, [sp, #14]
  406bcc:	9107      	str	r1, [sp, #28]
  406bce:	6a65      	ldr	r5, [r4, #36]	; 0x24
  406bd0:	a91a      	add	r1, sp, #104	; 0x68
  406bd2:	9100      	str	r1, [sp, #0]
  406bd4:	9104      	str	r1, [sp, #16]
  406bd6:	2100      	movs	r1, #0
  406bd8:	9509      	str	r5, [sp, #36]	; 0x24
  406bda:	9106      	str	r1, [sp, #24]
  406bdc:	f44f 6580 	mov.w	r5, #1024	; 0x400
  406be0:	4669      	mov	r1, sp
  406be2:	9502      	str	r5, [sp, #8]
  406be4:	9505      	str	r5, [sp, #20]
  406be6:	4606      	mov	r6, r0
  406be8:	f7ff fbd0 	bl	40638c <_vfiprintf_r>
  406bec:	1e05      	subs	r5, r0, #0
  406bee:	db07      	blt.n	406c00 <__sbprintf+0x52>
  406bf0:	4630      	mov	r0, r6
  406bf2:	4669      	mov	r1, sp
  406bf4:	f000 f88e 	bl	406d14 <_fflush_r>
  406bf8:	2800      	cmp	r0, #0
  406bfa:	bf18      	it	ne
  406bfc:	f04f 35ff 	movne.w	r5, #4294967295
  406c00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406c04:	f003 0040 	and.w	r0, r3, #64	; 0x40
  406c08:	b202      	sxth	r2, r0
  406c0a:	b11a      	cbz	r2, 406c14 <__sbprintf+0x66>
  406c0c:	89a1      	ldrh	r1, [r4, #12]
  406c0e:	f041 0340 	orr.w	r3, r1, #64	; 0x40
  406c12:	81a3      	strh	r3, [r4, #12]
  406c14:	4628      	mov	r0, r5
  406c16:	b01a      	add	sp, #104	; 0x68
  406c18:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
  406c1c:	bd70      	pop	{r4, r5, r6, pc}

00406c1e <vfiprintf>:
  406c1e:	b530      	push	{r4, r5, lr}
  406c20:	4613      	mov	r3, r2
  406c22:	4a05      	ldr	r2, [pc, #20]	; (406c38 <vfiprintf+0x1a>)
  406c24:	4605      	mov	r5, r0
  406c26:	460c      	mov	r4, r1
  406c28:	6810      	ldr	r0, [r2, #0]
  406c2a:	4629      	mov	r1, r5
  406c2c:	4622      	mov	r2, r4
  406c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  406c32:	f7ff bbab 	b.w	40638c <_vfiprintf_r>
  406c36:	bf00      	nop
  406c38:	20000040 	.word	0x20000040

00406c3c <__swsetup_r>:
  406c3c:	b538      	push	{r3, r4, r5, lr}
  406c3e:	4b2c      	ldr	r3, [pc, #176]	; (406cf0 <__swsetup_r+0xb4>)
  406c40:	4605      	mov	r5, r0
  406c42:	6818      	ldr	r0, [r3, #0]
  406c44:	460c      	mov	r4, r1
  406c46:	b118      	cbz	r0, 406c50 <__swsetup_r+0x14>
  406c48:	6b82      	ldr	r2, [r0, #56]	; 0x38
  406c4a:	b90a      	cbnz	r2, 406c50 <__swsetup_r+0x14>
  406c4c:	f000 f956 	bl	406efc <__sinit>
  406c50:	89a0      	ldrh	r0, [r4, #12]
  406c52:	f000 0108 	and.w	r1, r0, #8
  406c56:	b20b      	sxth	r3, r1
  406c58:	bb0b      	cbnz	r3, 406c9e <__swsetup_r+0x62>
  406c5a:	f000 0210 	and.w	r2, r0, #16
  406c5e:	b211      	sxth	r1, r2
  406c60:	b911      	cbnz	r1, 406c68 <__swsetup_r+0x2c>
  406c62:	f04f 30ff 	mov.w	r0, #4294967295
  406c66:	bd38      	pop	{r3, r4, r5, pc}
  406c68:	f000 0004 	and.w	r0, r0, #4
  406c6c:	b203      	sxth	r3, r0
  406c6e:	b193      	cbz	r3, 406c96 <__swsetup_r+0x5a>
  406c70:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406c72:	b141      	cbz	r1, 406c86 <__swsetup_r+0x4a>
  406c74:	f104 0240 	add.w	r2, r4, #64	; 0x40
  406c78:	4291      	cmp	r1, r2
  406c7a:	d002      	beq.n	406c82 <__swsetup_r+0x46>
  406c7c:	4628      	mov	r0, r5
  406c7e:	f000 fa7b 	bl	407178 <_free_r>
  406c82:	2100      	movs	r1, #0
  406c84:	6321      	str	r1, [r4, #48]	; 0x30
  406c86:	89a0      	ldrh	r0, [r4, #12]
  406c88:	6921      	ldr	r1, [r4, #16]
  406c8a:	f020 0324 	bic.w	r3, r0, #36	; 0x24
  406c8e:	2200      	movs	r2, #0
  406c90:	81a3      	strh	r3, [r4, #12]
  406c92:	6062      	str	r2, [r4, #4]
  406c94:	6021      	str	r1, [r4, #0]
  406c96:	89a0      	ldrh	r0, [r4, #12]
  406c98:	f040 0308 	orr.w	r3, r0, #8
  406c9c:	81a3      	strh	r3, [r4, #12]
  406c9e:	6922      	ldr	r2, [r4, #16]
  406ca0:	b94a      	cbnz	r2, 406cb6 <__swsetup_r+0x7a>
  406ca2:	89a1      	ldrh	r1, [r4, #12]
  406ca4:	f401 7020 	and.w	r0, r1, #640	; 0x280
  406ca8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  406cac:	d003      	beq.n	406cb6 <__swsetup_r+0x7a>
  406cae:	4628      	mov	r0, r5
  406cb0:	4621      	mov	r1, r4
  406cb2:	f000 fcf9 	bl	4076a8 <__smakebuf_r>
  406cb6:	89a3      	ldrh	r3, [r4, #12]
  406cb8:	f013 0201 	ands.w	r2, r3, #1
  406cbc:	d005      	beq.n	406cca <__swsetup_r+0x8e>
  406cbe:	6961      	ldr	r1, [r4, #20]
  406cc0:	2200      	movs	r2, #0
  406cc2:	4248      	negs	r0, r1
  406cc4:	60a2      	str	r2, [r4, #8]
  406cc6:	61a0      	str	r0, [r4, #24]
  406cc8:	e007      	b.n	406cda <__swsetup_r+0x9e>
  406cca:	f003 0102 	and.w	r1, r3, #2
  406cce:	b208      	sxth	r0, r1
  406cd0:	b908      	cbnz	r0, 406cd6 <__swsetup_r+0x9a>
  406cd2:	6963      	ldr	r3, [r4, #20]
  406cd4:	e000      	b.n	406cd8 <__swsetup_r+0x9c>
  406cd6:	4613      	mov	r3, r2
  406cd8:	60a3      	str	r3, [r4, #8]
  406cda:	6923      	ldr	r3, [r4, #16]
  406cdc:	b933      	cbnz	r3, 406cec <__swsetup_r+0xb0>
  406cde:	89a2      	ldrh	r2, [r4, #12]
  406ce0:	f002 0180 	and.w	r1, r2, #128	; 0x80
  406ce4:	b208      	sxth	r0, r1
  406ce6:	2800      	cmp	r0, #0
  406ce8:	d1bb      	bne.n	406c62 <__swsetup_r+0x26>
  406cea:	bd38      	pop	{r3, r4, r5, pc}
  406cec:	2000      	movs	r0, #0
  406cee:	bd38      	pop	{r3, r4, r5, pc}
  406cf0:	20000040 	.word	0x20000040

00406cf4 <register_fini>:
  406cf4:	4b02      	ldr	r3, [pc, #8]	; (406d00 <register_fini+0xc>)
  406cf6:	b113      	cbz	r3, 406cfe <register_fini+0xa>
  406cf8:	4802      	ldr	r0, [pc, #8]	; (406d04 <register_fini+0x10>)
  406cfa:	f000 b805 	b.w	406d08 <atexit>
  406cfe:	4770      	bx	lr
  406d00:	00000000 	.word	0x00000000
  406d04:	00406161 	.word	0x00406161

00406d08 <atexit>:
  406d08:	4601      	mov	r1, r0
  406d0a:	2000      	movs	r0, #0
  406d0c:	4602      	mov	r2, r0
  406d0e:	4603      	mov	r3, r0
  406d10:	f7ff b9d8 	b.w	4060c4 <__register_exitproc>

00406d14 <_fflush_r>:
  406d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406d18:	460c      	mov	r4, r1
  406d1a:	4605      	mov	r5, r0
  406d1c:	b118      	cbz	r0, 406d26 <_fflush_r+0x12>
  406d1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406d20:	b90b      	cbnz	r3, 406d26 <_fflush_r+0x12>
  406d22:	f000 f8eb 	bl	406efc <__sinit>
  406d26:	89a2      	ldrh	r2, [r4, #12]
  406d28:	b332      	cbz	r2, 406d78 <_fflush_r+0x64>
  406d2a:	f002 0008 	and.w	r0, r2, #8
  406d2e:	b201      	sxth	r1, r0
  406d30:	2900      	cmp	r1, #0
  406d32:	d162      	bne.n	406dfa <_fflush_r+0xe6>
  406d34:	6861      	ldr	r1, [r4, #4]
  406d36:	f442 6000 	orr.w	r0, r2, #2048	; 0x800
  406d3a:	2900      	cmp	r1, #0
  406d3c:	81a0      	strh	r0, [r4, #12]
  406d3e:	dc02      	bgt.n	406d46 <_fflush_r+0x32>
  406d40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  406d42:	2b00      	cmp	r3, #0
  406d44:	dd18      	ble.n	406d78 <_fflush_r+0x64>
  406d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  406d48:	b1b6      	cbz	r6, 406d78 <_fflush_r+0x64>
  406d4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  406d4e:	2000      	movs	r0, #0
  406d50:	b212      	sxth	r2, r2
  406d52:	682f      	ldr	r7, [r5, #0]
  406d54:	6028      	str	r0, [r5, #0]
  406d56:	b10a      	cbz	r2, 406d5c <_fflush_r+0x48>
  406d58:	6d22      	ldr	r2, [r4, #80]	; 0x50
  406d5a:	e010      	b.n	406d7e <_fflush_r+0x6a>
  406d5c:	2301      	movs	r3, #1
  406d5e:	4628      	mov	r0, r5
  406d60:	69e1      	ldr	r1, [r4, #28]
  406d62:	47b0      	blx	r6
  406d64:	4602      	mov	r2, r0
  406d66:	3001      	adds	r0, #1
  406d68:	d109      	bne.n	406d7e <_fflush_r+0x6a>
  406d6a:	6829      	ldr	r1, [r5, #0]
  406d6c:	b139      	cbz	r1, 406d7e <_fflush_r+0x6a>
  406d6e:	291d      	cmp	r1, #29
  406d70:	d001      	beq.n	406d76 <_fflush_r+0x62>
  406d72:	2916      	cmp	r1, #22
  406d74:	d14f      	bne.n	406e16 <_fflush_r+0x102>
  406d76:	602f      	str	r7, [r5, #0]
  406d78:	2000      	movs	r0, #0
  406d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406d7e:	89a6      	ldrh	r6, [r4, #12]
  406d80:	f006 0104 	and.w	r1, r6, #4
  406d84:	b20b      	sxth	r3, r1
  406d86:	b12b      	cbz	r3, 406d94 <_fflush_r+0x80>
  406d88:	6860      	ldr	r0, [r4, #4]
  406d8a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  406d8c:	1a12      	subs	r2, r2, r0
  406d8e:	b10e      	cbz	r6, 406d94 <_fflush_r+0x80>
  406d90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  406d92:	1a52      	subs	r2, r2, r1
  406d94:	69e1      	ldr	r1, [r4, #28]
  406d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  406d98:	2300      	movs	r3, #0
  406d9a:	4628      	mov	r0, r5
  406d9c:	47b0      	blx	r6
  406d9e:	1c41      	adds	r1, r0, #1
  406da0:	d105      	bne.n	406dae <_fflush_r+0x9a>
  406da2:	682a      	ldr	r2, [r5, #0]
  406da4:	b11a      	cbz	r2, 406dae <_fflush_r+0x9a>
  406da6:	2a1d      	cmp	r2, #29
  406da8:	d001      	beq.n	406dae <_fflush_r+0x9a>
  406daa:	2a16      	cmp	r2, #22
  406dac:	d11f      	bne.n	406dee <_fflush_r+0xda>
  406dae:	89a3      	ldrh	r3, [r4, #12]
  406db0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  406db4:	2100      	movs	r1, #0
  406db6:	81a2      	strh	r2, [r4, #12]
  406db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  406dbc:	6922      	ldr	r2, [r4, #16]
  406dbe:	6061      	str	r1, [r4, #4]
  406dc0:	b219      	sxth	r1, r3
  406dc2:	6022      	str	r2, [r4, #0]
  406dc4:	b121      	cbz	r1, 406dd0 <_fflush_r+0xbc>
  406dc6:	1c42      	adds	r2, r0, #1
  406dc8:	d101      	bne.n	406dce <_fflush_r+0xba>
  406dca:	682a      	ldr	r2, [r5, #0]
  406dcc:	b902      	cbnz	r2, 406dd0 <_fflush_r+0xbc>
  406dce:	6520      	str	r0, [r4, #80]	; 0x50
  406dd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406dd2:	602f      	str	r7, [r5, #0]
  406dd4:	2900      	cmp	r1, #0
  406dd6:	d0cf      	beq.n	406d78 <_fflush_r+0x64>
  406dd8:	f104 0040 	add.w	r0, r4, #64	; 0x40
  406ddc:	4281      	cmp	r1, r0
  406dde:	d002      	beq.n	406de6 <_fflush_r+0xd2>
  406de0:	4628      	mov	r0, r5
  406de2:	f000 f9c9 	bl	407178 <_free_r>
  406de6:	2000      	movs	r0, #0
  406de8:	6320      	str	r0, [r4, #48]	; 0x30
  406dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406dee:	89a3      	ldrh	r3, [r4, #12]
  406df0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
  406df4:	81a1      	strh	r1, [r4, #12]
  406df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406dfa:	6926      	ldr	r6, [r4, #16]
  406dfc:	2e00      	cmp	r6, #0
  406dfe:	d0bb      	beq.n	406d78 <_fflush_r+0x64>
  406e00:	0792      	lsls	r2, r2, #30
  406e02:	6823      	ldr	r3, [r4, #0]
  406e04:	bf08      	it	eq
  406e06:	6962      	ldreq	r2, [r4, #20]
  406e08:	6026      	str	r6, [r4, #0]
  406e0a:	bf18      	it	ne
  406e0c:	2200      	movne	r2, #0
  406e0e:	ebc6 0803 	rsb	r8, r6, r3
  406e12:	60a2      	str	r2, [r4, #8]
  406e14:	e012      	b.n	406e3c <_fflush_r+0x128>
  406e16:	89a3      	ldrh	r3, [r4, #12]
  406e18:	f043 0040 	orr.w	r0, r3, #64	; 0x40
  406e1c:	81a0      	strh	r0, [r4, #12]
  406e1e:	f04f 30ff 	mov.w	r0, #4294967295
  406e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406e26:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406e28:	69e1      	ldr	r1, [r4, #28]
  406e2a:	4628      	mov	r0, r5
  406e2c:	4632      	mov	r2, r6
  406e2e:	4643      	mov	r3, r8
  406e30:	47b8      	blx	r7
  406e32:	2800      	cmp	r0, #0
  406e34:	ddef      	ble.n	406e16 <_fflush_r+0x102>
  406e36:	1836      	adds	r6, r6, r0
  406e38:	ebc0 0808 	rsb	r8, r0, r8
  406e3c:	f1b8 0f00 	cmp.w	r8, #0
  406e40:	dcf1      	bgt.n	406e26 <_fflush_r+0x112>
  406e42:	e799      	b.n	406d78 <_fflush_r+0x64>

00406e44 <fflush>:
  406e44:	4601      	mov	r1, r0
  406e46:	b920      	cbnz	r0, 406e52 <fflush+0xe>
  406e48:	4804      	ldr	r0, [pc, #16]	; (406e5c <fflush+0x18>)
  406e4a:	4905      	ldr	r1, [pc, #20]	; (406e60 <fflush+0x1c>)
  406e4c:	6800      	ldr	r0, [r0, #0]
  406e4e:	f000 bbc5 	b.w	4075dc <_fwalk_reent>
  406e52:	4b04      	ldr	r3, [pc, #16]	; (406e64 <fflush+0x20>)
  406e54:	6818      	ldr	r0, [r3, #0]
  406e56:	f7ff bf5d 	b.w	406d14 <_fflush_r>
  406e5a:	bf00      	nop
  406e5c:	004097e4 	.word	0x004097e4
  406e60:	00406d15 	.word	0x00406d15
  406e64:	20000040 	.word	0x20000040

00406e68 <__fp_lock>:
  406e68:	2000      	movs	r0, #0
  406e6a:	4770      	bx	lr

00406e6c <__fp_unlock>:
  406e6c:	2000      	movs	r0, #0
  406e6e:	4770      	bx	lr

00406e70 <_cleanup_r>:
  406e70:	4901      	ldr	r1, [pc, #4]	; (406e78 <_cleanup_r+0x8>)
  406e72:	f000 bb92 	b.w	40759a <_fwalk>
  406e76:	bf00      	nop
  406e78:	004081e5 	.word	0x004081e5

00406e7c <std.isra.0>:
  406e7c:	2300      	movs	r3, #0
  406e7e:	b510      	push	{r4, lr}
  406e80:	4604      	mov	r4, r0
  406e82:	6003      	str	r3, [r0, #0]
  406e84:	6043      	str	r3, [r0, #4]
  406e86:	6083      	str	r3, [r0, #8]
  406e88:	8181      	strh	r1, [r0, #12]
  406e8a:	6643      	str	r3, [r0, #100]	; 0x64
  406e8c:	81c2      	strh	r2, [r0, #14]
  406e8e:	6103      	str	r3, [r0, #16]
  406e90:	6143      	str	r3, [r0, #20]
  406e92:	6183      	str	r3, [r0, #24]
  406e94:	4619      	mov	r1, r3
  406e96:	2208      	movs	r2, #8
  406e98:	f100 005c 	add.w	r0, r0, #92	; 0x5c
  406e9c:	f7ff f9bc 	bl	406218 <memset>
  406ea0:	4804      	ldr	r0, [pc, #16]	; (406eb4 <std.isra.0+0x38>)
  406ea2:	4905      	ldr	r1, [pc, #20]	; (406eb8 <std.isra.0+0x3c>)
  406ea4:	4a05      	ldr	r2, [pc, #20]	; (406ebc <std.isra.0+0x40>)
  406ea6:	4b06      	ldr	r3, [pc, #24]	; (406ec0 <std.isra.0+0x44>)
  406ea8:	61e4      	str	r4, [r4, #28]
  406eaa:	6220      	str	r0, [r4, #32]
  406eac:	6261      	str	r1, [r4, #36]	; 0x24
  406eae:	62a2      	str	r2, [r4, #40]	; 0x28
  406eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
  406eb2:	bd10      	pop	{r4, pc}
  406eb4:	00407f09 	.word	0x00407f09
  406eb8:	00407f2f 	.word	0x00407f2f
  406ebc:	00407f6b 	.word	0x00407f6b
  406ec0:	00407f8f 	.word	0x00407f8f

00406ec4 <__sfmoreglue>:
  406ec4:	b570      	push	{r4, r5, r6, lr}
  406ec6:	2568      	movs	r5, #104	; 0x68
  406ec8:	434d      	muls	r5, r1
  406eca:	460e      	mov	r6, r1
  406ecc:	f105 010c 	add.w	r1, r5, #12
  406ed0:	f000 fc66 	bl	4077a0 <_malloc_r>
  406ed4:	4604      	mov	r4, r0
  406ed6:	b140      	cbz	r0, 406eea <__sfmoreglue+0x26>
  406ed8:	f100 000c 	add.w	r0, r0, #12
  406edc:	2100      	movs	r1, #0
  406ede:	e884 0042 	stmia.w	r4, {r1, r6}
  406ee2:	60a0      	str	r0, [r4, #8]
  406ee4:	462a      	mov	r2, r5
  406ee6:	f7ff f997 	bl	406218 <memset>
  406eea:	4620      	mov	r0, r4
  406eec:	bd70      	pop	{r4, r5, r6, pc}

00406eee <_cleanup>:
  406eee:	4b02      	ldr	r3, [pc, #8]	; (406ef8 <_cleanup+0xa>)
  406ef0:	6818      	ldr	r0, [r3, #0]
  406ef2:	f7ff bfbd 	b.w	406e70 <_cleanup_r>
  406ef6:	bf00      	nop
  406ef8:	004097e4 	.word	0x004097e4

00406efc <__sinit>:
  406efc:	b538      	push	{r3, r4, r5, lr}
  406efe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406f00:	4604      	mov	r4, r0
  406f02:	b9eb      	cbnz	r3, 406f40 <__sinit+0x44>
  406f04:	4a0f      	ldr	r2, [pc, #60]	; (406f44 <__sinit+0x48>)
  406f06:	f8c0 32e0 	str.w	r3, [r0, #736]	; 0x2e0
  406f0a:	2501      	movs	r5, #1
  406f0c:	63c2      	str	r2, [r0, #60]	; 0x3c
  406f0e:	6385      	str	r5, [r0, #56]	; 0x38
  406f10:	f504 713b 	add.w	r1, r4, #748	; 0x2ec
  406f14:	2003      	movs	r0, #3
  406f16:	461a      	mov	r2, r3
  406f18:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
  406f1c:	f8c4 12e8 	str.w	r1, [r4, #744]	; 0x2e8
  406f20:	6860      	ldr	r0, [r4, #4]
  406f22:	2104      	movs	r1, #4
  406f24:	f7ff ffaa 	bl	406e7c <std.isra.0>
  406f28:	68a0      	ldr	r0, [r4, #8]
  406f2a:	2109      	movs	r1, #9
  406f2c:	462a      	mov	r2, r5
  406f2e:	f7ff ffa5 	bl	406e7c <std.isra.0>
  406f32:	68e0      	ldr	r0, [r4, #12]
  406f34:	2112      	movs	r1, #18
  406f36:	2202      	movs	r2, #2
  406f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406f3c:	f7ff bf9e 	b.w	406e7c <std.isra.0>
  406f40:	bd38      	pop	{r3, r4, r5, pc}
  406f42:	bf00      	nop
  406f44:	00406e71 	.word	0x00406e71

00406f48 <__sfp>:
  406f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f4a:	4b1d      	ldr	r3, [pc, #116]	; (406fc0 <__sfp+0x78>)
  406f4c:	681e      	ldr	r6, [r3, #0]
  406f4e:	4607      	mov	r7, r0
  406f50:	6bb0      	ldr	r0, [r6, #56]	; 0x38
  406f52:	b910      	cbnz	r0, 406f5a <__sfp+0x12>
  406f54:	4630      	mov	r0, r6
  406f56:	f7ff ffd1 	bl	406efc <__sinit>
  406f5a:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
  406f5e:	68b4      	ldr	r4, [r6, #8]
  406f60:	6871      	ldr	r1, [r6, #4]
  406f62:	3901      	subs	r1, #1
  406f64:	d404      	bmi.n	406f70 <__sfp+0x28>
  406f66:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
  406f6a:	b185      	cbz	r5, 406f8e <__sfp+0x46>
  406f6c:	3468      	adds	r4, #104	; 0x68
  406f6e:	e7f8      	b.n	406f62 <__sfp+0x1a>
  406f70:	6832      	ldr	r2, [r6, #0]
  406f72:	b10a      	cbz	r2, 406f78 <__sfp+0x30>
  406f74:	6836      	ldr	r6, [r6, #0]
  406f76:	e7f2      	b.n	406f5e <__sfp+0x16>
  406f78:	4638      	mov	r0, r7
  406f7a:	2104      	movs	r1, #4
  406f7c:	f7ff ffa2 	bl	406ec4 <__sfmoreglue>
  406f80:	6030      	str	r0, [r6, #0]
  406f82:	2800      	cmp	r0, #0
  406f84:	d1f6      	bne.n	406f74 <__sfp+0x2c>
  406f86:	240c      	movs	r4, #12
  406f88:	603c      	str	r4, [r7, #0]
  406f8a:	4604      	mov	r4, r0
  406f8c:	e015      	b.n	406fba <__sfp+0x72>
  406f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  406f92:	2001      	movs	r0, #1
  406f94:	81a0      	strh	r0, [r4, #12]
  406f96:	81e3      	strh	r3, [r4, #14]
  406f98:	6665      	str	r5, [r4, #100]	; 0x64
  406f9a:	6025      	str	r5, [r4, #0]
  406f9c:	60a5      	str	r5, [r4, #8]
  406f9e:	6065      	str	r5, [r4, #4]
  406fa0:	6125      	str	r5, [r4, #16]
  406fa2:	6165      	str	r5, [r4, #20]
  406fa4:	61a5      	str	r5, [r4, #24]
  406fa6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
  406faa:	4629      	mov	r1, r5
  406fac:	2208      	movs	r2, #8
  406fae:	f7ff f933 	bl	406218 <memset>
  406fb2:	6325      	str	r5, [r4, #48]	; 0x30
  406fb4:	6365      	str	r5, [r4, #52]	; 0x34
  406fb6:	6465      	str	r5, [r4, #68]	; 0x44
  406fb8:	64a5      	str	r5, [r4, #72]	; 0x48
  406fba:	4620      	mov	r0, r4
  406fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406fbe:	bf00      	nop
  406fc0:	004097e4 	.word	0x004097e4

00406fc4 <__sfp_lock_acquire>:
  406fc4:	4770      	bx	lr

00406fc6 <__sfp_lock_release>:
  406fc6:	4770      	bx	lr

00406fc8 <__sinit_lock_acquire>:
  406fc8:	4770      	bx	lr

00406fca <__sinit_lock_release>:
  406fca:	4770      	bx	lr

00406fcc <__fp_lock_all>:
  406fcc:	4b02      	ldr	r3, [pc, #8]	; (406fd8 <__fp_lock_all+0xc>)
  406fce:	4903      	ldr	r1, [pc, #12]	; (406fdc <__fp_lock_all+0x10>)
  406fd0:	6818      	ldr	r0, [r3, #0]
  406fd2:	f000 bae2 	b.w	40759a <_fwalk>
  406fd6:	bf00      	nop
  406fd8:	20000040 	.word	0x20000040
  406fdc:	00406e69 	.word	0x00406e69

00406fe0 <__fp_unlock_all>:
  406fe0:	4b02      	ldr	r3, [pc, #8]	; (406fec <__fp_unlock_all+0xc>)
  406fe2:	4903      	ldr	r1, [pc, #12]	; (406ff0 <__fp_unlock_all+0x10>)
  406fe4:	6818      	ldr	r0, [r3, #0]
  406fe6:	f000 bad8 	b.w	40759a <_fwalk>
  406fea:	bf00      	nop
  406fec:	20000040 	.word	0x20000040
  406ff0:	00406e6d 	.word	0x00406e6d

00406ff4 <_fputwc_r>:
  406ff4:	8993      	ldrh	r3, [r2, #12]
  406ff6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  406ffa:	4614      	mov	r4, r2
  406ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
  407000:	4680      	mov	r8, r0
  407002:	b210      	sxth	r0, r2
  407004:	460e      	mov	r6, r1
  407006:	b930      	cbnz	r0, 407016 <_fputwc_r+0x22>
  407008:	6e67      	ldr	r7, [r4, #100]	; 0x64
  40700a:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
  40700e:	f447 5300 	orr.w	r3, r7, #8192	; 0x2000
  407012:	81a1      	strh	r1, [r4, #12]
  407014:	6663      	str	r3, [r4, #100]	; 0x64
  407016:	f000 fb29 	bl	40766c <__locale_mb_cur_max>
  40701a:	2801      	cmp	r0, #1
  40701c:	d106      	bne.n	40702c <_fputwc_r+0x38>
  40701e:	b12e      	cbz	r6, 40702c <_fputwc_r+0x38>
  407020:	2eff      	cmp	r6, #255	; 0xff
  407022:	d803      	bhi.n	40702c <_fputwc_r+0x38>
  407024:	f88d 6004 	strb.w	r6, [sp, #4]
  407028:	4607      	mov	r7, r0
  40702a:	e00f      	b.n	40704c <_fputwc_r+0x58>
  40702c:	4632      	mov	r2, r6
  40702e:	4640      	mov	r0, r8
  407030:	a901      	add	r1, sp, #4
  407032:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407036:	f001 f81b 	bl	408070 <_wcrtomb_r>
  40703a:	1c42      	adds	r2, r0, #1
  40703c:	4607      	mov	r7, r0
  40703e:	d105      	bne.n	40704c <_fputwc_r+0x58>
  407040:	89a2      	ldrh	r2, [r4, #12]
  407042:	f042 0040 	orr.w	r0, r2, #64	; 0x40
  407046:	81a0      	strh	r0, [r4, #12]
  407048:	4638      	mov	r0, r7
  40704a:	e031      	b.n	4070b0 <_fputwc_r+0xbc>
  40704c:	2500      	movs	r5, #0
  40704e:	42bd      	cmp	r5, r7
  407050:	d02a      	beq.n	4070a8 <_fputwc_r+0xb4>
  407052:	68a1      	ldr	r1, [r4, #8]
  407054:	1e4a      	subs	r2, r1, #1
  407056:	2a00      	cmp	r2, #0
  407058:	60a2      	str	r2, [r4, #8]
  40705a:	ab01      	add	r3, sp, #4
  40705c:	da1a      	bge.n	407094 <_fputwc_r+0xa0>
  40705e:	69a0      	ldr	r0, [r4, #24]
  407060:	4282      	cmp	r2, r0
  407062:	db0c      	blt.n	40707e <_fputwc_r+0x8a>
  407064:	6821      	ldr	r1, [r4, #0]
  407066:	5d5a      	ldrb	r2, [r3, r5]
  407068:	700a      	strb	r2, [r1, #0]
  40706a:	6823      	ldr	r3, [r4, #0]
  40706c:	7819      	ldrb	r1, [r3, #0]
  40706e:	290a      	cmp	r1, #10
  407070:	d003      	beq.n	40707a <_fputwc_r+0x86>
  407072:	3301      	adds	r3, #1
  407074:	2200      	movs	r2, #0
  407076:	6023      	str	r3, [r4, #0]
  407078:	e013      	b.n	4070a2 <_fputwc_r+0xae>
  40707a:	4640      	mov	r0, r8
  40707c:	e001      	b.n	407082 <_fputwc_r+0x8e>
  40707e:	5d59      	ldrb	r1, [r3, r5]
  407080:	4640      	mov	r0, r8
  407082:	4622      	mov	r2, r4
  407084:	f000 ff9a 	bl	407fbc <__swbuf_r>
  407088:	f1b0 31ff 	subs.w	r1, r0, #4294967295
  40708c:	4248      	negs	r0, r1
  40708e:	eb50 0201 	adcs.w	r2, r0, r1
  407092:	e006      	b.n	4070a2 <_fputwc_r+0xae>
  407094:	6820      	ldr	r0, [r4, #0]
  407096:	5d59      	ldrb	r1, [r3, r5]
  407098:	7001      	strb	r1, [r0, #0]
  40709a:	6822      	ldr	r2, [r4, #0]
  40709c:	1c53      	adds	r3, r2, #1
  40709e:	6023      	str	r3, [r4, #0]
  4070a0:	e000      	b.n	4070a4 <_fputwc_r+0xb0>
  4070a2:	b91a      	cbnz	r2, 4070ac <_fputwc_r+0xb8>
  4070a4:	3501      	adds	r5, #1
  4070a6:	e7d2      	b.n	40704e <_fputwc_r+0x5a>
  4070a8:	4630      	mov	r0, r6
  4070aa:	e001      	b.n	4070b0 <_fputwc_r+0xbc>
  4070ac:	f04f 30ff 	mov.w	r0, #4294967295
  4070b0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

004070b4 <fputwc>:
  4070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4070b6:	4c08      	ldr	r4, [pc, #32]	; (4070d8 <fputwc+0x24>)
  4070b8:	4607      	mov	r7, r0
  4070ba:	6820      	ldr	r0, [r4, #0]
  4070bc:	460e      	mov	r6, r1
  4070be:	b118      	cbz	r0, 4070c8 <fputwc+0x14>
  4070c0:	6b85      	ldr	r5, [r0, #56]	; 0x38
  4070c2:	b90d      	cbnz	r5, 4070c8 <fputwc+0x14>
  4070c4:	f7ff ff1a 	bl	406efc <__sinit>
  4070c8:	6820      	ldr	r0, [r4, #0]
  4070ca:	4639      	mov	r1, r7
  4070cc:	4632      	mov	r2, r6
  4070ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  4070d2:	f7ff bf8f 	b.w	406ff4 <_fputwc_r>
  4070d6:	bf00      	nop
  4070d8:	20000040 	.word	0x20000040

004070dc <_malloc_trim_r>:
  4070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4070de:	4d23      	ldr	r5, [pc, #140]	; (40716c <_malloc_trim_r+0x90>)
  4070e0:	460e      	mov	r6, r1
  4070e2:	4604      	mov	r4, r0
  4070e4:	f000 fd8f 	bl	407c06 <__malloc_lock>
  4070e8:	68ab      	ldr	r3, [r5, #8]
  4070ea:	685f      	ldr	r7, [r3, #4]
  4070ec:	f027 0703 	bic.w	r7, r7, #3
  4070f0:	f607 70ef 	addw	r0, r7, #4079	; 0xfef
  4070f4:	1b81      	subs	r1, r0, r6
  4070f6:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
  4070fa:	f022 060f 	bic.w	r6, r2, #15
  4070fe:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  407102:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  407106:	da04      	bge.n	407112 <_malloc_trim_r+0x36>
  407108:	4620      	mov	r0, r4
  40710a:	f000 fd7d 	bl	407c08 <__malloc_unlock>
  40710e:	2000      	movs	r0, #0
  407110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407112:	2100      	movs	r1, #0
  407114:	4620      	mov	r0, r4
  407116:	f000 fee7 	bl	407ee8 <_sbrk_r>
  40711a:	68ab      	ldr	r3, [r5, #8]
  40711c:	19d9      	adds	r1, r3, r7
  40711e:	4288      	cmp	r0, r1
  407120:	d1f2      	bne.n	407108 <_malloc_trim_r+0x2c>
  407122:	4271      	negs	r1, r6
  407124:	4620      	mov	r0, r4
  407126:	f000 fedf 	bl	407ee8 <_sbrk_r>
  40712a:	3001      	adds	r0, #1
  40712c:	d110      	bne.n	407150 <_malloc_trim_r+0x74>
  40712e:	2100      	movs	r1, #0
  407130:	4620      	mov	r0, r4
  407132:	f000 fed9 	bl	407ee8 <_sbrk_r>
  407136:	68ab      	ldr	r3, [r5, #8]
  407138:	1ac2      	subs	r2, r0, r3
  40713a:	2a0f      	cmp	r2, #15
  40713c:	dde4      	ble.n	407108 <_malloc_trim_r+0x2c>
  40713e:	490c      	ldr	r1, [pc, #48]	; (407170 <_malloc_trim_r+0x94>)
  407140:	6809      	ldr	r1, [r1, #0]
  407142:	1a40      	subs	r0, r0, r1
  407144:	490b      	ldr	r1, [pc, #44]	; (407174 <_malloc_trim_r+0x98>)
  407146:	f042 0201 	orr.w	r2, r2, #1
  40714a:	6008      	str	r0, [r1, #0]
  40714c:	605a      	str	r2, [r3, #4]
  40714e:	e7db      	b.n	407108 <_malloc_trim_r+0x2c>
  407150:	4b08      	ldr	r3, [pc, #32]	; (407174 <_malloc_trim_r+0x98>)
  407152:	68a8      	ldr	r0, [r5, #8]
  407154:	681a      	ldr	r2, [r3, #0]
  407156:	1bbf      	subs	r7, r7, r6
  407158:	f047 0701 	orr.w	r7, r7, #1
  40715c:	6047      	str	r7, [r0, #4]
  40715e:	1b96      	subs	r6, r2, r6
  407160:	4620      	mov	r0, r4
  407162:	601e      	str	r6, [r3, #0]
  407164:	f000 fd50 	bl	407c08 <__malloc_unlock>
  407168:	2001      	movs	r0, #1
  40716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40716c:	200004ec 	.word	0x200004ec
  407170:	200008f4 	.word	0x200008f4
  407174:	20000d98 	.word	0x20000d98

00407178 <_free_r>:
  407178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40717a:	4606      	mov	r6, r0
  40717c:	460d      	mov	r5, r1
  40717e:	2900      	cmp	r1, #0
  407180:	f000 80a6 	beq.w	4072d0 <_free_r+0x158>
  407184:	f000 fd3f 	bl	407c06 <__malloc_lock>
  407188:	f855 cc04 	ldr.w	ip, [r5, #-4]
  40718c:	4f51      	ldr	r7, [pc, #324]	; (4072d4 <_free_r+0x15c>)
  40718e:	f1a5 0308 	sub.w	r3, r5, #8
  407192:	f02c 0201 	bic.w	r2, ip, #1
  407196:	189c      	adds	r4, r3, r2
  407198:	68b9      	ldr	r1, [r7, #8]
  40719a:	6860      	ldr	r0, [r4, #4]
  40719c:	428c      	cmp	r4, r1
  40719e:	f020 0003 	bic.w	r0, r0, #3
  4071a2:	f00c 0101 	and.w	r1, ip, #1
  4071a6:	d11c      	bne.n	4071e2 <_free_r+0x6a>
  4071a8:	1882      	adds	r2, r0, r2
  4071aa:	b939      	cbnz	r1, 4071bc <_free_r+0x44>
  4071ac:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4071b0:	1a5b      	subs	r3, r3, r1
  4071b2:	1852      	adds	r2, r2, r1
  4071b4:	6898      	ldr	r0, [r3, #8]
  4071b6:	68d9      	ldr	r1, [r3, #12]
  4071b8:	60c1      	str	r1, [r0, #12]
  4071ba:	6088      	str	r0, [r1, #8]
  4071bc:	4845      	ldr	r0, [pc, #276]	; (4072d4 <_free_r+0x15c>)
  4071be:	f042 0101 	orr.w	r1, r2, #1
  4071c2:	6059      	str	r1, [r3, #4]
  4071c4:	6083      	str	r3, [r0, #8]
  4071c6:	4b44      	ldr	r3, [pc, #272]	; (4072d8 <_free_r+0x160>)
  4071c8:	6819      	ldr	r1, [r3, #0]
  4071ca:	428a      	cmp	r2, r1
  4071cc:	d304      	bcc.n	4071d8 <_free_r+0x60>
  4071ce:	4a43      	ldr	r2, [pc, #268]	; (4072dc <_free_r+0x164>)
  4071d0:	4630      	mov	r0, r6
  4071d2:	6811      	ldr	r1, [r2, #0]
  4071d4:	f7ff ff82 	bl	4070dc <_malloc_trim_r>
  4071d8:	4630      	mov	r0, r6
  4071da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  4071de:	f000 bd13 	b.w	407c08 <__malloc_unlock>
  4071e2:	6060      	str	r0, [r4, #4]
  4071e4:	b959      	cbnz	r1, 4071fe <_free_r+0x86>
  4071e6:	f855 5c08 	ldr.w	r5, [r5, #-8]
  4071ea:	1b5b      	subs	r3, r3, r5
  4071ec:	1952      	adds	r2, r2, r5
  4071ee:	689d      	ldr	r5, [r3, #8]
  4071f0:	3708      	adds	r7, #8
  4071f2:	42bd      	cmp	r5, r7
  4071f4:	d005      	beq.n	407202 <_free_r+0x8a>
  4071f6:	68df      	ldr	r7, [r3, #12]
  4071f8:	60ef      	str	r7, [r5, #12]
  4071fa:	60bd      	str	r5, [r7, #8]
  4071fc:	e002      	b.n	407204 <_free_r+0x8c>
  4071fe:	2100      	movs	r1, #0
  407200:	e000      	b.n	407204 <_free_r+0x8c>
  407202:	2101      	movs	r1, #1
  407204:	1825      	adds	r5, r4, r0
  407206:	686d      	ldr	r5, [r5, #4]
  407208:	f015 0f01 	tst.w	r5, #1
  40720c:	d10f      	bne.n	40722e <_free_r+0xb6>
  40720e:	1812      	adds	r2, r2, r0
  407210:	b949      	cbnz	r1, 407226 <_free_r+0xae>
  407212:	68a0      	ldr	r0, [r4, #8]
  407214:	4d32      	ldr	r5, [pc, #200]	; (4072e0 <_free_r+0x168>)
  407216:	42a8      	cmp	r0, r5
  407218:	d105      	bne.n	407226 <_free_r+0xae>
  40721a:	60eb      	str	r3, [r5, #12]
  40721c:	60ab      	str	r3, [r5, #8]
  40721e:	60d8      	str	r0, [r3, #12]
  407220:	6098      	str	r0, [r3, #8]
  407222:	2101      	movs	r1, #1
  407224:	e003      	b.n	40722e <_free_r+0xb6>
  407226:	68e0      	ldr	r0, [r4, #12]
  407228:	68a4      	ldr	r4, [r4, #8]
  40722a:	60e0      	str	r0, [r4, #12]
  40722c:	6084      	str	r4, [r0, #8]
  40722e:	f042 0001 	orr.w	r0, r2, #1
  407232:	6058      	str	r0, [r3, #4]
  407234:	509a      	str	r2, [r3, r2]
  407236:	2900      	cmp	r1, #0
  407238:	d1ce      	bne.n	4071d8 <_free_r+0x60>
  40723a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40723e:	d20c      	bcs.n	40725a <_free_r+0xe2>
  407240:	4924      	ldr	r1, [pc, #144]	; (4072d4 <_free_r+0x15c>)
  407242:	08d2      	lsrs	r2, r2, #3
  407244:	1090      	asrs	r0, r2, #2
  407246:	2401      	movs	r4, #1
  407248:	fa04 f400 	lsl.w	r4, r4, r0
  40724c:	6848      	ldr	r0, [r1, #4]
  40724e:	4320      	orrs	r0, r4
  407250:	6048      	str	r0, [r1, #4]
  407252:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  407256:	6881      	ldr	r1, [r0, #8]
  407258:	e035      	b.n	4072c6 <_free_r+0x14e>
  40725a:	0a54      	lsrs	r4, r2, #9
  40725c:	2c04      	cmp	r4, #4
  40725e:	d802      	bhi.n	407266 <_free_r+0xee>
  407260:	0994      	lsrs	r4, r2, #6
  407262:	3438      	adds	r4, #56	; 0x38
  407264:	e016      	b.n	407294 <_free_r+0x11c>
  407266:	2c14      	cmp	r4, #20
  407268:	d801      	bhi.n	40726e <_free_r+0xf6>
  40726a:	345b      	adds	r4, #91	; 0x5b
  40726c:	e012      	b.n	407294 <_free_r+0x11c>
  40726e:	2c54      	cmp	r4, #84	; 0x54
  407270:	d802      	bhi.n	407278 <_free_r+0x100>
  407272:	0b14      	lsrs	r4, r2, #12
  407274:	346e      	adds	r4, #110	; 0x6e
  407276:	e00d      	b.n	407294 <_free_r+0x11c>
  407278:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
  40727c:	d802      	bhi.n	407284 <_free_r+0x10c>
  40727e:	0bd4      	lsrs	r4, r2, #15
  407280:	3477      	adds	r4, #119	; 0x77
  407282:	e007      	b.n	407294 <_free_r+0x11c>
  407284:	f240 5554 	movw	r5, #1364	; 0x554
  407288:	42ac      	cmp	r4, r5
  40728a:	d802      	bhi.n	407292 <_free_r+0x11a>
  40728c:	0c94      	lsrs	r4, r2, #18
  40728e:	347c      	adds	r4, #124	; 0x7c
  407290:	e000      	b.n	407294 <_free_r+0x11c>
  407292:	247e      	movs	r4, #126	; 0x7e
  407294:	4d0f      	ldr	r5, [pc, #60]	; (4072d4 <_free_r+0x15c>)
  407296:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
  40729a:	6881      	ldr	r1, [r0, #8]
  40729c:	4281      	cmp	r1, r0
  40729e:	d10c      	bne.n	4072ba <_free_r+0x142>
  4072a0:	6868      	ldr	r0, [r5, #4]
  4072a2:	2201      	movs	r2, #1
  4072a4:	10a4      	asrs	r4, r4, #2
  4072a6:	fa02 f404 	lsl.w	r4, r2, r4
  4072aa:	ea44 0200 	orr.w	r2, r4, r0
  4072ae:	606a      	str	r2, [r5, #4]
  4072b0:	4608      	mov	r0, r1
  4072b2:	e008      	b.n	4072c6 <_free_r+0x14e>
  4072b4:	6889      	ldr	r1, [r1, #8]
  4072b6:	4281      	cmp	r1, r0
  4072b8:	d004      	beq.n	4072c4 <_free_r+0x14c>
  4072ba:	684c      	ldr	r4, [r1, #4]
  4072bc:	f024 0403 	bic.w	r4, r4, #3
  4072c0:	42a2      	cmp	r2, r4
  4072c2:	d3f7      	bcc.n	4072b4 <_free_r+0x13c>
  4072c4:	68c8      	ldr	r0, [r1, #12]
  4072c6:	60d8      	str	r0, [r3, #12]
  4072c8:	6099      	str	r1, [r3, #8]
  4072ca:	6083      	str	r3, [r0, #8]
  4072cc:	60cb      	str	r3, [r1, #12]
  4072ce:	e783      	b.n	4071d8 <_free_r+0x60>
  4072d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4072d2:	bf00      	nop
  4072d4:	200004ec 	.word	0x200004ec
  4072d8:	200008f8 	.word	0x200008f8
  4072dc:	20000d94 	.word	0x20000d94
  4072e0:	200004f4 	.word	0x200004f4

004072e4 <__sfvwrite_r>:
  4072e4:	6893      	ldr	r3, [r2, #8]
  4072e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4072ea:	4606      	mov	r6, r0
  4072ec:	460c      	mov	r4, r1
  4072ee:	4691      	mov	r9, r2
  4072f0:	b90b      	cbnz	r3, 4072f6 <__sfvwrite_r+0x12>
  4072f2:	2000      	movs	r0, #0
  4072f4:	e14f      	b.n	407596 <__sfvwrite_r+0x2b2>
  4072f6:	8988      	ldrh	r0, [r1, #12]
  4072f8:	f000 0108 	and.w	r1, r0, #8
  4072fc:	b20a      	sxth	r2, r1
  4072fe:	b10a      	cbz	r2, 407304 <__sfvwrite_r+0x20>
  407300:	6923      	ldr	r3, [r4, #16]
  407302:	b95b      	cbnz	r3, 40731c <__sfvwrite_r+0x38>
  407304:	4630      	mov	r0, r6
  407306:	4621      	mov	r1, r4
  407308:	f7ff fc98 	bl	406c3c <__swsetup_r>
  40730c:	b130      	cbz	r0, 40731c <__sfvwrite_r+0x38>
  40730e:	89a1      	ldrh	r1, [r4, #12]
  407310:	2209      	movs	r2, #9
  407312:	f041 0040 	orr.w	r0, r1, #64	; 0x40
  407316:	81a0      	strh	r0, [r4, #12]
  407318:	6032      	str	r2, [r6, #0]
  40731a:	e13a      	b.n	407592 <__sfvwrite_r+0x2ae>
  40731c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
  407320:	f8d9 8000 	ldr.w	r8, [r9]
  407324:	f00a 0c02 	and.w	ip, sl, #2
  407328:	fa0f f58c 	sxth.w	r5, ip
  40732c:	b315      	cbz	r5, 407374 <__sfvwrite_r+0x90>
  40732e:	f04f 0a00 	mov.w	sl, #0
  407332:	4657      	mov	r7, sl
  407334:	b937      	cbnz	r7, 407344 <__sfvwrite_r+0x60>
  407336:	f8d8 a000 	ldr.w	sl, [r8]
  40733a:	f8d8 7004 	ldr.w	r7, [r8, #4]
  40733e:	f108 0808 	add.w	r8, r8, #8
  407342:	e7f7      	b.n	407334 <__sfvwrite_r+0x50>
  407344:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
  407348:	bf34      	ite	cc
  40734a:	463b      	movcc	r3, r7
  40734c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
  407350:	4630      	mov	r0, r6
  407352:	69e1      	ldr	r1, [r4, #28]
  407354:	6a65      	ldr	r5, [r4, #36]	; 0x24
  407356:	4652      	mov	r2, sl
  407358:	47a8      	blx	r5
  40735a:	2800      	cmp	r0, #0
  40735c:	f340 8115 	ble.w	40758a <__sfvwrite_r+0x2a6>
  407360:	f8d9 1008 	ldr.w	r1, [r9, #8]
  407364:	4482      	add	sl, r0
  407366:	1a3f      	subs	r7, r7, r0
  407368:	1a08      	subs	r0, r1, r0
  40736a:	f8c9 0008 	str.w	r0, [r9, #8]
  40736e:	2800      	cmp	r0, #0
  407370:	d1e0      	bne.n	407334 <__sfvwrite_r+0x50>
  407372:	e7be      	b.n	4072f2 <__sfvwrite_r+0xe>
  407374:	f01a 0a01 	ands.w	sl, sl, #1
  407378:	d004      	beq.n	407384 <__sfvwrite_r+0xa0>
  40737a:	46ab      	mov	fp, r5
  40737c:	9501      	str	r5, [sp, #4]
  40737e:	462f      	mov	r7, r5
  407380:	46aa      	mov	sl, r5
  407382:	e0c7      	b.n	407514 <__sfvwrite_r+0x230>
  407384:	4655      	mov	r5, sl
  407386:	b935      	cbnz	r5, 407396 <__sfvwrite_r+0xb2>
  407388:	f8d8 a000 	ldr.w	sl, [r8]
  40738c:	f8d8 5004 	ldr.w	r5, [r8, #4]
  407390:	f108 0808 	add.w	r8, r8, #8
  407394:	e7f7      	b.n	407386 <__sfvwrite_r+0xa2>
  407396:	89a2      	ldrh	r2, [r4, #12]
  407398:	f8d4 b008 	ldr.w	fp, [r4, #8]
  40739c:	f402 7000 	and.w	r0, r2, #512	; 0x200
  4073a0:	b203      	sxth	r3, r0
  4073a2:	2b00      	cmp	r3, #0
  4073a4:	d052      	beq.n	40744c <__sfvwrite_r+0x168>
  4073a6:	455d      	cmp	r5, fp
  4073a8:	d340      	bcc.n	40742c <__sfvwrite_r+0x148>
  4073aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
  4073ae:	d03b      	beq.n	407428 <__sfvwrite_r+0x144>
  4073b0:	6921      	ldr	r1, [r4, #16]
  4073b2:	6827      	ldr	r7, [r4, #0]
  4073b4:	6963      	ldr	r3, [r4, #20]
  4073b6:	f04f 0b03 	mov.w	fp, #3
  4073ba:	fb0b f303 	mul.w	r3, fp, r3
  4073be:	2002      	movs	r0, #2
  4073c0:	1a7f      	subs	r7, r7, r1
  4073c2:	fb93 fcf0 	sdiv	ip, r3, r0
  4073c6:	1c7b      	adds	r3, r7, #1
  4073c8:	1958      	adds	r0, r3, r5
  4073ca:	f402 6280 	and.w	r2, r2, #1024	; 0x400
  4073ce:	4584      	cmp	ip, r0
  4073d0:	bf28      	it	cs
  4073d2:	4660      	movcs	r0, ip
  4073d4:	b213      	sxth	r3, r2
  4073d6:	9001      	str	r0, [sp, #4]
  4073d8:	4630      	mov	r0, r6
  4073da:	b17b      	cbz	r3, 4073fc <__sfvwrite_r+0x118>
  4073dc:	9901      	ldr	r1, [sp, #4]
  4073de:	f000 f9df 	bl	4077a0 <_malloc_r>
  4073e2:	4683      	mov	fp, r0
  4073e4:	b198      	cbz	r0, 40740e <__sfvwrite_r+0x12a>
  4073e6:	6921      	ldr	r1, [r4, #16]
  4073e8:	463a      	mov	r2, r7
  4073ea:	f000 fbe9 	bl	407bc0 <memcpy>
  4073ee:	89a1      	ldrh	r1, [r4, #12]
  4073f0:	f421 6090 	bic.w	r0, r1, #1152	; 0x480
  4073f4:	f040 0280 	orr.w	r2, r0, #128	; 0x80
  4073f8:	81a2      	strh	r2, [r4, #12]
  4073fa:	e00b      	b.n	407414 <__sfvwrite_r+0x130>
  4073fc:	9a01      	ldr	r2, [sp, #4]
  4073fe:	f000 fc05 	bl	407c0c <_realloc_r>
  407402:	4683      	mov	fp, r0
  407404:	b930      	cbnz	r0, 407414 <__sfvwrite_r+0x130>
  407406:	4630      	mov	r0, r6
  407408:	6921      	ldr	r1, [r4, #16]
  40740a:	f7ff feb5 	bl	407178 <_free_r>
  40740e:	230c      	movs	r3, #12
  407410:	6033      	str	r3, [r6, #0]
  407412:	e0ba      	b.n	40758a <__sfvwrite_r+0x2a6>
  407414:	9901      	ldr	r1, [sp, #4]
  407416:	f8c4 b010 	str.w	fp, [r4, #16]
  40741a:	eb0b 0307 	add.w	r3, fp, r7
  40741e:	1bcf      	subs	r7, r1, r7
  407420:	6023      	str	r3, [r4, #0]
  407422:	6161      	str	r1, [r4, #20]
  407424:	46ab      	mov	fp, r5
  407426:	60a7      	str	r7, [r4, #8]
  407428:	455d      	cmp	r5, fp
  40742a:	d200      	bcs.n	40742e <__sfvwrite_r+0x14a>
  40742c:	46ab      	mov	fp, r5
  40742e:	465a      	mov	r2, fp
  407430:	4651      	mov	r1, sl
  407432:	6820      	ldr	r0, [r4, #0]
  407434:	f000 fbcd 	bl	407bd2 <memmove>
  407438:	68a0      	ldr	r0, [r4, #8]
  40743a:	6823      	ldr	r3, [r4, #0]
  40743c:	ebcb 0200 	rsb	r2, fp, r0
  407440:	eb03 010b 	add.w	r1, r3, fp
  407444:	60a2      	str	r2, [r4, #8]
  407446:	6021      	str	r1, [r4, #0]
  407448:	46ab      	mov	fp, r5
  40744a:	e02a      	b.n	4074a2 <__sfvwrite_r+0x1be>
  40744c:	6820      	ldr	r0, [r4, #0]
  40744e:	6921      	ldr	r1, [r4, #16]
  407450:	4288      	cmp	r0, r1
  407452:	d90f      	bls.n	407474 <__sfvwrite_r+0x190>
  407454:	455d      	cmp	r5, fp
  407456:	d90d      	bls.n	407474 <__sfvwrite_r+0x190>
  407458:	4651      	mov	r1, sl
  40745a:	465a      	mov	r2, fp
  40745c:	f000 fbb9 	bl	407bd2 <memmove>
  407460:	6822      	ldr	r2, [r4, #0]
  407462:	eb02 000b 	add.w	r0, r2, fp
  407466:	6020      	str	r0, [r4, #0]
  407468:	4621      	mov	r1, r4
  40746a:	4630      	mov	r0, r6
  40746c:	f7ff fc52 	bl	406d14 <_fflush_r>
  407470:	b1b8      	cbz	r0, 4074a2 <__sfvwrite_r+0x1be>
  407472:	e08a      	b.n	40758a <__sfvwrite_r+0x2a6>
  407474:	6963      	ldr	r3, [r4, #20]
  407476:	429d      	cmp	r5, r3
  407478:	d308      	bcc.n	40748c <__sfvwrite_r+0x1a8>
  40747a:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40747c:	69e1      	ldr	r1, [r4, #28]
  40747e:	4630      	mov	r0, r6
  407480:	4652      	mov	r2, sl
  407482:	47b8      	blx	r7
  407484:	f1b0 0b00 	subs.w	fp, r0, #0
  407488:	dc0b      	bgt.n	4074a2 <__sfvwrite_r+0x1be>
  40748a:	e07e      	b.n	40758a <__sfvwrite_r+0x2a6>
  40748c:	4651      	mov	r1, sl
  40748e:	462a      	mov	r2, r5
  407490:	f000 fb9f 	bl	407bd2 <memmove>
  407494:	68a2      	ldr	r2, [r4, #8]
  407496:	6823      	ldr	r3, [r4, #0]
  407498:	1b50      	subs	r0, r2, r5
  40749a:	1959      	adds	r1, r3, r5
  40749c:	46ab      	mov	fp, r5
  40749e:	60a0      	str	r0, [r4, #8]
  4074a0:	6021      	str	r1, [r4, #0]
  4074a2:	f8d9 0008 	ldr.w	r0, [r9, #8]
  4074a6:	ebcb 0200 	rsb	r2, fp, r0
  4074aa:	44da      	add	sl, fp
  4074ac:	ebcb 0505 	rsb	r5, fp, r5
  4074b0:	f8c9 2008 	str.w	r2, [r9, #8]
  4074b4:	2a00      	cmp	r2, #0
  4074b6:	f47f af66 	bne.w	407386 <__sfvwrite_r+0xa2>
  4074ba:	e71a      	b.n	4072f2 <__sfvwrite_r+0xe>
  4074bc:	9801      	ldr	r0, [sp, #4]
  4074be:	2800      	cmp	r0, #0
  4074c0:	d032      	beq.n	407528 <__sfvwrite_r+0x244>
  4074c2:	6820      	ldr	r0, [r4, #0]
  4074c4:	6921      	ldr	r1, [r4, #16]
  4074c6:	68a5      	ldr	r5, [r4, #8]
  4074c8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  4074cc:	45d3      	cmp	fp, sl
  4074ce:	bf34      	ite	cc
  4074d0:	465b      	movcc	r3, fp
  4074d2:	4653      	movcs	r3, sl
  4074d4:	4288      	cmp	r0, r1
  4074d6:	d937      	bls.n	407548 <__sfvwrite_r+0x264>
  4074d8:	4475      	add	r5, lr
  4074da:	42ab      	cmp	r3, r5
  4074dc:	dd34      	ble.n	407548 <__sfvwrite_r+0x264>
  4074de:	4639      	mov	r1, r7
  4074e0:	462a      	mov	r2, r5
  4074e2:	f000 fb76 	bl	407bd2 <memmove>
  4074e6:	6820      	ldr	r0, [r4, #0]
  4074e8:	1943      	adds	r3, r0, r5
  4074ea:	6023      	str	r3, [r4, #0]
  4074ec:	4630      	mov	r0, r6
  4074ee:	4621      	mov	r1, r4
  4074f0:	f7ff fc10 	bl	406d14 <_fflush_r>
  4074f4:	2800      	cmp	r0, #0
  4074f6:	d148      	bne.n	40758a <__sfvwrite_r+0x2a6>
  4074f8:	ebbb 0b05 	subs.w	fp, fp, r5
  4074fc:	d03d      	beq.n	40757a <__sfvwrite_r+0x296>
  4074fe:	f8d9 2008 	ldr.w	r2, [r9, #8]
  407502:	197f      	adds	r7, r7, r5
  407504:	ebc5 0a0a 	rsb	sl, r5, sl
  407508:	1b55      	subs	r5, r2, r5
  40750a:	f8c9 5008 	str.w	r5, [r9, #8]
  40750e:	2d00      	cmp	r5, #0
  407510:	f43f aeef 	beq.w	4072f2 <__sfvwrite_r+0xe>
  407514:	f1ba 0f00 	cmp.w	sl, #0
  407518:	d1d0      	bne.n	4074bc <__sfvwrite_r+0x1d8>
  40751a:	2100      	movs	r1, #0
  40751c:	e898 0480 	ldmia.w	r8, {r7, sl}
  407520:	9101      	str	r1, [sp, #4]
  407522:	f108 0808 	add.w	r8, r8, #8
  407526:	e7f5      	b.n	407514 <__sfvwrite_r+0x230>
  407528:	4638      	mov	r0, r7
  40752a:	210a      	movs	r1, #10
  40752c:	4652      	mov	r2, sl
  40752e:	f000 fb39 	bl	407ba4 <memchr>
  407532:	b120      	cbz	r0, 40753e <__sfvwrite_r+0x25a>
  407534:	f100 0101 	add.w	r1, r0, #1
  407538:	ebc7 0b01 	rsb	fp, r7, r1
  40753c:	e001      	b.n	407542 <__sfvwrite_r+0x25e>
  40753e:	f10a 0b01 	add.w	fp, sl, #1
  407542:	2201      	movs	r2, #1
  407544:	9201      	str	r2, [sp, #4]
  407546:	e7bc      	b.n	4074c2 <__sfvwrite_r+0x1de>
  407548:	4573      	cmp	r3, lr
  40754a:	db08      	blt.n	40755e <__sfvwrite_r+0x27a>
  40754c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  40754e:	69e1      	ldr	r1, [r4, #28]
  407550:	4630      	mov	r0, r6
  407552:	463a      	mov	r2, r7
  407554:	4673      	mov	r3, lr
  407556:	47a8      	blx	r5
  407558:	1e05      	subs	r5, r0, #0
  40755a:	dccd      	bgt.n	4074f8 <__sfvwrite_r+0x214>
  40755c:	e015      	b.n	40758a <__sfvwrite_r+0x2a6>
  40755e:	461a      	mov	r2, r3
  407560:	4639      	mov	r1, r7
  407562:	9300      	str	r3, [sp, #0]
  407564:	f000 fb35 	bl	407bd2 <memmove>
  407568:	9b00      	ldr	r3, [sp, #0]
  40756a:	6825      	ldr	r5, [r4, #0]
  40756c:	68a0      	ldr	r0, [r4, #8]
  40756e:	18e9      	adds	r1, r5, r3
  407570:	1ac2      	subs	r2, r0, r3
  407572:	60a2      	str	r2, [r4, #8]
  407574:	6021      	str	r1, [r4, #0]
  407576:	461d      	mov	r5, r3
  407578:	e7be      	b.n	4074f8 <__sfvwrite_r+0x214>
  40757a:	4630      	mov	r0, r6
  40757c:	4621      	mov	r1, r4
  40757e:	f7ff fbc9 	bl	406d14 <_fflush_r>
  407582:	b910      	cbnz	r0, 40758a <__sfvwrite_r+0x2a6>
  407584:	f8cd b004 	str.w	fp, [sp, #4]
  407588:	e7b9      	b.n	4074fe <__sfvwrite_r+0x21a>
  40758a:	89a2      	ldrh	r2, [r4, #12]
  40758c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
  407590:	81a3      	strh	r3, [r4, #12]
  407592:	f04f 30ff 	mov.w	r0, #4294967295
  407596:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040759a <_fwalk>:
  40759a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40759e:	4604      	mov	r4, r0
  4075a0:	4688      	mov	r8, r1
  4075a2:	f7ff fd0f 	bl	406fc4 <__sfp_lock_acquire>
  4075a6:	f504 7438 	add.w	r4, r4, #736	; 0x2e0
  4075aa:	2600      	movs	r6, #0
  4075ac:	b18c      	cbz	r4, 4075d2 <_fwalk+0x38>
  4075ae:	68a5      	ldr	r5, [r4, #8]
  4075b0:	6867      	ldr	r7, [r4, #4]
  4075b2:	3f01      	subs	r7, #1
  4075b4:	d40b      	bmi.n	4075ce <_fwalk+0x34>
  4075b6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4075ba:	b133      	cbz	r3, 4075ca <_fwalk+0x30>
  4075bc:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  4075c0:	1c43      	adds	r3, r0, #1
  4075c2:	d002      	beq.n	4075ca <_fwalk+0x30>
  4075c4:	4628      	mov	r0, r5
  4075c6:	47c0      	blx	r8
  4075c8:	4306      	orrs	r6, r0
  4075ca:	3568      	adds	r5, #104	; 0x68
  4075cc:	e7f1      	b.n	4075b2 <_fwalk+0x18>
  4075ce:	6824      	ldr	r4, [r4, #0]
  4075d0:	e7ec      	b.n	4075ac <_fwalk+0x12>
  4075d2:	f7ff fcf8 	bl	406fc6 <__sfp_lock_release>
  4075d6:	4630      	mov	r0, r6
  4075d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004075dc <_fwalk_reent>:
  4075dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4075e0:	4680      	mov	r8, r0
  4075e2:	4689      	mov	r9, r1
  4075e4:	f7ff fcee 	bl	406fc4 <__sfp_lock_acquire>
  4075e8:	f508 7438 	add.w	r4, r8, #736	; 0x2e0
  4075ec:	2600      	movs	r6, #0
  4075ee:	b194      	cbz	r4, 407616 <_fwalk_reent+0x3a>
  4075f0:	68a5      	ldr	r5, [r4, #8]
  4075f2:	6867      	ldr	r7, [r4, #4]
  4075f4:	3f01      	subs	r7, #1
  4075f6:	d40c      	bmi.n	407612 <_fwalk_reent+0x36>
  4075f8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4075fc:	b13b      	cbz	r3, 40760e <_fwalk_reent+0x32>
  4075fe:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  407602:	1c43      	adds	r3, r0, #1
  407604:	d003      	beq.n	40760e <_fwalk_reent+0x32>
  407606:	4640      	mov	r0, r8
  407608:	4629      	mov	r1, r5
  40760a:	47c8      	blx	r9
  40760c:	4306      	orrs	r6, r0
  40760e:	3568      	adds	r5, #104	; 0x68
  407610:	e7f0      	b.n	4075f4 <_fwalk_reent+0x18>
  407612:	6824      	ldr	r4, [r4, #0]
  407614:	e7eb      	b.n	4075ee <_fwalk_reent+0x12>
  407616:	f7ff fcd6 	bl	406fc6 <__sfp_lock_release>
  40761a:	4630      	mov	r0, r6
  40761c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00407620 <_setlocale_r>:
  407620:	b510      	push	{r4, lr}
  407622:	4614      	mov	r4, r2
  407624:	b90a      	cbnz	r2, 40762a <_setlocale_r+0xa>
  407626:	480c      	ldr	r0, [pc, #48]	; (407658 <_setlocale_r+0x38>)
  407628:	bd10      	pop	{r4, pc}
  40762a:	4610      	mov	r0, r2
  40762c:	490b      	ldr	r1, [pc, #44]	; (40765c <_setlocale_r+0x3c>)
  40762e:	f000 fcb2 	bl	407f96 <strcmp>
  407632:	2800      	cmp	r0, #0
  407634:	d0f7      	beq.n	407626 <_setlocale_r+0x6>
  407636:	4620      	mov	r0, r4
  407638:	4907      	ldr	r1, [pc, #28]	; (407658 <_setlocale_r+0x38>)
  40763a:	f000 fcac 	bl	407f96 <strcmp>
  40763e:	2800      	cmp	r0, #0
  407640:	d0f1      	beq.n	407626 <_setlocale_r+0x6>
  407642:	4620      	mov	r0, r4
  407644:	4906      	ldr	r1, [pc, #24]	; (407660 <_setlocale_r+0x40>)
  407646:	f000 fca6 	bl	407f96 <strcmp>
  40764a:	4b03      	ldr	r3, [pc, #12]	; (407658 <_setlocale_r+0x38>)
  40764c:	2800      	cmp	r0, #0
  40764e:	bf0c      	ite	eq
  407650:	4618      	moveq	r0, r3
  407652:	2000      	movne	r0, #0
  407654:	bd10      	pop	{r4, pc}
  407656:	bf00      	nop
  407658:	004097e8 	.word	0x004097e8
  40765c:	0040982c 	.word	0x0040982c
  407660:	00409833 	.word	0x00409833

00407664 <__locale_charset>:
  407664:	4800      	ldr	r0, [pc, #0]	; (407668 <__locale_charset+0x4>)
  407666:	4770      	bx	lr
  407668:	20000470 	.word	0x20000470

0040766c <__locale_mb_cur_max>:
  40766c:	4b01      	ldr	r3, [pc, #4]	; (407674 <__locale_mb_cur_max+0x8>)
  40766e:	6a18      	ldr	r0, [r3, #32]
  407670:	4770      	bx	lr
  407672:	bf00      	nop
  407674:	20000470 	.word	0x20000470

00407678 <__locale_msgcharset>:
  407678:	4800      	ldr	r0, [pc, #0]	; (40767c <__locale_msgcharset+0x4>)
  40767a:	4770      	bx	lr
  40767c:	20000494 	.word	0x20000494

00407680 <__locale_cjk_lang>:
  407680:	2000      	movs	r0, #0
  407682:	4770      	bx	lr

00407684 <_localeconv_r>:
  407684:	4800      	ldr	r0, [pc, #0]	; (407688 <_localeconv_r+0x4>)
  407686:	4770      	bx	lr
  407688:	200004b4 	.word	0x200004b4

0040768c <setlocale>:
  40768c:	460a      	mov	r2, r1
  40768e:	4903      	ldr	r1, [pc, #12]	; (40769c <setlocale+0x10>)
  407690:	4603      	mov	r3, r0
  407692:	6808      	ldr	r0, [r1, #0]
  407694:	4619      	mov	r1, r3
  407696:	f7ff bfc3 	b.w	407620 <_setlocale_r>
  40769a:	bf00      	nop
  40769c:	20000040 	.word	0x20000040

004076a0 <localeconv>:
  4076a0:	4800      	ldr	r0, [pc, #0]	; (4076a4 <localeconv+0x4>)
  4076a2:	4770      	bx	lr
  4076a4:	200004b4 	.word	0x200004b4

004076a8 <__smakebuf_r>:
  4076a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4076aa:	898b      	ldrh	r3, [r1, #12]
  4076ac:	460c      	mov	r4, r1
  4076ae:	f003 0102 	and.w	r1, r3, #2
  4076b2:	b20a      	sxth	r2, r1
  4076b4:	b091      	sub	sp, #68	; 0x44
  4076b6:	4606      	mov	r6, r0
  4076b8:	2a00      	cmp	r2, #0
  4076ba:	d13f      	bne.n	40773c <__smakebuf_r+0x94>
  4076bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4076c0:	2900      	cmp	r1, #0
  4076c2:	da0d      	bge.n	4076e0 <__smakebuf_r+0x38>
  4076c4:	89a7      	ldrh	r7, [r4, #12]
  4076c6:	f007 0280 	and.w	r2, r7, #128	; 0x80
  4076ca:	f447 6300 	orr.w	r3, r7, #2048	; 0x800
  4076ce:	b210      	sxth	r0, r2
  4076d0:	2800      	cmp	r0, #0
  4076d2:	bf0c      	ite	eq
  4076d4:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  4076d8:	2540      	movne	r5, #64	; 0x40
  4076da:	81a3      	strh	r3, [r4, #12]
  4076dc:	2700      	movs	r7, #0
  4076de:	e020      	b.n	407722 <__smakebuf_r+0x7a>
  4076e0:	aa01      	add	r2, sp, #4
  4076e2:	f000 fd87 	bl	4081f4 <_fstat_r>
  4076e6:	2800      	cmp	r0, #0
  4076e8:	dbec      	blt.n	4076c4 <__smakebuf_r+0x1c>
  4076ea:	9802      	ldr	r0, [sp, #8]
  4076ec:	f400 4570 	and.w	r5, r0, #61440	; 0xf000
  4076f0:	f5b5 5300 	subs.w	r3, r5, #8192	; 0x2000
  4076f4:	425f      	negs	r7, r3
  4076f6:	415f      	adcs	r7, r3
  4076f8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  4076fc:	d10b      	bne.n	407716 <__smakebuf_r+0x6e>
  4076fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  407700:	4a1d      	ldr	r2, [pc, #116]	; (407778 <__smakebuf_r+0xd0>)
  407702:	4291      	cmp	r1, r2
  407704:	d107      	bne.n	407716 <__smakebuf_r+0x6e>
  407706:	89a3      	ldrh	r3, [r4, #12]
  407708:	f44f 6580 	mov.w	r5, #1024	; 0x400
  40770c:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
  407710:	81a1      	strh	r1, [r4, #12]
  407712:	64e5      	str	r5, [r4, #76]	; 0x4c
  407714:	e005      	b.n	407722 <__smakebuf_r+0x7a>
  407716:	89a0      	ldrh	r0, [r4, #12]
  407718:	f440 6500 	orr.w	r5, r0, #2048	; 0x800
  40771c:	81a5      	strh	r5, [r4, #12]
  40771e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  407722:	4630      	mov	r0, r6
  407724:	4629      	mov	r1, r5
  407726:	f000 f83b 	bl	4077a0 <_malloc_r>
  40772a:	b970      	cbnz	r0, 40774a <__smakebuf_r+0xa2>
  40772c:	89a3      	ldrh	r3, [r4, #12]
  40772e:	f403 7200 	and.w	r2, r3, #512	; 0x200
  407732:	b210      	sxth	r0, r2
  407734:	b9e8      	cbnz	r0, 407772 <__smakebuf_r+0xca>
  407736:	f043 0102 	orr.w	r1, r3, #2
  40773a:	81a1      	strh	r1, [r4, #12]
  40773c:	f104 0343 	add.w	r3, r4, #67	; 0x43
  407740:	2201      	movs	r2, #1
  407742:	6023      	str	r3, [r4, #0]
  407744:	6123      	str	r3, [r4, #16]
  407746:	6162      	str	r2, [r4, #20]
  407748:	e013      	b.n	407772 <__smakebuf_r+0xca>
  40774a:	89a2      	ldrh	r2, [r4, #12]
  40774c:	490b      	ldr	r1, [pc, #44]	; (40777c <__smakebuf_r+0xd4>)
  40774e:	f042 0380 	orr.w	r3, r2, #128	; 0x80
  407752:	63f1      	str	r1, [r6, #60]	; 0x3c
  407754:	81a3      	strh	r3, [r4, #12]
  407756:	6020      	str	r0, [r4, #0]
  407758:	6120      	str	r0, [r4, #16]
  40775a:	6165      	str	r5, [r4, #20]
  40775c:	b14f      	cbz	r7, 407772 <__smakebuf_r+0xca>
  40775e:	4630      	mov	r0, r6
  407760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407764:	f000 fd58 	bl	408218 <_isatty_r>
  407768:	b118      	cbz	r0, 407772 <__smakebuf_r+0xca>
  40776a:	89a0      	ldrh	r0, [r4, #12]
  40776c:	f040 0101 	orr.w	r1, r0, #1
  407770:	81a1      	strh	r1, [r4, #12]
  407772:	b011      	add	sp, #68	; 0x44
  407774:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407776:	bf00      	nop
  407778:	00407f6b 	.word	0x00407f6b
  40777c:	00406e71 	.word	0x00406e71

00407780 <malloc>:
  407780:	4b02      	ldr	r3, [pc, #8]	; (40778c <malloc+0xc>)
  407782:	4601      	mov	r1, r0
  407784:	6818      	ldr	r0, [r3, #0]
  407786:	f000 b80b 	b.w	4077a0 <_malloc_r>
  40778a:	bf00      	nop
  40778c:	20000040 	.word	0x20000040

00407790 <free>:
  407790:	4b02      	ldr	r3, [pc, #8]	; (40779c <free+0xc>)
  407792:	4601      	mov	r1, r0
  407794:	6818      	ldr	r0, [r3, #0]
  407796:	f7ff bcef 	b.w	407178 <_free_r>
  40779a:	bf00      	nop
  40779c:	20000040 	.word	0x20000040

004077a0 <_malloc_r>:
  4077a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4077a4:	f101 040b 	add.w	r4, r1, #11
  4077a8:	2c16      	cmp	r4, #22
  4077aa:	4606      	mov	r6, r0
  4077ac:	d903      	bls.n	4077b6 <_malloc_r+0x16>
  4077ae:	f034 0407 	bics.w	r4, r4, #7
  4077b2:	d501      	bpl.n	4077b8 <_malloc_r+0x18>
  4077b4:	e002      	b.n	4077bc <_malloc_r+0x1c>
  4077b6:	2410      	movs	r4, #16
  4077b8:	428c      	cmp	r4, r1
  4077ba:	d202      	bcs.n	4077c2 <_malloc_r+0x22>
  4077bc:	250c      	movs	r5, #12
  4077be:	6035      	str	r5, [r6, #0]
  4077c0:	e1d9      	b.n	407b76 <_malloc_r+0x3d6>
  4077c2:	4630      	mov	r0, r6
  4077c4:	f000 fa1f 	bl	407c06 <__malloc_lock>
  4077c8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  4077cc:	d214      	bcs.n	4077f8 <_malloc_r+0x58>
  4077ce:	4da0      	ldr	r5, [pc, #640]	; (407a50 <_malloc_r+0x2b0>)
  4077d0:	08e1      	lsrs	r1, r4, #3
  4077d2:	eb05 00c1 	add.w	r0, r5, r1, lsl #3
  4077d6:	68c5      	ldr	r5, [r0, #12]
  4077d8:	4285      	cmp	r5, r0
  4077da:	d105      	bne.n	4077e8 <_malloc_r+0x48>
  4077dc:	f105 0308 	add.w	r3, r5, #8
  4077e0:	696d      	ldr	r5, [r5, #20]
  4077e2:	1c8a      	adds	r2, r1, #2
  4077e4:	429d      	cmp	r5, r3
  4077e6:	d044      	beq.n	407872 <_malloc_r+0xd2>
  4077e8:	68e8      	ldr	r0, [r5, #12]
  4077ea:	68a9      	ldr	r1, [r5, #8]
  4077ec:	686a      	ldr	r2, [r5, #4]
  4077ee:	60c8      	str	r0, [r1, #12]
  4077f0:	f022 0303 	bic.w	r3, r2, #3
  4077f4:	6081      	str	r1, [r0, #8]
  4077f6:	e059      	b.n	4078ac <_malloc_r+0x10c>
  4077f8:	0a62      	lsrs	r2, r4, #9
  4077fa:	d101      	bne.n	407800 <_malloc_r+0x60>
  4077fc:	08e2      	lsrs	r2, r4, #3
  4077fe:	e01b      	b.n	407838 <_malloc_r+0x98>
  407800:	2a04      	cmp	r2, #4
  407802:	d802      	bhi.n	40780a <_malloc_r+0x6a>
  407804:	09a2      	lsrs	r2, r4, #6
  407806:	3238      	adds	r2, #56	; 0x38
  407808:	e016      	b.n	407838 <_malloc_r+0x98>
  40780a:	2a14      	cmp	r2, #20
  40780c:	d801      	bhi.n	407812 <_malloc_r+0x72>
  40780e:	325b      	adds	r2, #91	; 0x5b
  407810:	e012      	b.n	407838 <_malloc_r+0x98>
  407812:	2a54      	cmp	r2, #84	; 0x54
  407814:	d802      	bhi.n	40781c <_malloc_r+0x7c>
  407816:	0b22      	lsrs	r2, r4, #12
  407818:	326e      	adds	r2, #110	; 0x6e
  40781a:	e00d      	b.n	407838 <_malloc_r+0x98>
  40781c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407820:	d802      	bhi.n	407828 <_malloc_r+0x88>
  407822:	0be2      	lsrs	r2, r4, #15
  407824:	3277      	adds	r2, #119	; 0x77
  407826:	e007      	b.n	407838 <_malloc_r+0x98>
  407828:	f240 5354 	movw	r3, #1364	; 0x554
  40782c:	429a      	cmp	r2, r3
  40782e:	d802      	bhi.n	407836 <_malloc_r+0x96>
  407830:	0ca2      	lsrs	r2, r4, #18
  407832:	327c      	adds	r2, #124	; 0x7c
  407834:	e000      	b.n	407838 <_malloc_r+0x98>
  407836:	227e      	movs	r2, #126	; 0x7e
  407838:	4885      	ldr	r0, [pc, #532]	; (407a50 <_malloc_r+0x2b0>)
  40783a:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
  40783e:	68dd      	ldr	r5, [r3, #12]
  407840:	429d      	cmp	r5, r3
  407842:	d015      	beq.n	407870 <_malloc_r+0xd0>
  407844:	6869      	ldr	r1, [r5, #4]
  407846:	f021 0103 	bic.w	r1, r1, #3
  40784a:	1b08      	subs	r0, r1, r4
  40784c:	280f      	cmp	r0, #15
  40784e:	dd01      	ble.n	407854 <_malloc_r+0xb4>
  407850:	3a01      	subs	r2, #1
  407852:	e00d      	b.n	407870 <_malloc_r+0xd0>
  407854:	2800      	cmp	r0, #0
  407856:	db09      	blt.n	40786c <_malloc_r+0xcc>
  407858:	68eb      	ldr	r3, [r5, #12]
  40785a:	68aa      	ldr	r2, [r5, #8]
  40785c:	60d3      	str	r3, [r2, #12]
  40785e:	609a      	str	r2, [r3, #8]
  407860:	186b      	adds	r3, r5, r1
  407862:	685a      	ldr	r2, [r3, #4]
  407864:	f042 0001 	orr.w	r0, r2, #1
  407868:	6058      	str	r0, [r3, #4]
  40786a:	e190      	b.n	407b8e <_malloc_r+0x3ee>
  40786c:	68ed      	ldr	r5, [r5, #12]
  40786e:	e7e7      	b.n	407840 <_malloc_r+0xa0>
  407870:	3201      	adds	r2, #1
  407872:	4977      	ldr	r1, [pc, #476]	; (407a50 <_malloc_r+0x2b0>)
  407874:	690d      	ldr	r5, [r1, #16]
  407876:	f101 0708 	add.w	r7, r1, #8
  40787a:	42bd      	cmp	r5, r7
  40787c:	d068      	beq.n	407950 <_malloc_r+0x1b0>
  40787e:	6868      	ldr	r0, [r5, #4]
  407880:	f020 0303 	bic.w	r3, r0, #3
  407884:	1b18      	subs	r0, r3, r4
  407886:	280f      	cmp	r0, #15
  407888:	dd0c      	ble.n	4078a4 <_malloc_r+0x104>
  40788a:	192b      	adds	r3, r5, r4
  40788c:	614b      	str	r3, [r1, #20]
  40788e:	610b      	str	r3, [r1, #16]
  407890:	f044 0401 	orr.w	r4, r4, #1
  407894:	f040 0101 	orr.w	r1, r0, #1
  407898:	606c      	str	r4, [r5, #4]
  40789a:	60df      	str	r7, [r3, #12]
  40789c:	609f      	str	r7, [r3, #8]
  40789e:	6059      	str	r1, [r3, #4]
  4078a0:	5018      	str	r0, [r3, r0]
  4078a2:	e174      	b.n	407b8e <_malloc_r+0x3ee>
  4078a4:	2800      	cmp	r0, #0
  4078a6:	614f      	str	r7, [r1, #20]
  4078a8:	610f      	str	r7, [r1, #16]
  4078aa:	db01      	blt.n	4078b0 <_malloc_r+0x110>
  4078ac:	18eb      	adds	r3, r5, r3
  4078ae:	e7d8      	b.n	407862 <_malloc_r+0xc2>
  4078b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4078b4:	d20f      	bcs.n	4078d6 <_malloc_r+0x136>
  4078b6:	08db      	lsrs	r3, r3, #3
  4078b8:	1098      	asrs	r0, r3, #2
  4078ba:	2701      	movs	r7, #1
  4078bc:	fa07 f700 	lsl.w	r7, r7, r0
  4078c0:	6848      	ldr	r0, [r1, #4]
  4078c2:	4307      	orrs	r7, r0
  4078c4:	604f      	str	r7, [r1, #4]
  4078c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4078ca:	60e9      	str	r1, [r5, #12]
  4078cc:	688b      	ldr	r3, [r1, #8]
  4078ce:	60ab      	str	r3, [r5, #8]
  4078d0:	60dd      	str	r5, [r3, #12]
  4078d2:	608d      	str	r5, [r1, #8]
  4078d4:	e03c      	b.n	407950 <_malloc_r+0x1b0>
  4078d6:	0a58      	lsrs	r0, r3, #9
  4078d8:	2804      	cmp	r0, #4
  4078da:	d802      	bhi.n	4078e2 <_malloc_r+0x142>
  4078dc:	0998      	lsrs	r0, r3, #6
  4078de:	3038      	adds	r0, #56	; 0x38
  4078e0:	e016      	b.n	407910 <_malloc_r+0x170>
  4078e2:	2814      	cmp	r0, #20
  4078e4:	d801      	bhi.n	4078ea <_malloc_r+0x14a>
  4078e6:	305b      	adds	r0, #91	; 0x5b
  4078e8:	e012      	b.n	407910 <_malloc_r+0x170>
  4078ea:	2854      	cmp	r0, #84	; 0x54
  4078ec:	d802      	bhi.n	4078f4 <_malloc_r+0x154>
  4078ee:	0b18      	lsrs	r0, r3, #12
  4078f0:	306e      	adds	r0, #110	; 0x6e
  4078f2:	e00d      	b.n	407910 <_malloc_r+0x170>
  4078f4:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4078f8:	d802      	bhi.n	407900 <_malloc_r+0x160>
  4078fa:	0bd8      	lsrs	r0, r3, #15
  4078fc:	3077      	adds	r0, #119	; 0x77
  4078fe:	e007      	b.n	407910 <_malloc_r+0x170>
  407900:	f240 5754 	movw	r7, #1364	; 0x554
  407904:	42b8      	cmp	r0, r7
  407906:	d802      	bhi.n	40790e <_malloc_r+0x16e>
  407908:	0c98      	lsrs	r0, r3, #18
  40790a:	307c      	adds	r0, #124	; 0x7c
  40790c:	e000      	b.n	407910 <_malloc_r+0x170>
  40790e:	207e      	movs	r0, #126	; 0x7e
  407910:	f8df e13c 	ldr.w	lr, [pc, #316]	; 407a50 <_malloc_r+0x2b0>
  407914:	eb0e 07c0 	add.w	r7, lr, r0, lsl #3
  407918:	68b9      	ldr	r1, [r7, #8]
  40791a:	42b9      	cmp	r1, r7
  40791c:	d10e      	bne.n	40793c <_malloc_r+0x19c>
  40791e:	1087      	asrs	r7, r0, #2
  407920:	2301      	movs	r3, #1
  407922:	fa03 f007 	lsl.w	r0, r3, r7
  407926:	f8de 7004 	ldr.w	r7, [lr, #4]
  40792a:	ea40 0307 	orr.w	r3, r0, r7
  40792e:	f8ce 3004 	str.w	r3, [lr, #4]
  407932:	4608      	mov	r0, r1
  407934:	e008      	b.n	407948 <_malloc_r+0x1a8>
  407936:	6889      	ldr	r1, [r1, #8]
  407938:	42b9      	cmp	r1, r7
  40793a:	d004      	beq.n	407946 <_malloc_r+0x1a6>
  40793c:	6848      	ldr	r0, [r1, #4]
  40793e:	f020 0003 	bic.w	r0, r0, #3
  407942:	4283      	cmp	r3, r0
  407944:	d3f7      	bcc.n	407936 <_malloc_r+0x196>
  407946:	68c8      	ldr	r0, [r1, #12]
  407948:	60e8      	str	r0, [r5, #12]
  40794a:	60a9      	str	r1, [r5, #8]
  40794c:	60cd      	str	r5, [r1, #12]
  40794e:	6085      	str	r5, [r0, #8]
  407950:	4f3f      	ldr	r7, [pc, #252]	; (407a50 <_malloc_r+0x2b0>)
  407952:	1095      	asrs	r5, r2, #2
  407954:	2001      	movs	r0, #1
  407956:	6879      	ldr	r1, [r7, #4]
  407958:	fa00 f305 	lsl.w	r3, r0, r5
  40795c:	428b      	cmp	r3, r1
  40795e:	d85d      	bhi.n	407a1c <_malloc_r+0x27c>
  407960:	420b      	tst	r3, r1
  407962:	d105      	bne.n	407970 <_malloc_r+0x1d0>
  407964:	f022 0203 	bic.w	r2, r2, #3
  407968:	005b      	lsls	r3, r3, #1
  40796a:	3204      	adds	r2, #4
  40796c:	420b      	tst	r3, r1
  40796e:	d0fb      	beq.n	407968 <_malloc_r+0x1c8>
  407970:	4d37      	ldr	r5, [pc, #220]	; (407a50 <_malloc_r+0x2b0>)
  407972:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
  407976:	4677      	mov	r7, lr
  407978:	4610      	mov	r0, r2
  40797a:	68fd      	ldr	r5, [r7, #12]
  40797c:	42bd      	cmp	r5, r7
  40797e:	d02d      	beq.n	4079dc <_malloc_r+0x23c>
  407980:	6869      	ldr	r1, [r5, #4]
  407982:	f021 0c03 	bic.w	ip, r1, #3
  407986:	ebc4 010c 	rsb	r1, r4, ip
  40798a:	290f      	cmp	r1, #15
  40798c:	dd13      	ble.n	4079b6 <_malloc_r+0x216>
  40798e:	192b      	adds	r3, r5, r4
  407990:	f044 0401 	orr.w	r4, r4, #1
  407994:	68ea      	ldr	r2, [r5, #12]
  407996:	606c      	str	r4, [r5, #4]
  407998:	f855 0f08 	ldr.w	r0, [r5, #8]!
  40799c:	5059      	str	r1, [r3, r1]
  40799e:	60c2      	str	r2, [r0, #12]
  4079a0:	6090      	str	r0, [r2, #8]
  4079a2:	4a2b      	ldr	r2, [pc, #172]	; (407a50 <_malloc_r+0x2b0>)
  4079a4:	f041 0001 	orr.w	r0, r1, #1
  4079a8:	6153      	str	r3, [r2, #20]
  4079aa:	6113      	str	r3, [r2, #16]
  4079ac:	3208      	adds	r2, #8
  4079ae:	60da      	str	r2, [r3, #12]
  4079b0:	609a      	str	r2, [r3, #8]
  4079b2:	6058      	str	r0, [r3, #4]
  4079b4:	e00c      	b.n	4079d0 <_malloc_r+0x230>
  4079b6:	2900      	cmp	r1, #0
  4079b8:	db0e      	blt.n	4079d8 <_malloc_r+0x238>
  4079ba:	eb05 000c 	add.w	r0, r5, ip
  4079be:	68e9      	ldr	r1, [r5, #12]
  4079c0:	6842      	ldr	r2, [r0, #4]
  4079c2:	f042 0301 	orr.w	r3, r2, #1
  4079c6:	6043      	str	r3, [r0, #4]
  4079c8:	f855 0f08 	ldr.w	r0, [r5, #8]!
  4079cc:	60c1      	str	r1, [r0, #12]
  4079ce:	6088      	str	r0, [r1, #8]
  4079d0:	4630      	mov	r0, r6
  4079d2:	f000 f919 	bl	407c08 <__malloc_unlock>
  4079d6:	e0de      	b.n	407b96 <_malloc_r+0x3f6>
  4079d8:	68ed      	ldr	r5, [r5, #12]
  4079da:	e7cf      	b.n	40797c <_malloc_r+0x1dc>
  4079dc:	3001      	adds	r0, #1
  4079de:	0781      	lsls	r1, r0, #30
  4079e0:	f105 0708 	add.w	r7, r5, #8
  4079e4:	d1c9      	bne.n	40797a <_malloc_r+0x1da>
  4079e6:	4671      	mov	r1, lr
  4079e8:	0795      	lsls	r5, r2, #30
  4079ea:	d105      	bne.n	4079f8 <_malloc_r+0x258>
  4079ec:	4a18      	ldr	r2, [pc, #96]	; (407a50 <_malloc_r+0x2b0>)
  4079ee:	6855      	ldr	r5, [r2, #4]
  4079f0:	ea25 0503 	bic.w	r5, r5, r3
  4079f4:	6055      	str	r5, [r2, #4]
  4079f6:	e005      	b.n	407a04 <_malloc_r+0x264>
  4079f8:	f1a1 0708 	sub.w	r7, r1, #8
  4079fc:	6809      	ldr	r1, [r1, #0]
  4079fe:	3a01      	subs	r2, #1
  407a00:	42b9      	cmp	r1, r7
  407a02:	d0f1      	beq.n	4079e8 <_malloc_r+0x248>
  407a04:	4f12      	ldr	r7, [pc, #72]	; (407a50 <_malloc_r+0x2b0>)
  407a06:	687f      	ldr	r7, [r7, #4]
  407a08:	005b      	lsls	r3, r3, #1
  407a0a:	42bb      	cmp	r3, r7
  407a0c:	d806      	bhi.n	407a1c <_malloc_r+0x27c>
  407a0e:	b12b      	cbz	r3, 407a1c <_malloc_r+0x27c>
  407a10:	4602      	mov	r2, r0
  407a12:	423b      	tst	r3, r7
  407a14:	d1ac      	bne.n	407970 <_malloc_r+0x1d0>
  407a16:	3204      	adds	r2, #4
  407a18:	005b      	lsls	r3, r3, #1
  407a1a:	e7fa      	b.n	407a12 <_malloc_r+0x272>
  407a1c:	4b0c      	ldr	r3, [pc, #48]	; (407a50 <_malloc_r+0x2b0>)
  407a1e:	689f      	ldr	r7, [r3, #8]
  407a20:	6878      	ldr	r0, [r7, #4]
  407a22:	f020 0903 	bic.w	r9, r0, #3
  407a26:	45a1      	cmp	r9, r4
  407a28:	4619      	mov	r1, r3
  407a2a:	d304      	bcc.n	407a36 <_malloc_r+0x296>
  407a2c:	ebc4 0009 	rsb	r0, r4, r9
  407a30:	280f      	cmp	r0, #15
  407a32:	f300 80a2 	bgt.w	407b7a <_malloc_r+0x3da>
  407a36:	4a07      	ldr	r2, [pc, #28]	; (407a54 <_malloc_r+0x2b4>)
  407a38:	f8d1 3408 	ldr.w	r3, [r1, #1032]	; 0x408
  407a3c:	6815      	ldr	r5, [r2, #0]
  407a3e:	3301      	adds	r3, #1
  407a40:	eb07 0a09 	add.w	sl, r7, r9
  407a44:	eb04 0805 	add.w	r8, r4, r5
  407a48:	d106      	bne.n	407a58 <_malloc_r+0x2b8>
  407a4a:	f108 0810 	add.w	r8, r8, #16
  407a4e:	e00b      	b.n	407a68 <_malloc_r+0x2c8>
  407a50:	200004ec 	.word	0x200004ec
  407a54:	20000d94 	.word	0x20000d94
  407a58:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
  407a5c:	f100 010f 	add.w	r1, r0, #15
  407a60:	f421 627f 	bic.w	r2, r1, #4080	; 0xff0
  407a64:	f022 080f 	bic.w	r8, r2, #15
  407a68:	4630      	mov	r0, r6
  407a6a:	4641      	mov	r1, r8
  407a6c:	f000 fa3c 	bl	407ee8 <_sbrk_r>
  407a70:	1c42      	adds	r2, r0, #1
  407a72:	4605      	mov	r5, r0
  407a74:	d071      	beq.n	407b5a <_malloc_r+0x3ba>
  407a76:	4550      	cmp	r0, sl
  407a78:	d202      	bcs.n	407a80 <_malloc_r+0x2e0>
  407a7a:	4b48      	ldr	r3, [pc, #288]	; (407b9c <_malloc_r+0x3fc>)
  407a7c:	429f      	cmp	r7, r3
  407a7e:	d16c      	bne.n	407b5a <_malloc_r+0x3ba>
  407a80:	4847      	ldr	r0, [pc, #284]	; (407ba0 <_malloc_r+0x400>)
  407a82:	4a46      	ldr	r2, [pc, #280]	; (407b9c <_malloc_r+0x3fc>)
  407a84:	6841      	ldr	r1, [r0, #4]
  407a86:	4555      	cmp	r5, sl
  407a88:	eb08 0301 	add.w	r3, r8, r1
  407a8c:	6043      	str	r3, [r0, #4]
  407a8e:	d107      	bne.n	407aa0 <_malloc_r+0x300>
  407a90:	0529      	lsls	r1, r5, #20
  407a92:	d105      	bne.n	407aa0 <_malloc_r+0x300>
  407a94:	6895      	ldr	r5, [r2, #8]
  407a96:	44c8      	add	r8, r9
  407a98:	f048 0001 	orr.w	r0, r8, #1
  407a9c:	6068      	str	r0, [r5, #4]
  407a9e:	e051      	b.n	407b44 <_malloc_r+0x3a4>
  407aa0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
  407aa4:	1c42      	adds	r2, r0, #1
  407aa6:	d103      	bne.n	407ab0 <_malloc_r+0x310>
  407aa8:	4a3c      	ldr	r2, [pc, #240]	; (407b9c <_malloc_r+0x3fc>)
  407aaa:	f8c2 5408 	str.w	r5, [r2, #1032]	; 0x408
  407aae:	e005      	b.n	407abc <_malloc_r+0x31c>
  407ab0:	ebca 0a05 	rsb	sl, sl, r5
  407ab4:	eb03 010a 	add.w	r1, r3, sl
  407ab8:	4b39      	ldr	r3, [pc, #228]	; (407ba0 <_malloc_r+0x400>)
  407aba:	6059      	str	r1, [r3, #4]
  407abc:	f015 0007 	ands.w	r0, r5, #7
  407ac0:	bf1c      	itt	ne
  407ac2:	f1c0 0008 	rsbne	r0, r0, #8
  407ac6:	182d      	addne	r5, r5, r0
  407ac8:	eb05 0c08 	add.w	ip, r5, r8
  407acc:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
  407ad0:	ea4f 5e0c 	mov.w	lr, ip, lsl #20
  407ad4:	eba1 581e 	sub.w	r8, r1, lr, lsr #20
  407ad8:	4641      	mov	r1, r8
  407ada:	4630      	mov	r0, r6
  407adc:	f000 fa04 	bl	407ee8 <_sbrk_r>
  407ae0:	4a2f      	ldr	r2, [pc, #188]	; (407ba0 <_malloc_r+0x400>)
  407ae2:	1c43      	adds	r3, r0, #1
  407ae4:	6853      	ldr	r3, [r2, #4]
  407ae6:	bf08      	it	eq
  407ae8:	f04f 0800 	moveq.w	r8, #0
  407aec:	eb08 0103 	add.w	r1, r8, r3
  407af0:	bf08      	it	eq
  407af2:	4628      	moveq	r0, r5
  407af4:	6051      	str	r1, [r2, #4]
  407af6:	1b40      	subs	r0, r0, r5
  407af8:	4a28      	ldr	r2, [pc, #160]	; (407b9c <_malloc_r+0x3fc>)
  407afa:	eb00 0308 	add.w	r3, r0, r8
  407afe:	f043 0101 	orr.w	r1, r3, #1
  407b02:	4297      	cmp	r7, r2
  407b04:	6095      	str	r5, [r2, #8]
  407b06:	6069      	str	r1, [r5, #4]
  407b08:	d01c      	beq.n	407b44 <_malloc_r+0x3a4>
  407b0a:	f1b9 0f0f 	cmp.w	r9, #15
  407b0e:	d802      	bhi.n	407b16 <_malloc_r+0x376>
  407b10:	2201      	movs	r2, #1
  407b12:	606a      	str	r2, [r5, #4]
  407b14:	e021      	b.n	407b5a <_malloc_r+0x3ba>
  407b16:	687d      	ldr	r5, [r7, #4]
  407b18:	f1a9 090c 	sub.w	r9, r9, #12
  407b1c:	f029 0907 	bic.w	r9, r9, #7
  407b20:	eb07 0309 	add.w	r3, r7, r9
  407b24:	f005 0201 	and.w	r2, r5, #1
  407b28:	2105      	movs	r1, #5
  407b2a:	ea49 0002 	orr.w	r0, r9, r2
  407b2e:	f1b9 0f0f 	cmp.w	r9, #15
  407b32:	6078      	str	r0, [r7, #4]
  407b34:	6059      	str	r1, [r3, #4]
  407b36:	6099      	str	r1, [r3, #8]
  407b38:	d904      	bls.n	407b44 <_malloc_r+0x3a4>
  407b3a:	4630      	mov	r0, r6
  407b3c:	f107 0108 	add.w	r1, r7, #8
  407b40:	f7ff fb1a 	bl	407178 <_free_r>
  407b44:	4a16      	ldr	r2, [pc, #88]	; (407ba0 <_malloc_r+0x400>)
  407b46:	6853      	ldr	r3, [r2, #4]
  407b48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  407b4a:	6b15      	ldr	r5, [r2, #48]	; 0x30
  407b4c:	428b      	cmp	r3, r1
  407b4e:	bf88      	it	hi
  407b50:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  407b52:	42ab      	cmp	r3, r5
  407b54:	bf84      	itt	hi
  407b56:	4d12      	ldrhi	r5, [pc, #72]	; (407ba0 <_malloc_r+0x400>)
  407b58:	632b      	strhi	r3, [r5, #48]	; 0x30
  407b5a:	4810      	ldr	r0, [pc, #64]	; (407b9c <_malloc_r+0x3fc>)
  407b5c:	6882      	ldr	r2, [r0, #8]
  407b5e:	6853      	ldr	r3, [r2, #4]
  407b60:	f023 0103 	bic.w	r1, r3, #3
  407b64:	42a1      	cmp	r1, r4
  407b66:	ebc4 0001 	rsb	r0, r4, r1
  407b6a:	d301      	bcc.n	407b70 <_malloc_r+0x3d0>
  407b6c:	280f      	cmp	r0, #15
  407b6e:	dc04      	bgt.n	407b7a <_malloc_r+0x3da>
  407b70:	4630      	mov	r0, r6
  407b72:	f000 f849 	bl	407c08 <__malloc_unlock>
  407b76:	2500      	movs	r5, #0
  407b78:	e00d      	b.n	407b96 <_malloc_r+0x3f6>
  407b7a:	4a08      	ldr	r2, [pc, #32]	; (407b9c <_malloc_r+0x3fc>)
  407b7c:	6895      	ldr	r5, [r2, #8]
  407b7e:	f044 0301 	orr.w	r3, r4, #1
  407b82:	192c      	adds	r4, r5, r4
  407b84:	f040 0101 	orr.w	r1, r0, #1
  407b88:	606b      	str	r3, [r5, #4]
  407b8a:	6094      	str	r4, [r2, #8]
  407b8c:	6061      	str	r1, [r4, #4]
  407b8e:	4630      	mov	r0, r6
  407b90:	f000 f83a 	bl	407c08 <__malloc_unlock>
  407b94:	3508      	adds	r5, #8
  407b96:	4628      	mov	r0, r5
  407b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407b9c:	200004ec 	.word	0x200004ec
  407ba0:	20000d94 	.word	0x20000d94

00407ba4 <memchr>:
  407ba4:	b510      	push	{r4, lr}
  407ba6:	b2c9      	uxtb	r1, r1
  407ba8:	4603      	mov	r3, r0
  407baa:	1882      	adds	r2, r0, r2
  407bac:	4293      	cmp	r3, r2
  407bae:	4618      	mov	r0, r3
  407bb0:	d004      	beq.n	407bbc <memchr+0x18>
  407bb2:	7804      	ldrb	r4, [r0, #0]
  407bb4:	3301      	adds	r3, #1
  407bb6:	428c      	cmp	r4, r1
  407bb8:	d1f8      	bne.n	407bac <memchr+0x8>
  407bba:	e000      	b.n	407bbe <memchr+0x1a>
  407bbc:	2000      	movs	r0, #0
  407bbe:	bd10      	pop	{r4, pc}

00407bc0 <memcpy>:
  407bc0:	b510      	push	{r4, lr}
  407bc2:	2300      	movs	r3, #0
  407bc4:	4293      	cmp	r3, r2
  407bc6:	d003      	beq.n	407bd0 <memcpy+0x10>
  407bc8:	5ccc      	ldrb	r4, [r1, r3]
  407bca:	54c4      	strb	r4, [r0, r3]
  407bcc:	3301      	adds	r3, #1
  407bce:	e7f9      	b.n	407bc4 <memcpy+0x4>
  407bd0:	bd10      	pop	{r4, pc}

00407bd2 <memmove>:
  407bd2:	4281      	cmp	r1, r0
  407bd4:	b570      	push	{r4, r5, r6, lr}
  407bd6:	d20e      	bcs.n	407bf6 <memmove+0x24>
  407bd8:	188c      	adds	r4, r1, r2
  407bda:	42a0      	cmp	r0, r4
  407bdc:	d20b      	bcs.n	407bf6 <memmove+0x24>
  407bde:	1885      	adds	r5, r0, r2
  407be0:	4613      	mov	r3, r2
  407be2:	f113 33ff 	adds.w	r3, r3, #4294967295
  407be6:	d305      	bcc.n	407bf4 <memmove+0x22>
  407be8:	4251      	negs	r1, r2
  407bea:	1866      	adds	r6, r4, r1
  407bec:	1869      	adds	r1, r5, r1
  407bee:	5cf6      	ldrb	r6, [r6, r3]
  407bf0:	54ce      	strb	r6, [r1, r3]
  407bf2:	e7f6      	b.n	407be2 <memmove+0x10>
  407bf4:	bd70      	pop	{r4, r5, r6, pc}
  407bf6:	2300      	movs	r3, #0
  407bf8:	4293      	cmp	r3, r2
  407bfa:	d003      	beq.n	407c04 <memmove+0x32>
  407bfc:	5ccc      	ldrb	r4, [r1, r3]
  407bfe:	54c4      	strb	r4, [r0, r3]
  407c00:	3301      	adds	r3, #1
  407c02:	e7f9      	b.n	407bf8 <memmove+0x26>
  407c04:	bd70      	pop	{r4, r5, r6, pc}

00407c06 <__malloc_lock>:
  407c06:	4770      	bx	lr

00407c08 <__malloc_unlock>:
  407c08:	4770      	bx	lr
	...

00407c0c <_realloc_r>:
  407c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c10:	4681      	mov	r9, r0
  407c12:	4616      	mov	r6, r2
  407c14:	460c      	mov	r4, r1
  407c16:	b921      	cbnz	r1, 407c22 <_realloc_r+0x16>
  407c18:	4611      	mov	r1, r2
  407c1a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407c1e:	f7ff bdbf 	b.w	4077a0 <_malloc_r>
  407c22:	f7ff fff0 	bl	407c06 <__malloc_lock>
  407c26:	f106 070b 	add.w	r7, r6, #11
  407c2a:	f854 5c04 	ldr.w	r5, [r4, #-4]
  407c2e:	2f16      	cmp	r7, #22
  407c30:	f1a4 0b08 	sub.w	fp, r4, #8
  407c34:	f025 0803 	bic.w	r8, r5, #3
  407c38:	d903      	bls.n	407c42 <_realloc_r+0x36>
  407c3a:	f037 0707 	bics.w	r7, r7, #7
  407c3e:	d501      	bpl.n	407c44 <_realloc_r+0x38>
  407c40:	e002      	b.n	407c48 <_realloc_r+0x3c>
  407c42:	2710      	movs	r7, #16
  407c44:	42b7      	cmp	r7, r6
  407c46:	d204      	bcs.n	407c52 <_realloc_r+0x46>
  407c48:	200c      	movs	r0, #12
  407c4a:	f8c9 0000 	str.w	r0, [r9]
  407c4e:	2600      	movs	r6, #0
  407c50:	e145      	b.n	407ede <_realloc_r+0x2d2>
  407c52:	45b8      	cmp	r8, r7
  407c54:	f280 811a 	bge.w	407e8c <_realloc_r+0x280>
  407c58:	4aa2      	ldr	r2, [pc, #648]	; (407ee4 <_realloc_r+0x2d8>)
  407c5a:	6891      	ldr	r1, [r2, #8]
  407c5c:	eb0b 0308 	add.w	r3, fp, r8
  407c60:	428b      	cmp	r3, r1
  407c62:	d006      	beq.n	407c72 <_realloc_r+0x66>
  407c64:	6858      	ldr	r0, [r3, #4]
  407c66:	f020 0201 	bic.w	r2, r0, #1
  407c6a:	1898      	adds	r0, r3, r2
  407c6c:	6842      	ldr	r2, [r0, #4]
  407c6e:	07d0      	lsls	r0, r2, #31
  407c70:	d426      	bmi.n	407cc0 <_realloc_r+0xb4>
  407c72:	685a      	ldr	r2, [r3, #4]
  407c74:	428b      	cmp	r3, r1
  407c76:	f022 0003 	bic.w	r0, r2, #3
  407c7a:	eb00 0a08 	add.w	sl, r0, r8
  407c7e:	d118      	bne.n	407cb2 <_realloc_r+0xa6>
  407c80:	f107 0210 	add.w	r2, r7, #16
  407c84:	4592      	cmp	sl, r2
  407c86:	db1d      	blt.n	407cc4 <_realloc_r+0xb8>
  407c88:	eb0b 0507 	add.w	r5, fp, r7
  407c8c:	ebc7 0a0a 	rsb	sl, r7, sl
  407c90:	f04a 0101 	orr.w	r1, sl, #1
  407c94:	6069      	str	r1, [r5, #4]
  407c96:	f854 2c04 	ldr.w	r2, [r4, #-4]
  407c9a:	4e92      	ldr	r6, [pc, #584]	; (407ee4 <_realloc_r+0x2d8>)
  407c9c:	f002 0301 	and.w	r3, r2, #1
  407ca0:	431f      	orrs	r7, r3
  407ca2:	60b5      	str	r5, [r6, #8]
  407ca4:	f844 7c04 	str.w	r7, [r4, #-4]
  407ca8:	4648      	mov	r0, r9
  407caa:	f7ff ffad 	bl	407c08 <__malloc_unlock>
  407cae:	4626      	mov	r6, r4
  407cb0:	e115      	b.n	407ede <_realloc_r+0x2d2>
  407cb2:	45ba      	cmp	sl, r7
  407cb4:	db06      	blt.n	407cc4 <_realloc_r+0xb8>
  407cb6:	68dd      	ldr	r5, [r3, #12]
  407cb8:	689e      	ldr	r6, [r3, #8]
  407cba:	60f5      	str	r5, [r6, #12]
  407cbc:	60ae      	str	r6, [r5, #8]
  407cbe:	e0e6      	b.n	407e8e <_realloc_r+0x282>
  407cc0:	2000      	movs	r0, #0
  407cc2:	4603      	mov	r3, r0
  407cc4:	07ea      	lsls	r2, r5, #31
  407cc6:	f100 8091 	bmi.w	407dec <_realloc_r+0x1e0>
  407cca:	f854 5c08 	ldr.w	r5, [r4, #-8]
  407cce:	ebc5 050b 	rsb	r5, r5, fp
  407cd2:	686a      	ldr	r2, [r5, #4]
  407cd4:	f022 0203 	bic.w	r2, r2, #3
  407cd8:	2b00      	cmp	r3, #0
  407cda:	d051      	beq.n	407d80 <_realloc_r+0x174>
  407cdc:	eb02 0a08 	add.w	sl, r2, r8
  407ce0:	428b      	cmp	r3, r1
  407ce2:	4482      	add	sl, r0
  407ce4:	d145      	bne.n	407d72 <_realloc_r+0x166>
  407ce6:	f107 0310 	add.w	r3, r7, #16
  407cea:	459a      	cmp	sl, r3
  407cec:	db48      	blt.n	407d80 <_realloc_r+0x174>
  407cee:	462e      	mov	r6, r5
  407cf0:	68e9      	ldr	r1, [r5, #12]
  407cf2:	f856 3f08 	ldr.w	r3, [r6, #8]!
  407cf6:	f1a8 0204 	sub.w	r2, r8, #4
  407cfa:	2a24      	cmp	r2, #36	; 0x24
  407cfc:	60d9      	str	r1, [r3, #12]
  407cfe:	608b      	str	r3, [r1, #8]
  407d00:	d825      	bhi.n	407d4e <_realloc_r+0x142>
  407d02:	2a13      	cmp	r2, #19
  407d04:	d91b      	bls.n	407d3e <_realloc_r+0x132>
  407d06:	6821      	ldr	r1, [r4, #0]
  407d08:	60a9      	str	r1, [r5, #8]
  407d0a:	6863      	ldr	r3, [r4, #4]
  407d0c:	2a1b      	cmp	r2, #27
  407d0e:	60eb      	str	r3, [r5, #12]
  407d10:	d803      	bhi.n	407d1a <_realloc_r+0x10e>
  407d12:	f105 0010 	add.w	r0, r5, #16
  407d16:	3408      	adds	r4, #8
  407d18:	e012      	b.n	407d40 <_realloc_r+0x134>
  407d1a:	68a0      	ldr	r0, [r4, #8]
  407d1c:	6128      	str	r0, [r5, #16]
  407d1e:	68e1      	ldr	r1, [r4, #12]
  407d20:	2a24      	cmp	r2, #36	; 0x24
  407d22:	6169      	str	r1, [r5, #20]
  407d24:	d003      	beq.n	407d2e <_realloc_r+0x122>
  407d26:	f105 0018 	add.w	r0, r5, #24
  407d2a:	3410      	adds	r4, #16
  407d2c:	e008      	b.n	407d40 <_realloc_r+0x134>
  407d2e:	6922      	ldr	r2, [r4, #16]
  407d30:	61aa      	str	r2, [r5, #24]
  407d32:	6963      	ldr	r3, [r4, #20]
  407d34:	f105 0020 	add.w	r0, r5, #32
  407d38:	61eb      	str	r3, [r5, #28]
  407d3a:	3418      	adds	r4, #24
  407d3c:	e000      	b.n	407d40 <_realloc_r+0x134>
  407d3e:	4630      	mov	r0, r6
  407d40:	6821      	ldr	r1, [r4, #0]
  407d42:	6001      	str	r1, [r0, #0]
  407d44:	6862      	ldr	r2, [r4, #4]
  407d46:	6042      	str	r2, [r0, #4]
  407d48:	68a3      	ldr	r3, [r4, #8]
  407d4a:	6083      	str	r3, [r0, #8]
  407d4c:	e003      	b.n	407d56 <_realloc_r+0x14a>
  407d4e:	4630      	mov	r0, r6
  407d50:	4621      	mov	r1, r4
  407d52:	f7ff ff3e 	bl	407bd2 <memmove>
  407d56:	19e8      	adds	r0, r5, r7
  407d58:	ebc7 0a0a 	rsb	sl, r7, sl
  407d5c:	f04a 0201 	orr.w	r2, sl, #1
  407d60:	6042      	str	r2, [r0, #4]
  407d62:	686b      	ldr	r3, [r5, #4]
  407d64:	495f      	ldr	r1, [pc, #380]	; (407ee4 <_realloc_r+0x2d8>)
  407d66:	6088      	str	r0, [r1, #8]
  407d68:	f003 0001 	and.w	r0, r3, #1
  407d6c:	4307      	orrs	r7, r0
  407d6e:	606f      	str	r7, [r5, #4]
  407d70:	e088      	b.n	407e84 <_realloc_r+0x278>
  407d72:	45ba      	cmp	sl, r7
  407d74:	db04      	blt.n	407d80 <_realloc_r+0x174>
  407d76:	68d9      	ldr	r1, [r3, #12]
  407d78:	6898      	ldr	r0, [r3, #8]
  407d7a:	60c1      	str	r1, [r0, #12]
  407d7c:	6088      	str	r0, [r1, #8]
  407d7e:	e003      	b.n	407d88 <_realloc_r+0x17c>
  407d80:	eb02 0a08 	add.w	sl, r2, r8
  407d84:	45ba      	cmp	sl, r7
  407d86:	db31      	blt.n	407dec <_realloc_r+0x1e0>
  407d88:	4628      	mov	r0, r5
  407d8a:	68eb      	ldr	r3, [r5, #12]
  407d8c:	f850 1f08 	ldr.w	r1, [r0, #8]!
  407d90:	f1a8 0204 	sub.w	r2, r8, #4
  407d94:	2a24      	cmp	r2, #36	; 0x24
  407d96:	60cb      	str	r3, [r1, #12]
  407d98:	6099      	str	r1, [r3, #8]
  407d9a:	d823      	bhi.n	407de4 <_realloc_r+0x1d8>
  407d9c:	2a13      	cmp	r2, #19
  407d9e:	d91a      	bls.n	407dd6 <_realloc_r+0x1ca>
  407da0:	6820      	ldr	r0, [r4, #0]
  407da2:	60a8      	str	r0, [r5, #8]
  407da4:	6866      	ldr	r6, [r4, #4]
  407da6:	2a1b      	cmp	r2, #27
  407da8:	60ee      	str	r6, [r5, #12]
  407daa:	d803      	bhi.n	407db4 <_realloc_r+0x1a8>
  407dac:	f105 0010 	add.w	r0, r5, #16
  407db0:	3408      	adds	r4, #8
  407db2:	e010      	b.n	407dd6 <_realloc_r+0x1ca>
  407db4:	68a3      	ldr	r3, [r4, #8]
  407db6:	612b      	str	r3, [r5, #16]
  407db8:	68e1      	ldr	r1, [r4, #12]
  407dba:	2a24      	cmp	r2, #36	; 0x24
  407dbc:	6169      	str	r1, [r5, #20]
  407dbe:	d003      	beq.n	407dc8 <_realloc_r+0x1bc>
  407dc0:	f105 0018 	add.w	r0, r5, #24
  407dc4:	3410      	adds	r4, #16
  407dc6:	e006      	b.n	407dd6 <_realloc_r+0x1ca>
  407dc8:	6922      	ldr	r2, [r4, #16]
  407dca:	61aa      	str	r2, [r5, #24]
  407dcc:	6960      	ldr	r0, [r4, #20]
  407dce:	3418      	adds	r4, #24
  407dd0:	61e8      	str	r0, [r5, #28]
  407dd2:	f105 0020 	add.w	r0, r5, #32
  407dd6:	6826      	ldr	r6, [r4, #0]
  407dd8:	6006      	str	r6, [r0, #0]
  407dda:	6863      	ldr	r3, [r4, #4]
  407ddc:	6043      	str	r3, [r0, #4]
  407dde:	68a1      	ldr	r1, [r4, #8]
  407de0:	6081      	str	r1, [r0, #8]
  407de2:	e055      	b.n	407e90 <_realloc_r+0x284>
  407de4:	4621      	mov	r1, r4
  407de6:	f7ff fef4 	bl	407bd2 <memmove>
  407dea:	e051      	b.n	407e90 <_realloc_r+0x284>
  407dec:	4631      	mov	r1, r6
  407dee:	4648      	mov	r0, r9
  407df0:	f7ff fcd6 	bl	4077a0 <_malloc_r>
  407df4:	4606      	mov	r6, r0
  407df6:	2800      	cmp	r0, #0
  407df8:	d044      	beq.n	407e84 <_realloc_r+0x278>
  407dfa:	f854 1c04 	ldr.w	r1, [r4, #-4]
  407dfe:	f021 0301 	bic.w	r3, r1, #1
  407e02:	f1a0 0208 	sub.w	r2, r0, #8
  407e06:	eb0b 0103 	add.w	r1, fp, r3
  407e0a:	428a      	cmp	r2, r1
  407e0c:	d106      	bne.n	407e1c <_realloc_r+0x210>
  407e0e:	f850 6c04 	ldr.w	r6, [r0, #-4]
  407e12:	f026 0503 	bic.w	r5, r6, #3
  407e16:	eb05 0a08 	add.w	sl, r5, r8
  407e1a:	e038      	b.n	407e8e <_realloc_r+0x282>
  407e1c:	f1a8 0204 	sub.w	r2, r8, #4
  407e20:	2a24      	cmp	r2, #36	; 0x24
  407e22:	d828      	bhi.n	407e76 <_realloc_r+0x26a>
  407e24:	2a13      	cmp	r2, #19
  407e26:	d91e      	bls.n	407e66 <_realloc_r+0x25a>
  407e28:	6823      	ldr	r3, [r4, #0]
  407e2a:	6003      	str	r3, [r0, #0]
  407e2c:	6861      	ldr	r1, [r4, #4]
  407e2e:	2a1b      	cmp	r2, #27
  407e30:	6041      	str	r1, [r0, #4]
  407e32:	d804      	bhi.n	407e3e <_realloc_r+0x232>
  407e34:	f100 0008 	add.w	r0, r0, #8
  407e38:	f104 0208 	add.w	r2, r4, #8
  407e3c:	e014      	b.n	407e68 <_realloc_r+0x25c>
  407e3e:	68a0      	ldr	r0, [r4, #8]
  407e40:	60b0      	str	r0, [r6, #8]
  407e42:	68e3      	ldr	r3, [r4, #12]
  407e44:	2a24      	cmp	r2, #36	; 0x24
  407e46:	60f3      	str	r3, [r6, #12]
  407e48:	d004      	beq.n	407e54 <_realloc_r+0x248>
  407e4a:	f106 0010 	add.w	r0, r6, #16
  407e4e:	f104 0210 	add.w	r2, r4, #16
  407e52:	e009      	b.n	407e68 <_realloc_r+0x25c>
  407e54:	6922      	ldr	r2, [r4, #16]
  407e56:	6132      	str	r2, [r6, #16]
  407e58:	6961      	ldr	r1, [r4, #20]
  407e5a:	f106 0018 	add.w	r0, r6, #24
  407e5e:	6171      	str	r1, [r6, #20]
  407e60:	f104 0218 	add.w	r2, r4, #24
  407e64:	e000      	b.n	407e68 <_realloc_r+0x25c>
  407e66:	4622      	mov	r2, r4
  407e68:	6813      	ldr	r3, [r2, #0]
  407e6a:	6003      	str	r3, [r0, #0]
  407e6c:	6851      	ldr	r1, [r2, #4]
  407e6e:	6041      	str	r1, [r0, #4]
  407e70:	6892      	ldr	r2, [r2, #8]
  407e72:	6082      	str	r2, [r0, #8]
  407e74:	e002      	b.n	407e7c <_realloc_r+0x270>
  407e76:	4621      	mov	r1, r4
  407e78:	f7ff feab 	bl	407bd2 <memmove>
  407e7c:	4648      	mov	r0, r9
  407e7e:	4621      	mov	r1, r4
  407e80:	f7ff f97a 	bl	407178 <_free_r>
  407e84:	4648      	mov	r0, r9
  407e86:	f7ff febf 	bl	407c08 <__malloc_unlock>
  407e8a:	e028      	b.n	407ede <_realloc_r+0x2d2>
  407e8c:	46c2      	mov	sl, r8
  407e8e:	465d      	mov	r5, fp
  407e90:	ebc7 000a 	rsb	r0, r7, sl
  407e94:	280f      	cmp	r0, #15
  407e96:	686a      	ldr	r2, [r5, #4]
  407e98:	d911      	bls.n	407ebe <_realloc_r+0x2b2>
  407e9a:	19e9      	adds	r1, r5, r7
  407e9c:	f002 0601 	and.w	r6, r2, #1
  407ea0:	4337      	orrs	r7, r6
  407ea2:	f040 0301 	orr.w	r3, r0, #1
  407ea6:	1808      	adds	r0, r1, r0
  407ea8:	606f      	str	r7, [r5, #4]
  407eaa:	604b      	str	r3, [r1, #4]
  407eac:	6842      	ldr	r2, [r0, #4]
  407eae:	f042 0601 	orr.w	r6, r2, #1
  407eb2:	6046      	str	r6, [r0, #4]
  407eb4:	3108      	adds	r1, #8
  407eb6:	4648      	mov	r0, r9
  407eb8:	f7ff f95e 	bl	407178 <_free_r>
  407ebc:	e00a      	b.n	407ed4 <_realloc_r+0x2c8>
  407ebe:	f002 0601 	and.w	r6, r2, #1
  407ec2:	eb05 010a 	add.w	r1, r5, sl
  407ec6:	ea4a 0306 	orr.w	r3, sl, r6
  407eca:	606b      	str	r3, [r5, #4]
  407ecc:	6848      	ldr	r0, [r1, #4]
  407ece:	f040 0201 	orr.w	r2, r0, #1
  407ed2:	604a      	str	r2, [r1, #4]
  407ed4:	4648      	mov	r0, r9
  407ed6:	f7ff fe97 	bl	407c08 <__malloc_unlock>
  407eda:	f105 0608 	add.w	r6, r5, #8
  407ede:	4630      	mov	r0, r6
  407ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ee4:	200004ec 	.word	0x200004ec

00407ee8 <_sbrk_r>:
  407ee8:	b538      	push	{r3, r4, r5, lr}
  407eea:	4c06      	ldr	r4, [pc, #24]	; (407f04 <_sbrk_r+0x1c>)
  407eec:	2300      	movs	r3, #0
  407eee:	4605      	mov	r5, r0
  407ef0:	4608      	mov	r0, r1
  407ef2:	6023      	str	r3, [r4, #0]
  407ef4:	f7fb fa94 	bl	403420 <_sbrk>
  407ef8:	1c43      	adds	r3, r0, #1
  407efa:	d102      	bne.n	407f02 <_sbrk_r+0x1a>
  407efc:	6821      	ldr	r1, [r4, #0]
  407efe:	b101      	cbz	r1, 407f02 <_sbrk_r+0x1a>
  407f00:	6029      	str	r1, [r5, #0]
  407f02:	bd38      	pop	{r3, r4, r5, pc}
  407f04:	20000de8 	.word	0x20000de8

00407f08 <__sread>:
  407f08:	b510      	push	{r4, lr}
  407f0a:	460c      	mov	r4, r1
  407f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f10:	f000 f9a4 	bl	40825c <_read_r>
  407f14:	2800      	cmp	r0, #0
  407f16:	db03      	blt.n	407f20 <__sread+0x18>
  407f18:	6d22      	ldr	r2, [r4, #80]	; 0x50
  407f1a:	1813      	adds	r3, r2, r0
  407f1c:	6523      	str	r3, [r4, #80]	; 0x50
  407f1e:	bd10      	pop	{r4, pc}
  407f20:	89a3      	ldrh	r3, [r4, #12]
  407f22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
  407f26:	81a1      	strh	r1, [r4, #12]
  407f28:	bd10      	pop	{r4, pc}

00407f2a <__seofread>:
  407f2a:	2000      	movs	r0, #0
  407f2c:	4770      	bx	lr

00407f2e <__swrite>:
  407f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407f32:	461d      	mov	r5, r3
  407f34:	898b      	ldrh	r3, [r1, #12]
  407f36:	460c      	mov	r4, r1
  407f38:	f403 7180 	and.w	r1, r3, #256	; 0x100
  407f3c:	4616      	mov	r6, r2
  407f3e:	b20a      	sxth	r2, r1
  407f40:	4607      	mov	r7, r0
  407f42:	b12a      	cbz	r2, 407f50 <__swrite+0x22>
  407f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407f48:	2200      	movs	r2, #0
  407f4a:	2302      	movs	r3, #2
  407f4c:	f000 f974 	bl	408238 <_lseek_r>
  407f50:	89a0      	ldrh	r0, [r4, #12]
  407f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407f56:	f420 5380 	bic.w	r3, r0, #4096	; 0x1000
  407f5a:	81a3      	strh	r3, [r4, #12]
  407f5c:	4638      	mov	r0, r7
  407f5e:	4632      	mov	r2, r6
  407f60:	462b      	mov	r3, r5
  407f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407f66:	f000 b8d9 	b.w	40811c <_write_r>

00407f6a <__sseek>:
  407f6a:	b510      	push	{r4, lr}
  407f6c:	460c      	mov	r4, r1
  407f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f72:	f000 f961 	bl	408238 <_lseek_r>
  407f76:	1c43      	adds	r3, r0, #1
  407f78:	89a3      	ldrh	r3, [r4, #12]
  407f7a:	d103      	bne.n	407f84 <__sseek+0x1a>
  407f7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  407f80:	81a2      	strh	r2, [r4, #12]
  407f82:	bd10      	pop	{r4, pc}
  407f84:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
  407f88:	81a1      	strh	r1, [r4, #12]
  407f8a:	6520      	str	r0, [r4, #80]	; 0x50
  407f8c:	bd10      	pop	{r4, pc}

00407f8e <__sclose>:
  407f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f92:	f000 b8d5 	b.w	408140 <_close_r>

00407f96 <strcmp>:
  407f96:	f810 2b01 	ldrb.w	r2, [r0], #1
  407f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
  407f9e:	2a01      	cmp	r2, #1
  407fa0:	bf28      	it	cs
  407fa2:	429a      	cmpcs	r2, r3
  407fa4:	d0f7      	beq.n	407f96 <strcmp>
  407fa6:	eba2 0003 	sub.w	r0, r2, r3
  407faa:	4770      	bx	lr

00407fac <strlen>:
  407fac:	4603      	mov	r3, r0
  407fae:	f813 2b01 	ldrb.w	r2, [r3], #1
  407fb2:	2a00      	cmp	r2, #0
  407fb4:	d1fb      	bne.n	407fae <strlen+0x2>
  407fb6:	1a18      	subs	r0, r3, r0
  407fb8:	3801      	subs	r0, #1
  407fba:	4770      	bx	lr

00407fbc <__swbuf_r>:
  407fbc:	b570      	push	{r4, r5, r6, lr}
  407fbe:	460d      	mov	r5, r1
  407fc0:	4614      	mov	r4, r2
  407fc2:	4606      	mov	r6, r0
  407fc4:	b118      	cbz	r0, 407fce <__swbuf_r+0x12>
  407fc6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407fc8:	b90b      	cbnz	r3, 407fce <__swbuf_r+0x12>
  407fca:	f7fe ff97 	bl	406efc <__sinit>
  407fce:	89a1      	ldrh	r1, [r4, #12]
  407fd0:	69a0      	ldr	r0, [r4, #24]
  407fd2:	f001 0208 	and.w	r2, r1, #8
  407fd6:	b213      	sxth	r3, r2
  407fd8:	60a0      	str	r0, [r4, #8]
  407fda:	b10b      	cbz	r3, 407fe0 <__swbuf_r+0x24>
  407fdc:	6920      	ldr	r0, [r4, #16]
  407fde:	b958      	cbnz	r0, 407ff8 <__swbuf_r+0x3c>
  407fe0:	4630      	mov	r0, r6
  407fe2:	4621      	mov	r1, r4
  407fe4:	f7fe fe2a 	bl	406c3c <__swsetup_r>
  407fe8:	b130      	cbz	r0, 407ff8 <__swbuf_r+0x3c>
  407fea:	89a5      	ldrh	r5, [r4, #12]
  407fec:	2009      	movs	r0, #9
  407fee:	f045 0140 	orr.w	r1, r5, #64	; 0x40
  407ff2:	81a1      	strh	r1, [r4, #12]
  407ff4:	6030      	str	r0, [r6, #0]
  407ff6:	e017      	b.n	408028 <__swbuf_r+0x6c>
  407ff8:	89a1      	ldrh	r1, [r4, #12]
  407ffa:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
  407ffe:	b213      	sxth	r3, r2
  408000:	b2ed      	uxtb	r5, r5
  408002:	b933      	cbnz	r3, 408012 <__swbuf_r+0x56>
  408004:	f441 5000 	orr.w	r0, r1, #8192	; 0x2000
  408008:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40800a:	81a0      	strh	r0, [r4, #12]
  40800c:	f421 5200 	bic.w	r2, r1, #8192	; 0x2000
  408010:	6662      	str	r2, [r4, #100]	; 0x64
  408012:	6820      	ldr	r0, [r4, #0]
  408014:	6923      	ldr	r3, [r4, #16]
  408016:	6961      	ldr	r1, [r4, #20]
  408018:	1ac0      	subs	r0, r0, r3
  40801a:	4288      	cmp	r0, r1
  40801c:	db07      	blt.n	40802e <__swbuf_r+0x72>
  40801e:	4630      	mov	r0, r6
  408020:	4621      	mov	r1, r4
  408022:	f7fe fe77 	bl	406d14 <_fflush_r>
  408026:	b110      	cbz	r0, 40802e <__swbuf_r+0x72>
  408028:	f04f 35ff 	mov.w	r5, #4294967295
  40802c:	e015      	b.n	40805a <__swbuf_r+0x9e>
  40802e:	68a2      	ldr	r2, [r4, #8]
  408030:	6821      	ldr	r1, [r4, #0]
  408032:	1e53      	subs	r3, r2, #1
  408034:	60a3      	str	r3, [r4, #8]
  408036:	f801 5b01 	strb.w	r5, [r1], #1
  40803a:	6962      	ldr	r2, [r4, #20]
  40803c:	6021      	str	r1, [r4, #0]
  40803e:	3001      	adds	r0, #1
  408040:	4290      	cmp	r0, r2
  408042:	d004      	beq.n	40804e <__swbuf_r+0x92>
  408044:	89a3      	ldrh	r3, [r4, #12]
  408046:	07db      	lsls	r3, r3, #31
  408048:	d507      	bpl.n	40805a <__swbuf_r+0x9e>
  40804a:	2d0a      	cmp	r5, #10
  40804c:	d105      	bne.n	40805a <__swbuf_r+0x9e>
  40804e:	4630      	mov	r0, r6
  408050:	4621      	mov	r1, r4
  408052:	f7fe fe5f 	bl	406d14 <_fflush_r>
  408056:	2800      	cmp	r0, #0
  408058:	d1e6      	bne.n	408028 <__swbuf_r+0x6c>
  40805a:	4628      	mov	r0, r5
  40805c:	bd70      	pop	{r4, r5, r6, pc}

0040805e <__swbuf>:
  40805e:	460a      	mov	r2, r1
  408060:	4902      	ldr	r1, [pc, #8]	; (40806c <__swbuf+0xe>)
  408062:	4603      	mov	r3, r0
  408064:	6808      	ldr	r0, [r1, #0]
  408066:	4619      	mov	r1, r3
  408068:	f7ff bfa8 	b.w	407fbc <__swbuf_r>
  40806c:	20000040 	.word	0x20000040

00408070 <_wcrtomb_r>:
  408070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408074:	461d      	mov	r5, r3
  408076:	4b10      	ldr	r3, [pc, #64]	; (4080b8 <_wcrtomb_r+0x48>)
  408078:	b086      	sub	sp, #24
  40807a:	4604      	mov	r4, r0
  40807c:	4690      	mov	r8, r2
  40807e:	460e      	mov	r6, r1
  408080:	681f      	ldr	r7, [r3, #0]
  408082:	b939      	cbnz	r1, 408094 <_wcrtomb_r+0x24>
  408084:	f7ff faee 	bl	407664 <__locale_charset>
  408088:	9500      	str	r5, [sp, #0]
  40808a:	4603      	mov	r3, r0
  40808c:	a903      	add	r1, sp, #12
  40808e:	4620      	mov	r0, r4
  408090:	4632      	mov	r2, r6
  408092:	e006      	b.n	4080a2 <_wcrtomb_r+0x32>
  408094:	f7ff fae6 	bl	407664 <__locale_charset>
  408098:	9500      	str	r5, [sp, #0]
  40809a:	4603      	mov	r3, r0
  40809c:	4631      	mov	r1, r6
  40809e:	4620      	mov	r0, r4
  4080a0:	4642      	mov	r2, r8
  4080a2:	47b8      	blx	r7
  4080a4:	1c43      	adds	r3, r0, #1
  4080a6:	d103      	bne.n	4080b0 <_wcrtomb_r+0x40>
  4080a8:	2100      	movs	r1, #0
  4080aa:	228a      	movs	r2, #138	; 0x8a
  4080ac:	6029      	str	r1, [r5, #0]
  4080ae:	6022      	str	r2, [r4, #0]
  4080b0:	b006      	add	sp, #24
  4080b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4080b6:	bf00      	nop
  4080b8:	200008fc 	.word	0x200008fc

004080bc <wcrtomb>:
  4080bc:	b530      	push	{r4, r5, lr}
  4080be:	4613      	mov	r3, r2
  4080c0:	4a04      	ldr	r2, [pc, #16]	; (4080d4 <wcrtomb+0x18>)
  4080c2:	4605      	mov	r5, r0
  4080c4:	460c      	mov	r4, r1
  4080c6:	6810      	ldr	r0, [r2, #0]
  4080c8:	4629      	mov	r1, r5
  4080ca:	4622      	mov	r2, r4
  4080cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  4080d0:	f7ff bfce 	b.w	408070 <_wcrtomb_r>
  4080d4:	20000040 	.word	0x20000040

004080d8 <__ascii_wctomb>:
  4080d8:	b149      	cbz	r1, 4080ee <__ascii_wctomb+0x16>
  4080da:	2aff      	cmp	r2, #255	; 0xff
  4080dc:	d904      	bls.n	4080e8 <__ascii_wctomb+0x10>
  4080de:	238a      	movs	r3, #138	; 0x8a
  4080e0:	6003      	str	r3, [r0, #0]
  4080e2:	f04f 30ff 	mov.w	r0, #4294967295
  4080e6:	4770      	bx	lr
  4080e8:	700a      	strb	r2, [r1, #0]
  4080ea:	2001      	movs	r0, #1
  4080ec:	4770      	bx	lr
  4080ee:	4608      	mov	r0, r1
  4080f0:	4770      	bx	lr

004080f2 <_wctomb_r>:
  4080f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  4080f6:	4698      	mov	r8, r3
  4080f8:	4b07      	ldr	r3, [pc, #28]	; (408118 <_wctomb_r+0x26>)
  4080fa:	4605      	mov	r5, r0
  4080fc:	460f      	mov	r7, r1
  4080fe:	4616      	mov	r6, r2
  408100:	681c      	ldr	r4, [r3, #0]
  408102:	f7ff faaf 	bl	407664 <__locale_charset>
  408106:	f8cd 8000 	str.w	r8, [sp]
  40810a:	4603      	mov	r3, r0
  40810c:	4639      	mov	r1, r7
  40810e:	4628      	mov	r0, r5
  408110:	4632      	mov	r2, r6
  408112:	47a0      	blx	r4
  408114:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
  408118:	200008fc 	.word	0x200008fc

0040811c <_write_r>:
  40811c:	b538      	push	{r3, r4, r5, lr}
  40811e:	4c07      	ldr	r4, [pc, #28]	; (40813c <_write_r+0x20>)
  408120:	4605      	mov	r5, r0
  408122:	2000      	movs	r0, #0
  408124:	6020      	str	r0, [r4, #0]
  408126:	4608      	mov	r0, r1
  408128:	4611      	mov	r1, r2
  40812a:	461a      	mov	r2, r3
  40812c:	f7f9 f86a 	bl	401204 <_write>
  408130:	1c43      	adds	r3, r0, #1
  408132:	d102      	bne.n	40813a <_write_r+0x1e>
  408134:	6823      	ldr	r3, [r4, #0]
  408136:	b103      	cbz	r3, 40813a <_write_r+0x1e>
  408138:	602b      	str	r3, [r5, #0]
  40813a:	bd38      	pop	{r3, r4, r5, pc}
  40813c:	20000de8 	.word	0x20000de8

00408140 <_close_r>:
  408140:	b538      	push	{r3, r4, r5, lr}
  408142:	4c06      	ldr	r4, [pc, #24]	; (40815c <_close_r+0x1c>)
  408144:	2300      	movs	r3, #0
  408146:	4605      	mov	r5, r0
  408148:	4608      	mov	r0, r1
  40814a:	6023      	str	r3, [r4, #0]
  40814c:	f7fb f98e 	bl	40346c <_close>
  408150:	1c43      	adds	r3, r0, #1
  408152:	d102      	bne.n	40815a <_close_r+0x1a>
  408154:	6821      	ldr	r1, [r4, #0]
  408156:	b101      	cbz	r1, 40815a <_close_r+0x1a>
  408158:	6029      	str	r1, [r5, #0]
  40815a:	bd38      	pop	{r3, r4, r5, pc}
  40815c:	20000de8 	.word	0x20000de8

00408160 <_fclose_r>:
  408160:	b570      	push	{r4, r5, r6, lr}
  408162:	4605      	mov	r5, r0
  408164:	460c      	mov	r4, r1
  408166:	2900      	cmp	r1, #0
  408168:	d039      	beq.n	4081de <_fclose_r+0x7e>
  40816a:	f7fe ff2b 	bl	406fc4 <__sfp_lock_acquire>
  40816e:	b125      	cbz	r5, 40817a <_fclose_r+0x1a>
  408170:	6bab      	ldr	r3, [r5, #56]	; 0x38
  408172:	b913      	cbnz	r3, 40817a <_fclose_r+0x1a>
  408174:	4628      	mov	r0, r5
  408176:	f7fe fec1 	bl	406efc <__sinit>
  40817a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
  40817e:	b35e      	cbz	r6, 4081d8 <_fclose_r+0x78>
  408180:	4628      	mov	r0, r5
  408182:	4621      	mov	r1, r4
  408184:	f7fe fdc6 	bl	406d14 <_fflush_r>
  408188:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40818a:	4606      	mov	r6, r0
  40818c:	b13a      	cbz	r2, 40819e <_fclose_r+0x3e>
  40818e:	4628      	mov	r0, r5
  408190:	69e1      	ldr	r1, [r4, #28]
  408192:	4790      	blx	r2
  408194:	ea36 0620 	bics.w	r6, r6, r0, asr #32
  408198:	bf28      	it	cs
  40819a:	f04f 36ff 	movcs.w	r6, #4294967295
  40819e:	89a0      	ldrh	r0, [r4, #12]
  4081a0:	f000 0180 	and.w	r1, r0, #128	; 0x80
  4081a4:	b20b      	sxth	r3, r1
  4081a6:	b11b      	cbz	r3, 4081b0 <_fclose_r+0x50>
  4081a8:	4628      	mov	r0, r5
  4081aa:	6921      	ldr	r1, [r4, #16]
  4081ac:	f7fe ffe4 	bl	407178 <_free_r>
  4081b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4081b2:	b141      	cbz	r1, 4081c6 <_fclose_r+0x66>
  4081b4:	f104 0240 	add.w	r2, r4, #64	; 0x40
  4081b8:	4291      	cmp	r1, r2
  4081ba:	d002      	beq.n	4081c2 <_fclose_r+0x62>
  4081bc:	4628      	mov	r0, r5
  4081be:	f7fe ffdb 	bl	407178 <_free_r>
  4081c2:	2000      	movs	r0, #0
  4081c4:	6320      	str	r0, [r4, #48]	; 0x30
  4081c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4081c8:	b121      	cbz	r1, 4081d4 <_fclose_r+0x74>
  4081ca:	4628      	mov	r0, r5
  4081cc:	f7fe ffd4 	bl	407178 <_free_r>
  4081d0:	2100      	movs	r1, #0
  4081d2:	6461      	str	r1, [r4, #68]	; 0x44
  4081d4:	2300      	movs	r3, #0
  4081d6:	81a3      	strh	r3, [r4, #12]
  4081d8:	f7fe fef5 	bl	406fc6 <__sfp_lock_release>
  4081dc:	e000      	b.n	4081e0 <_fclose_r+0x80>
  4081de:	460e      	mov	r6, r1
  4081e0:	4630      	mov	r0, r6
  4081e2:	bd70      	pop	{r4, r5, r6, pc}

004081e4 <fclose>:
  4081e4:	4b02      	ldr	r3, [pc, #8]	; (4081f0 <fclose+0xc>)
  4081e6:	4601      	mov	r1, r0
  4081e8:	6818      	ldr	r0, [r3, #0]
  4081ea:	f7ff bfb9 	b.w	408160 <_fclose_r>
  4081ee:	bf00      	nop
  4081f0:	20000040 	.word	0x20000040

004081f4 <_fstat_r>:
  4081f4:	b538      	push	{r3, r4, r5, lr}
  4081f6:	4c07      	ldr	r4, [pc, #28]	; (408214 <_fstat_r+0x20>)
  4081f8:	2300      	movs	r3, #0
  4081fa:	4605      	mov	r5, r0
  4081fc:	4608      	mov	r0, r1
  4081fe:	4611      	mov	r1, r2
  408200:	6023      	str	r3, [r4, #0]
  408202:	f7fb f937 	bl	403474 <_fstat>
  408206:	1c43      	adds	r3, r0, #1
  408208:	d102      	bne.n	408210 <_fstat_r+0x1c>
  40820a:	6821      	ldr	r1, [r4, #0]
  40820c:	b101      	cbz	r1, 408210 <_fstat_r+0x1c>
  40820e:	6029      	str	r1, [r5, #0]
  408210:	bd38      	pop	{r3, r4, r5, pc}
  408212:	bf00      	nop
  408214:	20000de8 	.word	0x20000de8

00408218 <_isatty_r>:
  408218:	b538      	push	{r3, r4, r5, lr}
  40821a:	4c06      	ldr	r4, [pc, #24]	; (408234 <_isatty_r+0x1c>)
  40821c:	2300      	movs	r3, #0
  40821e:	4605      	mov	r5, r0
  408220:	4608      	mov	r0, r1
  408222:	6023      	str	r3, [r4, #0]
  408224:	f7fb f92c 	bl	403480 <_isatty>
  408228:	1c43      	adds	r3, r0, #1
  40822a:	d102      	bne.n	408232 <_isatty_r+0x1a>
  40822c:	6821      	ldr	r1, [r4, #0]
  40822e:	b101      	cbz	r1, 408232 <_isatty_r+0x1a>
  408230:	6029      	str	r1, [r5, #0]
  408232:	bd38      	pop	{r3, r4, r5, pc}
  408234:	20000de8 	.word	0x20000de8

00408238 <_lseek_r>:
  408238:	b538      	push	{r3, r4, r5, lr}
  40823a:	4c07      	ldr	r4, [pc, #28]	; (408258 <_lseek_r+0x20>)
  40823c:	4605      	mov	r5, r0
  40823e:	2000      	movs	r0, #0
  408240:	6020      	str	r0, [r4, #0]
  408242:	4608      	mov	r0, r1
  408244:	4611      	mov	r1, r2
  408246:	461a      	mov	r2, r3
  408248:	f7fb f91e 	bl	403488 <_lseek>
  40824c:	1c43      	adds	r3, r0, #1
  40824e:	d102      	bne.n	408256 <_lseek_r+0x1e>
  408250:	6823      	ldr	r3, [r4, #0]
  408252:	b103      	cbz	r3, 408256 <_lseek_r+0x1e>
  408254:	602b      	str	r3, [r5, #0]
  408256:	bd38      	pop	{r3, r4, r5, pc}
  408258:	20000de8 	.word	0x20000de8

0040825c <_read_r>:
  40825c:	b538      	push	{r3, r4, r5, lr}
  40825e:	4c07      	ldr	r4, [pc, #28]	; (40827c <_read_r+0x20>)
  408260:	4605      	mov	r5, r0
  408262:	2000      	movs	r0, #0
  408264:	6020      	str	r0, [r4, #0]
  408266:	4608      	mov	r0, r1
  408268:	4611      	mov	r1, r2
  40826a:	461a      	mov	r2, r3
  40826c:	f7f8 ff86 	bl	40117c <_read>
  408270:	1c43      	adds	r3, r0, #1
  408272:	d102      	bne.n	40827a <_read_r+0x1e>
  408274:	6823      	ldr	r3, [r4, #0]
  408276:	b103      	cbz	r3, 40827a <_read_r+0x1e>
  408278:	602b      	str	r3, [r5, #0]
  40827a:	bd38      	pop	{r3, r4, r5, pc}
  40827c:	20000de8 	.word	0x20000de8

00408280 <__aeabi_uldivmod>:
  408280:	b94b      	cbnz	r3, 408296 <__aeabi_uldivmod+0x16>
  408282:	b942      	cbnz	r2, 408296 <__aeabi_uldivmod+0x16>
  408284:	2900      	cmp	r1, #0
  408286:	bf08      	it	eq
  408288:	2800      	cmpeq	r0, #0
  40828a:	d002      	beq.n	408292 <__aeabi_uldivmod+0x12>
  40828c:	f04f 31ff 	mov.w	r1, #4294967295
  408290:	4608      	mov	r0, r1
  408292:	f000 b837 	b.w	408304 <__aeabi_idiv0>
  408296:	b082      	sub	sp, #8
  408298:	46ec      	mov	ip, sp
  40829a:	e92d 5000 	stmdb	sp!, {ip, lr}
  40829e:	f000 f81b 	bl	4082d8 <__gnu_uldivmod_helper>
  4082a2:	f8dd e004 	ldr.w	lr, [sp, #4]
  4082a6:	b002      	add	sp, #8
  4082a8:	bc0c      	pop	{r2, r3}
  4082aa:	4770      	bx	lr

004082ac <__gnu_ldivmod_helper>:
  4082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4082ae:	4616      	mov	r6, r2
  4082b0:	4604      	mov	r4, r0
  4082b2:	460d      	mov	r5, r1
  4082b4:	461f      	mov	r7, r3
  4082b6:	f000 f827 	bl	408308 <__divdi3>
  4082ba:	fb06 f301 	mul.w	r3, r6, r1
  4082be:	fb00 3707 	mla	r7, r0, r7, r3
  4082c2:	fba6 2300 	umull	r2, r3, r6, r0
  4082c6:	18fb      	adds	r3, r7, r3
  4082c8:	1aa2      	subs	r2, r4, r2
  4082ca:	eb65 0303 	sbc.w	r3, r5, r3
  4082ce:	9c06      	ldr	r4, [sp, #24]
  4082d0:	e9c4 2300 	strd	r2, r3, [r4]
  4082d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4082d6:	bf00      	nop

004082d8 <__gnu_uldivmod_helper>:
  4082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4082da:	4616      	mov	r6, r2
  4082dc:	4604      	mov	r4, r0
  4082de:	460d      	mov	r5, r1
  4082e0:	461f      	mov	r7, r3
  4082e2:	f000 f96f 	bl	4085c4 <__udivdi3>
  4082e6:	fb00 f707 	mul.w	r7, r0, r7
  4082ea:	fba0 2306 	umull	r2, r3, r0, r6
  4082ee:	fb06 7701 	mla	r7, r6, r1, r7
  4082f2:	18fb      	adds	r3, r7, r3
  4082f4:	1aa2      	subs	r2, r4, r2
  4082f6:	eb65 0303 	sbc.w	r3, r5, r3
  4082fa:	9c06      	ldr	r4, [sp, #24]
  4082fc:	e9c4 2300 	strd	r2, r3, [r4]
  408300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408302:	bf00      	nop

00408304 <__aeabi_idiv0>:
  408304:	4770      	bx	lr
  408306:	bf00      	nop

00408308 <__divdi3>:
  408308:	2900      	cmp	r1, #0
  40830a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40830e:	461d      	mov	r5, r3
  408310:	f2c0 809d 	blt.w	40844e <__divdi3+0x146>
  408314:	2400      	movs	r4, #0
  408316:	2d00      	cmp	r5, #0
  408318:	f2c0 8094 	blt.w	408444 <__divdi3+0x13c>
  40831c:	4680      	mov	r8, r0
  40831e:	460f      	mov	r7, r1
  408320:	4694      	mov	ip, r2
  408322:	461e      	mov	r6, r3
  408324:	bbe3      	cbnz	r3, 4083a0 <__divdi3+0x98>
  408326:	428a      	cmp	r2, r1
  408328:	d955      	bls.n	4083d6 <__divdi3+0xce>
  40832a:	fab2 f782 	clz	r7, r2
  40832e:	b147      	cbz	r7, 408342 <__divdi3+0x3a>
  408330:	f1c7 0520 	rsb	r5, r7, #32
  408334:	fa20 f605 	lsr.w	r6, r0, r5
  408338:	fa01 f107 	lsl.w	r1, r1, r7
  40833c:	40ba      	lsls	r2, r7
  40833e:	4331      	orrs	r1, r6
  408340:	40b8      	lsls	r0, r7
  408342:	0c17      	lsrs	r7, r2, #16
  408344:	fbb1 f6f7 	udiv	r6, r1, r7
  408348:	0c03      	lsrs	r3, r0, #16
  40834a:	fa1f fc82 	uxth.w	ip, r2
  40834e:	fb07 1116 	mls	r1, r7, r6, r1
  408352:	fb0c f506 	mul.w	r5, ip, r6
  408356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40835a:	429d      	cmp	r5, r3
  40835c:	d908      	bls.n	408370 <__divdi3+0x68>
  40835e:	1e71      	subs	r1, r6, #1
  408360:	189b      	adds	r3, r3, r2
  408362:	f080 8113 	bcs.w	40858c <__divdi3+0x284>
  408366:	429d      	cmp	r5, r3
  408368:	f240 8110 	bls.w	40858c <__divdi3+0x284>
  40836c:	3e02      	subs	r6, #2
  40836e:	189b      	adds	r3, r3, r2
  408370:	1b59      	subs	r1, r3, r5
  408372:	fbb1 f5f7 	udiv	r5, r1, r7
  408376:	fb07 1315 	mls	r3, r7, r5, r1
  40837a:	b280      	uxth	r0, r0
  40837c:	fb0c fc05 	mul.w	ip, ip, r5
  408380:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
  408384:	458c      	cmp	ip, r1
  408386:	d907      	bls.n	408398 <__divdi3+0x90>
  408388:	1e6b      	subs	r3, r5, #1
  40838a:	188a      	adds	r2, r1, r2
  40838c:	f080 8100 	bcs.w	408590 <__divdi3+0x288>
  408390:	4594      	cmp	ip, r2
  408392:	f240 80fd 	bls.w	408590 <__divdi3+0x288>
  408396:	3d02      	subs	r5, #2
  408398:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
  40839c:	2500      	movs	r5, #0
  40839e:	e003      	b.n	4083a8 <__divdi3+0xa0>
  4083a0:	428b      	cmp	r3, r1
  4083a2:	d90c      	bls.n	4083be <__divdi3+0xb6>
  4083a4:	2500      	movs	r5, #0
  4083a6:	4629      	mov	r1, r5
  4083a8:	460a      	mov	r2, r1
  4083aa:	462b      	mov	r3, r5
  4083ac:	b114      	cbz	r4, 4083b4 <__divdi3+0xac>
  4083ae:	4252      	negs	r2, r2
  4083b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4083b4:	4610      	mov	r0, r2
  4083b6:	4619      	mov	r1, r3
  4083b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4083bc:	4770      	bx	lr
  4083be:	fab3 f583 	clz	r5, r3
  4083c2:	2d00      	cmp	r5, #0
  4083c4:	f040 8087 	bne.w	4084d6 <__divdi3+0x1ce>
  4083c8:	428b      	cmp	r3, r1
  4083ca:	d301      	bcc.n	4083d0 <__divdi3+0xc8>
  4083cc:	4282      	cmp	r2, r0
  4083ce:	d8ea      	bhi.n	4083a6 <__divdi3+0x9e>
  4083d0:	2500      	movs	r5, #0
  4083d2:	2101      	movs	r1, #1
  4083d4:	e7e8      	b.n	4083a8 <__divdi3+0xa0>
  4083d6:	b912      	cbnz	r2, 4083de <__divdi3+0xd6>
  4083d8:	2601      	movs	r6, #1
  4083da:	fbb6 f2f2 	udiv	r2, r6, r2
  4083de:	fab2 f682 	clz	r6, r2
  4083e2:	2e00      	cmp	r6, #0
  4083e4:	d139      	bne.n	40845a <__divdi3+0x152>
  4083e6:	1a8e      	subs	r6, r1, r2
  4083e8:	0c13      	lsrs	r3, r2, #16
  4083ea:	fa1f fc82 	uxth.w	ip, r2
  4083ee:	2501      	movs	r5, #1
  4083f0:	fbb6 f7f3 	udiv	r7, r6, r3
  4083f4:	fb03 6117 	mls	r1, r3, r7, r6
  4083f8:	ea4f 4910 	mov.w	r9, r0, lsr #16
  4083fc:	fb0c f807 	mul.w	r8, ip, r7
  408400:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
  408404:	45b0      	cmp	r8, r6
  408406:	d906      	bls.n	408416 <__divdi3+0x10e>
  408408:	1e79      	subs	r1, r7, #1
  40840a:	18b6      	adds	r6, r6, r2
  40840c:	d202      	bcs.n	408414 <__divdi3+0x10c>
  40840e:	45b0      	cmp	r8, r6
  408410:	f200 80d3 	bhi.w	4085ba <__divdi3+0x2b2>
  408414:	460f      	mov	r7, r1
  408416:	ebc8 0606 	rsb	r6, r8, r6
  40841a:	fbb6 f1f3 	udiv	r1, r6, r3
  40841e:	fb03 6311 	mls	r3, r3, r1, r6
  408422:	b280      	uxth	r0, r0
  408424:	fb0c fc01 	mul.w	ip, ip, r1
  408428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  40842c:	459c      	cmp	ip, r3
  40842e:	d906      	bls.n	40843e <__divdi3+0x136>
  408430:	1e4e      	subs	r6, r1, #1
  408432:	189a      	adds	r2, r3, r2
  408434:	d202      	bcs.n	40843c <__divdi3+0x134>
  408436:	4594      	cmp	ip, r2
  408438:	f200 80c2 	bhi.w	4085c0 <__divdi3+0x2b8>
  40843c:	4631      	mov	r1, r6
  40843e:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
  408442:	e7b1      	b.n	4083a8 <__divdi3+0xa0>
  408444:	43e4      	mvns	r4, r4
  408446:	4252      	negs	r2, r2
  408448:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40844c:	e766      	b.n	40831c <__divdi3+0x14>
  40844e:	4240      	negs	r0, r0
  408450:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408454:	f04f 34ff 	mov.w	r4, #4294967295
  408458:	e75d      	b.n	408316 <__divdi3+0xe>
  40845a:	40b2      	lsls	r2, r6
  40845c:	f1c6 0920 	rsb	r9, r6, #32
  408460:	fa21 f709 	lsr.w	r7, r1, r9
  408464:	fa20 f509 	lsr.w	r5, r0, r9
  408468:	0c13      	lsrs	r3, r2, #16
  40846a:	fa01 f106 	lsl.w	r1, r1, r6
  40846e:	fbb7 f8f3 	udiv	r8, r7, r3
  408472:	ea45 0901 	orr.w	r9, r5, r1
  408476:	fa1f fc82 	uxth.w	ip, r2
  40847a:	fb03 7718 	mls	r7, r3, r8, r7
  40847e:	ea4f 4119 	mov.w	r1, r9, lsr #16
  408482:	fb0c f508 	mul.w	r5, ip, r8
  408486:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
  40848a:	40b0      	lsls	r0, r6
  40848c:	42bd      	cmp	r5, r7
  40848e:	d90a      	bls.n	4084a6 <__divdi3+0x19e>
  408490:	18bf      	adds	r7, r7, r2
  408492:	f108 36ff 	add.w	r6, r8, #4294967295
  408496:	f080 808e 	bcs.w	4085b6 <__divdi3+0x2ae>
  40849a:	42bd      	cmp	r5, r7
  40849c:	f240 808b 	bls.w	4085b6 <__divdi3+0x2ae>
  4084a0:	f1a8 0802 	sub.w	r8, r8, #2
  4084a4:	18bf      	adds	r7, r7, r2
  4084a6:	1b79      	subs	r1, r7, r5
  4084a8:	fbb1 f5f3 	udiv	r5, r1, r3
  4084ac:	fb03 1715 	mls	r7, r3, r5, r1
  4084b0:	fa1f f989 	uxth.w	r9, r9
  4084b4:	fb0c f605 	mul.w	r6, ip, r5
  4084b8:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
  4084bc:	428e      	cmp	r6, r1
  4084be:	d906      	bls.n	4084ce <__divdi3+0x1c6>
  4084c0:	1e6f      	subs	r7, r5, #1
  4084c2:	1889      	adds	r1, r1, r2
  4084c4:	d271      	bcs.n	4085aa <__divdi3+0x2a2>
  4084c6:	428e      	cmp	r6, r1
  4084c8:	d96f      	bls.n	4085aa <__divdi3+0x2a2>
  4084ca:	3d02      	subs	r5, #2
  4084cc:	1889      	adds	r1, r1, r2
  4084ce:	1b8e      	subs	r6, r1, r6
  4084d0:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
  4084d4:	e78c      	b.n	4083f0 <__divdi3+0xe8>
  4084d6:	f1c5 0120 	rsb	r1, r5, #32
  4084da:	fa22 f301 	lsr.w	r3, r2, r1
  4084de:	fa06 f605 	lsl.w	r6, r6, r5
  4084e2:	431e      	orrs	r6, r3
  4084e4:	fa27 f201 	lsr.w	r2, r7, r1
  4084e8:	ea4f 4916 	mov.w	r9, r6, lsr #16
  4084ec:	fa07 f705 	lsl.w	r7, r7, r5
  4084f0:	fa20 f101 	lsr.w	r1, r0, r1
  4084f4:	fbb2 f8f9 	udiv	r8, r2, r9
  4084f8:	430f      	orrs	r7, r1
  4084fa:	0c3b      	lsrs	r3, r7, #16
  4084fc:	fa1f fa86 	uxth.w	sl, r6
  408500:	fb09 2218 	mls	r2, r9, r8, r2
  408504:	fb0a fb08 	mul.w	fp, sl, r8
  408508:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40850c:	4593      	cmp	fp, r2
  40850e:	fa0c fc05 	lsl.w	ip, ip, r5
  408512:	d908      	bls.n	408526 <__divdi3+0x21e>
  408514:	1992      	adds	r2, r2, r6
  408516:	f108 31ff 	add.w	r1, r8, #4294967295
  40851a:	d24a      	bcs.n	4085b2 <__divdi3+0x2aa>
  40851c:	4593      	cmp	fp, r2
  40851e:	d948      	bls.n	4085b2 <__divdi3+0x2aa>
  408520:	f1a8 0802 	sub.w	r8, r8, #2
  408524:	1992      	adds	r2, r2, r6
  408526:	ebcb 0302 	rsb	r3, fp, r2
  40852a:	fbb3 f1f9 	udiv	r1, r3, r9
  40852e:	fb09 3211 	mls	r2, r9, r1, r3
  408532:	b2bf      	uxth	r7, r7
  408534:	fb0a fa01 	mul.w	sl, sl, r1
  408538:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
  40853c:	459a      	cmp	sl, r3
  40853e:	d906      	bls.n	40854e <__divdi3+0x246>
  408540:	1e4a      	subs	r2, r1, #1
  408542:	199b      	adds	r3, r3, r6
  408544:	d233      	bcs.n	4085ae <__divdi3+0x2a6>
  408546:	459a      	cmp	sl, r3
  408548:	d931      	bls.n	4085ae <__divdi3+0x2a6>
  40854a:	3902      	subs	r1, #2
  40854c:	199b      	adds	r3, r3, r6
  40854e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
  408552:	0c0f      	lsrs	r7, r1, #16
  408554:	fa1f f88c 	uxth.w	r8, ip
  408558:	fb08 f607 	mul.w	r6, r8, r7
  40855c:	b28a      	uxth	r2, r1
  40855e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  408562:	fb08 f802 	mul.w	r8, r8, r2
  408566:	fb0c 6202 	mla	r2, ip, r2, r6
  40856a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
  40856e:	fb0c fc07 	mul.w	ip, ip, r7
  408572:	4296      	cmp	r6, r2
  408574:	bf88      	it	hi
  408576:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
  40857a:	ebca 0303 	rsb	r3, sl, r3
  40857e:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
  408582:	4563      	cmp	r3, ip
  408584:	d30e      	bcc.n	4085a4 <__divdi3+0x29c>
  408586:	d005      	beq.n	408594 <__divdi3+0x28c>
  408588:	2500      	movs	r5, #0
  40858a:	e70d      	b.n	4083a8 <__divdi3+0xa0>
  40858c:	460e      	mov	r6, r1
  40858e:	e6ef      	b.n	408370 <__divdi3+0x68>
  408590:	461d      	mov	r5, r3
  408592:	e701      	b.n	408398 <__divdi3+0x90>
  408594:	fa1f f888 	uxth.w	r8, r8
  408598:	fa00 f005 	lsl.w	r0, r0, r5
  40859c:	eb08 4502 	add.w	r5, r8, r2, lsl #16
  4085a0:	42a8      	cmp	r0, r5
  4085a2:	d2f1      	bcs.n	408588 <__divdi3+0x280>
  4085a4:	3901      	subs	r1, #1
  4085a6:	2500      	movs	r5, #0
  4085a8:	e6fe      	b.n	4083a8 <__divdi3+0xa0>
  4085aa:	463d      	mov	r5, r7
  4085ac:	e78f      	b.n	4084ce <__divdi3+0x1c6>
  4085ae:	4611      	mov	r1, r2
  4085b0:	e7cd      	b.n	40854e <__divdi3+0x246>
  4085b2:	4688      	mov	r8, r1
  4085b4:	e7b7      	b.n	408526 <__divdi3+0x21e>
  4085b6:	46b0      	mov	r8, r6
  4085b8:	e775      	b.n	4084a6 <__divdi3+0x19e>
  4085ba:	3f02      	subs	r7, #2
  4085bc:	18b6      	adds	r6, r6, r2
  4085be:	e72a      	b.n	408416 <__divdi3+0x10e>
  4085c0:	3902      	subs	r1, #2
  4085c2:	e73c      	b.n	40843e <__divdi3+0x136>

004085c4 <__udivdi3>:
  4085c4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  4085c8:	4614      	mov	r4, r2
  4085ca:	4605      	mov	r5, r0
  4085cc:	460e      	mov	r6, r1
  4085ce:	2b00      	cmp	r3, #0
  4085d0:	d13d      	bne.n	40864e <__udivdi3+0x8a>
  4085d2:	428a      	cmp	r2, r1
  4085d4:	d949      	bls.n	40866a <__udivdi3+0xa6>
  4085d6:	fab2 f782 	clz	r7, r2
  4085da:	b147      	cbz	r7, 4085ee <__udivdi3+0x2a>
  4085dc:	f1c7 0120 	rsb	r1, r7, #32
  4085e0:	fa20 f201 	lsr.w	r2, r0, r1
  4085e4:	fa06 f607 	lsl.w	r6, r6, r7
  4085e8:	40bc      	lsls	r4, r7
  4085ea:	4316      	orrs	r6, r2
  4085ec:	40bd      	lsls	r5, r7
  4085ee:	0c22      	lsrs	r2, r4, #16
  4085f0:	fbb6 f0f2 	udiv	r0, r6, r2
  4085f4:	0c2f      	lsrs	r7, r5, #16
  4085f6:	b2a1      	uxth	r1, r4
  4085f8:	fb02 6610 	mls	r6, r2, r0, r6
  4085fc:	fb01 f300 	mul.w	r3, r1, r0
  408600:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  408604:	42b3      	cmp	r3, r6
  408606:	d908      	bls.n	40861a <__udivdi3+0x56>
  408608:	1e47      	subs	r7, r0, #1
  40860a:	1936      	adds	r6, r6, r4
  40860c:	f080 80f8 	bcs.w	408800 <__udivdi3+0x23c>
  408610:	42b3      	cmp	r3, r6
  408612:	f240 80f5 	bls.w	408800 <__udivdi3+0x23c>
  408616:	3802      	subs	r0, #2
  408618:	1936      	adds	r6, r6, r4
  40861a:	1af6      	subs	r6, r6, r3
  40861c:	fbb6 f3f2 	udiv	r3, r6, r2
  408620:	fb02 6213 	mls	r2, r2, r3, r6
  408624:	b2ad      	uxth	r5, r5
  408626:	fb01 f103 	mul.w	r1, r1, r3
  40862a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  40862e:	4291      	cmp	r1, r2
  408630:	d907      	bls.n	408642 <__udivdi3+0x7e>
  408632:	1e5e      	subs	r6, r3, #1
  408634:	1912      	adds	r2, r2, r4
  408636:	f080 80e5 	bcs.w	408804 <__udivdi3+0x240>
  40863a:	4291      	cmp	r1, r2
  40863c:	f240 80e2 	bls.w	408804 <__udivdi3+0x240>
  408640:	3b02      	subs	r3, #2
  408642:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  408646:	2100      	movs	r1, #0
  408648:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  40864c:	4770      	bx	lr
  40864e:	428b      	cmp	r3, r1
  408650:	d843      	bhi.n	4086da <__udivdi3+0x116>
  408652:	fab3 f483 	clz	r4, r3
  408656:	2c00      	cmp	r4, #0
  408658:	d142      	bne.n	4086e0 <__udivdi3+0x11c>
  40865a:	428b      	cmp	r3, r1
  40865c:	d302      	bcc.n	408664 <__udivdi3+0xa0>
  40865e:	4282      	cmp	r2, r0
  408660:	f200 80df 	bhi.w	408822 <__udivdi3+0x25e>
  408664:	2100      	movs	r1, #0
  408666:	2001      	movs	r0, #1
  408668:	e7ee      	b.n	408648 <__udivdi3+0x84>
  40866a:	b912      	cbnz	r2, 408672 <__udivdi3+0xae>
  40866c:	2701      	movs	r7, #1
  40866e:	fbb7 f4f2 	udiv	r4, r7, r2
  408672:	fab4 f284 	clz	r2, r4
  408676:	2a00      	cmp	r2, #0
  408678:	f040 8088 	bne.w	40878c <__udivdi3+0x1c8>
  40867c:	1b0a      	subs	r2, r1, r4
  40867e:	0c23      	lsrs	r3, r4, #16
  408680:	b2a7      	uxth	r7, r4
  408682:	2101      	movs	r1, #1
  408684:	fbb2 f6f3 	udiv	r6, r2, r3
  408688:	fb03 2216 	mls	r2, r3, r6, r2
  40868c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
  408690:	fb07 f006 	mul.w	r0, r7, r6
  408694:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
  408698:	4290      	cmp	r0, r2
  40869a:	d907      	bls.n	4086ac <__udivdi3+0xe8>
  40869c:	1912      	adds	r2, r2, r4
  40869e:	f106 3cff 	add.w	ip, r6, #4294967295
  4086a2:	d202      	bcs.n	4086aa <__udivdi3+0xe6>
  4086a4:	4290      	cmp	r0, r2
  4086a6:	f200 80ce 	bhi.w	408846 <__udivdi3+0x282>
  4086aa:	4666      	mov	r6, ip
  4086ac:	1a12      	subs	r2, r2, r0
  4086ae:	fbb2 f0f3 	udiv	r0, r2, r3
  4086b2:	fb03 2310 	mls	r3, r3, r0, r2
  4086b6:	b2ad      	uxth	r5, r5
  4086b8:	fb07 f700 	mul.w	r7, r7, r0
  4086bc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  4086c0:	429f      	cmp	r7, r3
  4086c2:	d907      	bls.n	4086d4 <__udivdi3+0x110>
  4086c4:	1e42      	subs	r2, r0, #1
  4086c6:	191b      	adds	r3, r3, r4
  4086c8:	f080 809e 	bcs.w	408808 <__udivdi3+0x244>
  4086cc:	429f      	cmp	r7, r3
  4086ce:	f240 809b 	bls.w	408808 <__udivdi3+0x244>
  4086d2:	3802      	subs	r0, #2
  4086d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  4086d8:	e7b6      	b.n	408648 <__udivdi3+0x84>
  4086da:	2100      	movs	r1, #0
  4086dc:	4608      	mov	r0, r1
  4086de:	e7b3      	b.n	408648 <__udivdi3+0x84>
  4086e0:	f1c4 0620 	rsb	r6, r4, #32
  4086e4:	fa22 f506 	lsr.w	r5, r2, r6
  4086e8:	fa03 f304 	lsl.w	r3, r3, r4
  4086ec:	432b      	orrs	r3, r5
  4086ee:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4086f2:	fa21 f506 	lsr.w	r5, r1, r6
  4086f6:	fa01 f104 	lsl.w	r1, r1, r4
  4086fa:	fa20 f606 	lsr.w	r6, r0, r6
  4086fe:	fbb5 f7fc 	udiv	r7, r5, ip
  408702:	ea46 0a01 	orr.w	sl, r6, r1
  408706:	fa1f f883 	uxth.w	r8, r3
  40870a:	fb0c 5517 	mls	r5, ip, r7, r5
  40870e:	ea4f 411a 	mov.w	r1, sl, lsr #16
  408712:	fb08 f907 	mul.w	r9, r8, r7
  408716:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
  40871a:	45a9      	cmp	r9, r5
  40871c:	fa02 f204 	lsl.w	r2, r2, r4
  408720:	d903      	bls.n	40872a <__udivdi3+0x166>
  408722:	1e7e      	subs	r6, r7, #1
  408724:	18ed      	adds	r5, r5, r3
  408726:	d37f      	bcc.n	408828 <__udivdi3+0x264>
  408728:	4637      	mov	r7, r6
  40872a:	ebc9 0105 	rsb	r1, r9, r5
  40872e:	fbb1 f6fc 	udiv	r6, r1, ip
  408732:	fb0c 1516 	mls	r5, ip, r6, r1
  408736:	fa1f fa8a 	uxth.w	sl, sl
  40873a:	fb08 f806 	mul.w	r8, r8, r6
  40873e:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
  408742:	4588      	cmp	r8, r1
  408744:	d903      	bls.n	40874e <__udivdi3+0x18a>
  408746:	1e75      	subs	r5, r6, #1
  408748:	18c9      	adds	r1, r1, r3
  40874a:	d373      	bcc.n	408834 <__udivdi3+0x270>
  40874c:	462e      	mov	r6, r5
  40874e:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
  408752:	0c37      	lsrs	r7, r6, #16
  408754:	fa1f fc82 	uxth.w	ip, r2
  408758:	fb0c f507 	mul.w	r5, ip, r7
  40875c:	0c12      	lsrs	r2, r2, #16
  40875e:	b2b3      	uxth	r3, r6
  408760:	fb0c fc03 	mul.w	ip, ip, r3
  408764:	fb02 5303 	mla	r3, r2, r3, r5
  408768:	eb03 431c 	add.w	r3, r3, ip, lsr #16
  40876c:	fb02 f207 	mul.w	r2, r2, r7
  408770:	429d      	cmp	r5, r3
  408772:	bf88      	it	hi
  408774:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
  408778:	ebc8 0101 	rsb	r1, r8, r1
  40877c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
  408780:	4291      	cmp	r1, r2
  408782:	d34b      	bcc.n	40881c <__udivdi3+0x258>
  408784:	d042      	beq.n	40880c <__udivdi3+0x248>
  408786:	4630      	mov	r0, r6
  408788:	2100      	movs	r1, #0
  40878a:	e75d      	b.n	408648 <__udivdi3+0x84>
  40878c:	4094      	lsls	r4, r2
  40878e:	f1c2 0520 	rsb	r5, r2, #32
  408792:	fa21 f605 	lsr.w	r6, r1, r5
  408796:	0c23      	lsrs	r3, r4, #16
  408798:	fa20 f705 	lsr.w	r7, r0, r5
  40879c:	fa01 f102 	lsl.w	r1, r1, r2
  4087a0:	fbb6 fcf3 	udiv	ip, r6, r3
  4087a4:	4339      	orrs	r1, r7
  4087a6:	0c0d      	lsrs	r5, r1, #16
  4087a8:	b2a7      	uxth	r7, r4
  4087aa:	fb03 661c 	mls	r6, r3, ip, r6
  4087ae:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
  4087b2:	fb07 f80c 	mul.w	r8, r7, ip
  4087b6:	45b0      	cmp	r8, r6
  4087b8:	fa00 f502 	lsl.w	r5, r0, r2
  4087bc:	d908      	bls.n	4087d0 <__udivdi3+0x20c>
  4087be:	1936      	adds	r6, r6, r4
  4087c0:	f10c 30ff 	add.w	r0, ip, #4294967295
  4087c4:	d23d      	bcs.n	408842 <__udivdi3+0x27e>
  4087c6:	45b0      	cmp	r8, r6
  4087c8:	d93b      	bls.n	408842 <__udivdi3+0x27e>
  4087ca:	f1ac 0c02 	sub.w	ip, ip, #2
  4087ce:	1936      	adds	r6, r6, r4
  4087d0:	ebc8 0206 	rsb	r2, r8, r6
  4087d4:	fbb2 f0f3 	udiv	r0, r2, r3
  4087d8:	fb03 2610 	mls	r6, r3, r0, r2
  4087dc:	b28a      	uxth	r2, r1
  4087de:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  4087e2:	fb07 f100 	mul.w	r1, r7, r0
  4087e6:	4291      	cmp	r1, r2
  4087e8:	d906      	bls.n	4087f8 <__udivdi3+0x234>
  4087ea:	1e46      	subs	r6, r0, #1
  4087ec:	1912      	adds	r2, r2, r4
  4087ee:	d226      	bcs.n	40883e <__udivdi3+0x27a>
  4087f0:	4291      	cmp	r1, r2
  4087f2:	d924      	bls.n	40883e <__udivdi3+0x27a>
  4087f4:	3802      	subs	r0, #2
  4087f6:	1912      	adds	r2, r2, r4
  4087f8:	1a52      	subs	r2, r2, r1
  4087fa:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  4087fe:	e741      	b.n	408684 <__udivdi3+0xc0>
  408800:	4638      	mov	r0, r7
  408802:	e70a      	b.n	40861a <__udivdi3+0x56>
  408804:	4633      	mov	r3, r6
  408806:	e71c      	b.n	408642 <__udivdi3+0x7e>
  408808:	4610      	mov	r0, r2
  40880a:	e763      	b.n	4086d4 <__udivdi3+0x110>
  40880c:	fa1f fc8c 	uxth.w	ip, ip
  408810:	fa00 f004 	lsl.w	r0, r0, r4
  408814:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
  408818:	4298      	cmp	r0, r3
  40881a:	d2b4      	bcs.n	408786 <__udivdi3+0x1c2>
  40881c:	1e70      	subs	r0, r6, #1
  40881e:	2100      	movs	r1, #0
  408820:	e712      	b.n	408648 <__udivdi3+0x84>
  408822:	4621      	mov	r1, r4
  408824:	4620      	mov	r0, r4
  408826:	e70f      	b.n	408648 <__udivdi3+0x84>
  408828:	45a9      	cmp	r9, r5
  40882a:	f67f af7d 	bls.w	408728 <__udivdi3+0x164>
  40882e:	3f02      	subs	r7, #2
  408830:	18ed      	adds	r5, r5, r3
  408832:	e77a      	b.n	40872a <__udivdi3+0x166>
  408834:	4588      	cmp	r8, r1
  408836:	d989      	bls.n	40874c <__udivdi3+0x188>
  408838:	3e02      	subs	r6, #2
  40883a:	18c9      	adds	r1, r1, r3
  40883c:	e787      	b.n	40874e <__udivdi3+0x18a>
  40883e:	4630      	mov	r0, r6
  408840:	e7da      	b.n	4087f8 <__udivdi3+0x234>
  408842:	4684      	mov	ip, r0
  408844:	e7c4      	b.n	4087d0 <__udivdi3+0x20c>
  408846:	3e02      	subs	r6, #2
  408848:	1912      	adds	r2, r2, r4
  40884a:	e72f      	b.n	4086ac <__udivdi3+0xe8>

0040884c <sd_trans_multipliers>:
  40884c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  40885c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
  40886c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
  40887c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0040888c <sd_mmc_trans_units>:
  40888c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

004088a8 <mmc_trans_multipliers>:
  4088a8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
  4088b8:	000f 0000 0014 0000 001a 0000 001e 0000     ................
  4088c8:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
  4088d8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

004088e8 <p_uc_charset10x14>:
	...
  408904:	ccff ccff 0000 0000 0000 0000 0000 0000     ................
  408914:	00f0 00f0 0000 0000 00f0 00f0 0000 0000     ................
  408924:	c00c c00c fcff fcff c00c c00c fcff fcff     ................
  408934:	c00c c00c 600c 701e 303f 3033 fcff fcff     .....`.p?030....
  408944:	3033 f033 e039 c018 0060 0cf0 3cf0 f060     303.9...`....<`.
  408954:	c003 000f 183c 3cf0 3cc0 1800 f03c f87f     ....<..<.<..<...
  408964:	1cc3 8cc7 cccf ecdc 7878 3030 fc00 cc00     ........xx00....
  408974:	0000 0000 0000 0044 00ec 00f8 0070 0000     ......D.....p...
	...
  40898c:	c00f f03f 7878 1860 0cc0 0cc0 0000 0000     ..?.xx`.........
  40899c:	0000 0000 0cc0 0cc0 1860 7878 f03f c00f     ........`.xx?...
  4089ac:	0000 0000 600c e00e c007 8003 f83f f83f     .....`......?.?.
  4089bc:	8003 c007 e00e 600c 0003 0003 0003 0003     .......`........
  4089cc:	f03f f03f 0003 0003 0003 0003 4400 ec00     ?.?..........D..
  4089dc:	f800 7000 0000 0000 0000 0000 0000 0000     ...p............
  4089ec:	0003 0003 0003 0003 0003 0003 0003 0003     ................
  4089fc:	0003 0003 1800 3c00 3c00 1800 0000 0000     .......<.<......
	...
  408a14:	0000 0c00 3c00 f000 c003 000f 003c 00f0     .....<......<...
  408a24:	00c0 0000 f03f f87f fce0 ccc1 8cc3 0cc7     ....?...........
  408a34:	0cce 1cfc f87f f03f 0000 0000 0c30 0c70     ......?.....0.p.
  408a44:	fcff fcff 0c00 0c00 0000 0000 0c30 1c70     ............0.p.
  408a54:	3ce0 7cc0 ecc0 ccc1 8cc3 0ce7 0c7e 0c3c     .<.|........~.<.
  408a64:	3030 3870 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     00p8............
  408a74:	f87f f03c c003 c007 c00e c01c c038 c070     ..<.........8.p.
  408a84:	fcff fcff c000 c000 30fc 38fc 1ccc 0ccc     .........0.8....
  408a94:	0ccc 0ccc 0ccc 1cce f8c7 f0c3 f03f f87f     ............?...
  408aa4:	1ce3 0cc3 0cc3 0cc3 0cc3 9ce3 f871 f030     ............q.0.
  408ab4:	00c0 00c0 00c0 00c0 fcc3 fcc7 00ce 00dc     ................
  408ac4:	00f8 00f0 f03c f87f 9ce7 0cc3 0cc3 0cc3     ....<...........
  408ad4:	0cc3 9ce7 f87f f03c 003c 007e 0ce7 0cc3     ......<.<.~.....
  408ae4:	1cc3 38c3 70c3 e0e7 c07f 803f 0000 0000     ...8.p....?.....
  408af4:	0000 6018 f03c f03c 6018 0000 0000 0000     ...`<.<..`......
  408b04:	0000 0000 0000 4418 ec3c f83c 7018 0000     .......D<.<..p..
  408b14:	0000 0000 0000 0003 8007 c00f e01c 7038     ..............8p
  408b24:	3870 1ce0 0cc0 0000 c00c c00c c00c c00c     p8..............
  408b34:	c00c c00c c00c c00c c00c c00c 0000 0cc0     ................
  408b44:	1ce0 3870 7038 e01c c00f 8007 0003 0000     ..p88p..........
  408b54:	0030 0070 00e0 00c0 ecc1 ecc3 00c3 00e6     0.p.............
  408b64:	007e 003c f030 f871 9ce3 0cc3 fcc3 fcc3     ~.<.0.q.........
  408b74:	0cc0 1ce0 f87f f03f fc3f fc7f c0e0 c0c0     ......?.?.......
  408b84:	c0c0 c0c0 c0c0 c0e0 fc7f fc3f fcff fcff     ..........?.....
  408b94:	0cc3 0cc3 0cc3 0cc3 0cc3 9ce7 f87f f03c     ..............<.
  408ba4:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  408bb4:	3870 3030 fcff fcff 0cc0 0cc0 0cc0 0cc0     p800............
  408bc4:	0cc0 1ce0 f87f f03f fcff fcff 0cc3 0cc3     ......?.........
  408bd4:	0cc3 0cc3 0cc3 0cc3 0cc0 0cc0 fcff fcff     ................
  408be4:	00c3 00c3 00c3 00c3 00c3 00c3 00c0 00c0     ................
  408bf4:	f03f f87f 1ce0 0cc0 0cc0 0cc3 0cc3 1ce3     ?...............
  408c04:	f873 f033 fcff fcff 0003 0003 0003 0003     s.3.............
  408c14:	0003 0003 fcff fcff 0000 0000 0cc0 0cc0     ................
  408c24:	fcff fcff 0cc0 0cc0 0000 0000 3000 3800     .............0.8
  408c34:	1cc0 0cc0 0cc0 1cc0 f8ff f0ff 00c0 00c0     ................
  408c44:	fcff fcff 8007 8007 c00f e01c 7038 3870     ............8pp8
  408c54:	1ce0 0cc0 fcff fcff 0c00 0c00 0c00 0c00     ................
  408c64:	0c00 0c00 0c00 0c00 fcff fcff 0070 0038     ............p.8.
  408c74:	001f 001f 0038 0070 fcff fcff fcff fcff     ....8.p.........
  408c84:	001c 000e 0007 8003 c001 e000 fcff fcff     ................
  408c94:	f03f f87f 1ce0 0cc0 0cc0 0cc0 0cc0 1ce0     ?...............
  408ca4:	f87f f03f fcff fcff 00c3 00c3 00c3 00c3     ..?.............
  408cb4:	00c3 00e7 007e 003c f03f f87f 1ce0 0cc0     ....~.<.?.......
  408cc4:	ccc0 ecc0 7cc0 38e0 fc7f ec3f fcff fcff     .....|.8..?.....
  408cd4:	00c3 80c3 80c3 c0c3 c0c3 70e7 3c7e 1c3c     ...........p~<<.
  408ce4:	183c 1c7e 0ce7 0cc3 0cc3 0cc3 0cc3 9cc3     <.~.............
  408cf4:	f8e1 f060 00c0 00c0 00c0 00c0 fcff fcff     ..`.............
  408d04:	00c0 00c0 00c0 00c0 f0ff f8ff 1c00 0c00     ................
  408d14:	0c00 0c00 0c00 1c00 f8ff f0ff c0ff e0ff     ................
  408d24:	7000 3800 1c00 1c00 3800 7000 e0ff c0ff     .p.8.....8.p....
  408d34:	f0ff f8ff 1c00 3c00 f800 f800 3c00 1c00     .......<.....<..
  408d44:	f8ff f0ff 3cf0 7cf8 e01c c00f 8007 8007     .....<.|........
  408d54:	c00f e01c 7cf8 3cf0 00fc 00fe 0007 8003     .....|.<........
  408d64:	fc01 fc01 8003 0007 00fe 00fc 3cc0 7cc0     .............<.|
  408d74:	ecc0 ccc1 8cc3 0cc7 0cce 0cdc 0cf8 0cf0     ................
  408d84:	0000 0000 fcff fcff 0cc0 0cc0 0cc0 0000     ................
  408d94:	0000 0000 0030 0030 000c 000c 0003 0003     ....0.0.........
  408da4:	c000 c000 3000 3000 0000 0000 0cc0 0cc0     .....0.0........
  408db4:	0cc0 fcff fcff 0000 0000 0000 000c 001c     ................
  408dc4:	0038 0070 00e0 00e0 0070 0038 001c 000c     8.p.....p.8.....
  408dd4:	0c00 0c00 0c00 0c00 0c00 0c00 0c00 0c00     ................
  408de4:	0c00 0c00 0000 0000 00c0 00e0 0070 0038     ............p.8.
  408df4:	0018 0000 0000 0000 3000 7806 fc0e cc0c     .........0.x....
  408e04:	cc0c cc0c cc0c cc0e fc07 f803 fcff fcff     ................
  408e14:	0c03 0c03 0c03 0c03 0c03 9c03 f801 f000     ................
  408e24:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  408e34:	3807 3003 f000 f801 9c03 0c03 0c03 0c03     .8.0............
  408e44:	0c03 0c03 fcff fcff f003 f807 dc0e cc0c     ................
  408e54:	cc0c cc0c cc0c dc0e d807 9003 0000 0003     ................
  408e64:	fc3f fc7f 00e3 00e3 0070 0030 0000 0000     ?.......p.0.....
  408e74:	1803 9c07 cc0f cc0c cc0c cc0c cc0c dc0c     ................
  408e84:	f80f f007 fcff fcff 0003 0003 0003 0003     ................
  408e94:	8003 fc01 fc00 0000 0000 0000 0000 0000     ................
  408ea4:	fc1b fc1b 0000 0000 0000 0000 0000 3000     ...............0
  408eb4:	3800 1c00 0c00 0c00 1c00 f8cf f0cf 0000     .8..............
  408ec4:	0000 fcff fcff e000 e001 f003 3807 1c0e     .............8..
  408ed4:	0c0c 0000 0000 0000 0cc0 0cc0 fcff fcff     ................
  408ee4:	0c00 0c00 0000 0000 fc0f fc0f 000e 0007     ................
  408ef4:	c003 c003 0007 000e fc0f fc0f fc0f fc0f     ................
  408f04:	0003 0007 000e 000c 000c 000e fc07 fc03     ................
  408f14:	f003 f807 1c0e 0c0c 0c0c 0c0c 0c0c 1c0e     ................
  408f24:	f807 f003 fc0f fc0f c00c c00c c00c c00c     ................
  408f34:	c00c c00f 8007 0003 0003 8007 c00f c00c     ................
  408f44:	c00c c00c c00c c00c fc0f fc0f fc0f fc0f     ................
  408f54:	8003 0007 000e 000c 000c 000e 0007 0003     ................
  408f64:	1803 9c07 cc0f cc0c cc0c cc0c cc0c fc0c     ................
  408f74:	780e 3006 0000 000c 000c f0ff f8ff 1c0c     .x.0............
  408f84:	1c0c 380c 300c 0000 f00f f80f 1c00 0c00     ...8.0..........
  408f94:	0c00 0c00 0c00 1c00 f80f f00f c00f e00f     ................
  408fa4:	7000 3800 1c00 1c00 3800 7000 e00f c00f     .p.8.....8.p....
  408fb4:	f00f f80f 1c00 1c00 f800 f800 1c00 1c00     ................
  408fc4:	f80f f00f 0c0c 1c0e 3807 f003 e001 e001     .........8......
  408fd4:	f003 3807 1c0e 0c0c 000c 000e 0c07 9c03     ...8............
  408fe4:	f801 f001 8003 0007 000e 000c 0c0c 1c0c     ................
  408ff4:	3c0c 7c0c ec0c cc0d 8c0f 0c0f 0c0e 0c0c     .<.|............
  409004:	0000 0003 8007 f03f f87c 1ce0 0cc0 0cc0     ......?.|.......
  409014:	0cc0 0000 0c03 0c03 fc3f fc7f 0ce3 0cc3     ........?.......
  409024:	0cc0 0ce0 0c70 0c30 0000 0cc0 0cc0 0cc0     ....p.0.........
  409034:	1ce0 f87c f03f 8007 0003 0000 00c0 00c0     ..|.?...........
  409044:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
  409054:	fcff fcff fcff fcff fcff fcff fcff fcff     ................
  409064:	fcff fcff                                   ....

00409068 <excvt.4500>:
  409068:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
  409078:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
  409088:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
  409098:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
  4090a8:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
  4090b8:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
  4090c8:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
  4090d8:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
  4090e8:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
  4090f8:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
  409108:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
  409118:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
  409128:	5441 2020 2020 0020                         AT     .

00409130 <LfnOfs>:
  409130:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00409140 <Tbl>:
  409140:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
  409150:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
  409160:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
  409170:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
  409180:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
  409190:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
  4091a0:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
  4091b0:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
  4091c0:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
  4091d0:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
  4091e0:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
  4091f0:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
  409200:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
  409210:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
  409220:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
  409230:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00409240 <tbl_upper.4251>:
  409240:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
  409250:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
  409260:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
  409270:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
  409280:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
  409290:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
  4092a0:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
  4092b0:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
  4092c0:	0102 0104 0106 0108 010a 010c 010e 0110     ................
  4092d0:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
  4092e0:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
  4092f0:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
  409300:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
  409310:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
  409320:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
  409330:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
  409340:	0393 0394 0395 0396 0397 0398 0399 039a     ................
  409350:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
  409360:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
  409370:	0411 0412 0413 0414 0415 0416 0417 0418     ................
  409380:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
  409390:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
  4093a0:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
  4093b0:	0402 0403 0404 0405 0406 0407 0408 0409     ................
  4093c0:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
  4093d0:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
  4093e0:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
  4093f0:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
  409400:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
  409410:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...

00409420 <tbl_lower.4250>:
  409420:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
  409430:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
  409440:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
  409450:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
  409460:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
  409470:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
  409480:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
  409490:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
  4094a0:	0103 0105 0107 0109 010b 010d 010f 0111     ................
  4094b0:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
  4094c0:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
  4094d0:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
  4094e0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
  4094f0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
  409500:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
  409510:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
  409520:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
  409530:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
  409540:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
  409550:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
  409560:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
  409570:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
  409580:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
  409590:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
  4095a0:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
  4095b0:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
  4095c0:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
  4095d0:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
  4095e0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
  4095f0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...
  409600:	2d2d 4e20 4e41 2044 6c46 7361 2068 6152     -- NAND Flash Ra
  409610:	2077 7845 6d61 6c70 2065 2d2d 0d0a 0000     w Example --....
  409620:	2d2d 2520 0a73 000d 4153 344d 2d53 4b45     -- %s...SAM4S-EK
  409630:	0032 0000 2d2d 4320 6d6f 6970 656c 3a64     2...-- Compiled:
  409640:	2520 2073 7325 2d20 0a2d 000d 754a 206e      %s %s --...Jun 
  409650:	3432 3220 3130 0035 3431 353a 3a37 3031     24 2015.14:57:10
  409660:	0000 0000 7573 6363 7365 0073 0a0c 2d0d     ....success....-
  409670:	202d 4453 4d2f 434d 532f 4944 204f 6143     - SD/MMC/SDIO Ca
  409680:	6472 4520 6178 706d 656c 6f20 206e 6146     rd Example on Fa
  409690:	4674 2073 2d2d 0d0a 0000 0000 6c50 6165     tFs --......Plea
  4096a0:	6573 7020 756c 2067 6e61 5320 2c44 4d20     se plug an SD, M
  4096b0:	434d 6f20 2072 4453 4f49 6320 7261 2064     MC or SDIO card 
  4096c0:	6e69 7320 6f6c 2e74 0d0a 0000 6143 6472     in slot.....Card
  4096d0:	6920 736e 6174 6c6c 4620 4941 0a4c 000d      install FAIL...
  4096e0:	6c50 6165 6573 7520 706e 756c 2067 6e61     Please unplug an
  4096f0:	2064 6572 702d 756c 2067 6874 2065 6163     d re-plug the ca
  409700:	6472 0a2e 000d 0000 6f4d 6e75 2074 6964     rd......Mount di
  409710:	6b73 2820 5f66 6f6d 6e75 2974 2e2e 0d2e     sk (f_mount)....
  409720:	000a 0000 465b 4941 5d4c 7220 7365 2520     ....[FAIL] res %
  409730:	0d64 000a 4f5b 5d4b 0a0d 0000 7243 6165     d...[OK]....Crea
  409740:	6574 6120 6620 6c69 2065 6628 6f5f 6570     te a file (f_ope
  409750:	296e 2e2e 0d2e 000a 7257 7469 2065 6f74     n)......Write to
  409760:	7420 7365 2074 6966 656c 2820 5f66 7570      test file (f_pu
  409770:	7374 2e29 2e2e 0a0d 0000 0000 6554 7473     ts).........Test
  409780:	5320 2f44 4d4d 2043 7473 6361 0a6b 0000      SD/MMC stack...
  409790:	465b 4941 5d4c 0a0d 0000 0000 6554 7473     [FAIL]......Test
  4097a0:	6920 2073 7573 6363 7365 6673 6c75 0a2e      is successful..
  4097b0:	000d 0000 6c50 6165 6573 7520 706e 756c     ....Please unplu
  4097c0:	2067 6874 2065 6163 6472 0a2e 000d 0000     g the card......
  4097d0:	3a30 6473 6d5f 636d 745f 7365 2e74 7874     0:sd_mmc_test.tx
  4097e0:	0074 0000                                   t...

004097e4 <_global_impure_ptr>:
  4097e4:	0048 2000 0043                              H.. C.

004097ea <blanks.6678>:
  4097ea:	2020 2020 2020 2020 2020 2020 2020 2020                     

004097fa <zeroes.6679>:
  4097fa:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40980a:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
  40981a:	3000 3231 3433 3635 3837 6139 6362 6564     .0123456789abcde
  40982a:	0066 4f50 4953 0058 002e                    f.POSIX...

00409834 <_init>:
  409834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409836:	bf00      	nop
  409838:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40983a:	bc08      	pop	{r3}
  40983c:	469e      	mov	lr, r3
  40983e:	4770      	bx	lr

00409840 <__init_array_start>:
  409840:	00406cf5 	.word	0x00406cf5

00409844 <__frame_dummy_init_array_entry>:
  409844:	00400145                                E.@.

00409848 <_fini>:
  409848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40984a:	bf00      	nop
  40984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40984e:	bc08      	pop	{r3}
  409850:	469e      	mov	lr, r3
  409852:	4770      	bx	lr

00409854 <__fini_array_start>:
  409854:	0040011d 	.word	0x0040011d

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <sd_mmc_cards>:
	...
20000014:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...

20000030 <g_interrupt_enabled>:
20000030:	0001 0000                                   ....

20000034 <g_ul_lcd_x_length>:
20000034:	00f0 0000                                   ....

20000038 <g_ul_lcd_y_length>:
20000038:	0140 0000                                   @...

2000003c <SystemCoreClock>:
2000003c:	0900 003d                                   ..=.

20000040 <_impure_ptr>:
20000040:	0048 2000 0000 0000                         H.. ....

20000048 <impure_data>:
20000048:	0000 0000 0334 2000 039c 2000 0404 2000     ....4.. ... ... 
	...
2000007c:	97e8 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000f0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000100:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000470 <lc_ctype_charset>:
20000470:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000490 <__mb_cur_max>:
20000490:	0001 0000                                   ....

20000494 <lc_message_charset>:
20000494:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

200004b4 <lconv>:
200004b4:	9832 0040 9833 0040 9833 0040 9833 0040     2.@.3.@.3.@.3.@.
200004c4:	9833 0040 9833 0040 9833 0040 9833 0040     3.@.3.@.3.@.3.@.
200004d4:	9833 0040 9833 0040 ffff ffff ffff ffff     3.@.3.@.........
200004e4:	ffff ffff ffff 0000                         ........

200004ec <__malloc_av_>:
	...
200004f4:	04ec 2000 04ec 2000 04f4 2000 04f4 2000     ... ... ... ... 
20000504:	04fc 2000 04fc 2000 0504 2000 0504 2000     ... ... ... ... 
20000514:	050c 2000 050c 2000 0514 2000 0514 2000     ... ... ... ... 
20000524:	051c 2000 051c 2000 0524 2000 0524 2000     ... ... $.. $.. 
20000534:	052c 2000 052c 2000 0534 2000 0534 2000     ,.. ,.. 4.. 4.. 
20000544:	053c 2000 053c 2000 0544 2000 0544 2000     <.. <.. D.. D.. 
20000554:	054c 2000 054c 2000 0554 2000 0554 2000     L.. L.. T.. T.. 
20000564:	055c 2000 055c 2000 0564 2000 0564 2000     \.. \.. d.. d.. 
20000574:	056c 2000 056c 2000 0574 2000 0574 2000     l.. l.. t.. t.. 
20000584:	057c 2000 057c 2000 0584 2000 0584 2000     |.. |.. ... ... 
20000594:	058c 2000 058c 2000 0594 2000 0594 2000     ... ... ... ... 
200005a4:	059c 2000 059c 2000 05a4 2000 05a4 2000     ... ... ... ... 
200005b4:	05ac 2000 05ac 2000 05b4 2000 05b4 2000     ... ... ... ... 
200005c4:	05bc 2000 05bc 2000 05c4 2000 05c4 2000     ... ... ... ... 
200005d4:	05cc 2000 05cc 2000 05d4 2000 05d4 2000     ... ... ... ... 
200005e4:	05dc 2000 05dc 2000 05e4 2000 05e4 2000     ... ... ... ... 
200005f4:	05ec 2000 05ec 2000 05f4 2000 05f4 2000     ... ... ... ... 
20000604:	05fc 2000 05fc 2000 0604 2000 0604 2000     ... ... ... ... 
20000614:	060c 2000 060c 2000 0614 2000 0614 2000     ... ... ... ... 
20000624:	061c 2000 061c 2000 0624 2000 0624 2000     ... ... $.. $.. 
20000634:	062c 2000 062c 2000 0634 2000 0634 2000     ,.. ,.. 4.. 4.. 
20000644:	063c 2000 063c 2000 0644 2000 0644 2000     <.. <.. D.. D.. 
20000654:	064c 2000 064c 2000 0654 2000 0654 2000     L.. L.. T.. T.. 
20000664:	065c 2000 065c 2000 0664 2000 0664 2000     \.. \.. d.. d.. 
20000674:	066c 2000 066c 2000 0674 2000 0674 2000     l.. l.. t.. t.. 
20000684:	067c 2000 067c 2000 0684 2000 0684 2000     |.. |.. ... ... 
20000694:	068c 2000 068c 2000 0694 2000 0694 2000     ... ... ... ... 
200006a4:	069c 2000 069c 2000 06a4 2000 06a4 2000     ... ... ... ... 
200006b4:	06ac 2000 06ac 2000 06b4 2000 06b4 2000     ... ... ... ... 
200006c4:	06bc 2000 06bc 2000 06c4 2000 06c4 2000     ... ... ... ... 
200006d4:	06cc 2000 06cc 2000 06d4 2000 06d4 2000     ... ... ... ... 
200006e4:	06dc 2000 06dc 2000 06e4 2000 06e4 2000     ... ... ... ... 
200006f4:	06ec 2000 06ec 2000 06f4 2000 06f4 2000     ... ... ... ... 
20000704:	06fc 2000 06fc 2000 0704 2000 0704 2000     ... ... ... ... 
20000714:	070c 2000 070c 2000 0714 2000 0714 2000     ... ... ... ... 
20000724:	071c 2000 071c 2000 0724 2000 0724 2000     ... ... $.. $.. 
20000734:	072c 2000 072c 2000 0734 2000 0734 2000     ,.. ,.. 4.. 4.. 
20000744:	073c 2000 073c 2000 0744 2000 0744 2000     <.. <.. D.. D.. 
20000754:	074c 2000 074c 2000 0754 2000 0754 2000     L.. L.. T.. T.. 
20000764:	075c 2000 075c 2000 0764 2000 0764 2000     \.. \.. d.. d.. 
20000774:	076c 2000 076c 2000 0774 2000 0774 2000     l.. l.. t.. t.. 
20000784:	077c 2000 077c 2000 0784 2000 0784 2000     |.. |.. ... ... 
20000794:	078c 2000 078c 2000 0794 2000 0794 2000     ... ... ... ... 
200007a4:	079c 2000 079c 2000 07a4 2000 07a4 2000     ... ... ... ... 
200007b4:	07ac 2000 07ac 2000 07b4 2000 07b4 2000     ... ... ... ... 
200007c4:	07bc 2000 07bc 2000 07c4 2000 07c4 2000     ... ... ... ... 
200007d4:	07cc 2000 07cc 2000 07d4 2000 07d4 2000     ... ... ... ... 
200007e4:	07dc 2000 07dc 2000 07e4 2000 07e4 2000     ... ... ... ... 
200007f4:	07ec 2000 07ec 2000 07f4 2000 07f4 2000     ... ... ... ... 
20000804:	07fc 2000 07fc 2000 0804 2000 0804 2000     ... ... ... ... 
20000814:	080c 2000 080c 2000 0814 2000 0814 2000     ... ... ... ... 
20000824:	081c 2000 081c 2000 0824 2000 0824 2000     ... ... $.. $.. 
20000834:	082c 2000 082c 2000 0834 2000 0834 2000     ,.. ,.. 4.. 4.. 
20000844:	083c 2000 083c 2000 0844 2000 0844 2000     <.. <.. D.. D.. 
20000854:	084c 2000 084c 2000 0854 2000 0854 2000     L.. L.. T.. T.. 
20000864:	085c 2000 085c 2000 0864 2000 0864 2000     \.. \.. d.. d.. 
20000874:	086c 2000 086c 2000 0874 2000 0874 2000     l.. l.. t.. t.. 
20000884:	087c 2000 087c 2000 0884 2000 0884 2000     |.. |.. ... ... 
20000894:	088c 2000 088c 2000 0894 2000 0894 2000     ... ... ... ... 
200008a4:	089c 2000 089c 2000 08a4 2000 08a4 2000     ... ... ... ... 
200008b4:	08ac 2000 08ac 2000 08b4 2000 08b4 2000     ... ... ... ... 
200008c4:	08bc 2000 08bc 2000 08c4 2000 08c4 2000     ... ... ... ... 
200008d4:	08cc 2000 08cc 2000 08d4 2000 08d4 2000     ... ... ... ... 
200008e4:	08dc 2000 08dc 2000 08e4 2000 08e4 2000     ... ... ... ... 

200008f4 <__malloc_sbrk_base>:
200008f4:	ffff ffff                                   ....

200008f8 <__malloc_trim_threshold>:
200008f8:	0000 0002                                   ....

200008fc <__wctomb>:
200008fc:	80d9 0040                                   ..@.
